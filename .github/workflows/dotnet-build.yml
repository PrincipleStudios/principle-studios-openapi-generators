name: All packages build

on:
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
            dotnet-version: 6.0.x
    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: 16
        registry-url: https://npm.pkg.github.com/

    - name: Cache nuget packages
      uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration Release
    - name: Finish building TypeScript DLL
      working-directory: ./generators/typescript
      run: dotnet publish ./PrincipleStudios.OpenApiCodegen.Client.TypeScript/PrincipleStudios.OpenApiCodegen.Client.TypeScript.csproj -c Release -p:UseAppHost=false -o ./npm/dotnet
    - name: Install node packages for typescript
      working-directory: ./generators/typescript/npm
      run: npm ci

    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage"
    ## The code coverage action works, but doesn't do much.
    # - name: Record code coverage
    #   uses: 5monkeys/cobertura-action@master
    #   with:
    #     path: lib/*/out/TestResults/*/coverage.cobertura.xml
    #     repo_token: ${{ secrets.GITHUB_TOKEN }}
    #     minimum_coverage: 90
    #     fail_below_threshold: false
    - name: Test packages for typescript
      working-directory: ./generators/typescript/npm
      run: npm test

    - name: Publish MVC Server codegen to NuGet registry if new version number
      run: dotnet nuget push ./generators/dotnetcore-server-interfaces/PrincipleStudios.OpenApiCodegen.Server.Mvc.MsBuild/bin/Release/*.nupkg -k ${GITHUB_TOKEN} -s https://nuget.pkg.github.com/$GITHUB_REPOSITORY_OWNER/index.json --skip-duplicate --no-symbols 1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish .NET Client codegen to NuGet registry if new version number
      run: dotnet nuget push ./generators/dotnetstandard-client/PrincipleStudios.OpenApiCodegen.Client.MsBuild/bin/Release/*.nupkg -k ${GITHUB_TOKEN} -s https://nuget.pkg.github.com/$GITHUB_REPOSITORY_OWNER/index.json --skip-duplicate --no-symbols 1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish typescript npm package
      working-directory: ./generators/typescript/npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
