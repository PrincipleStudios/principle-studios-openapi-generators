/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Test
{ 
    /// <summary>
    public abstract class PetsIdControllerBase : ControllerBase
    {
        
        /// <remarks>
        /// Returns a user based on a single ID, if the user does not have access to the pet
        /// </remarks>
        /// <param name="id">ID of pet to fetch</param>
        [HttpGet]
        [Route("/pets/{id}")]
        // unexpected error
        [ProducesDefaultResponseType(typeof(Error))] // application/json
        // pet response
        [ProducesResponseType(200, Type = typeof(Pet))] // application/json
        public async Task<IActionResult> FindPetById(
            [FromRoute(Name = "id"), Required] long id
        ) => (await FindPetByIdTypeSafe(id)).ActionResult;

        protected abstract Task<TypeSafeFindPetByIdResult> FindPetByIdTypeSafe(
            long id);

        public readonly struct TypeSafeFindPetByIdResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeFindPetByIdResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeFindPetByIdResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeFindPetByIdResult(int statusCode, string mediaType, Type declaredType, object? resultObject)
                : this(new ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            
            /// <summary>
            /// pet response
            /// </summary>
            public static TypeSafeFindPetByIdResult ApplicationJsonStatusCode200(Pet result) =>
                new TypeSafeFindPetByIdResult(200, "application/json", typeof(Pet), result);
            
            
            public static TypeSafeFindPetByIdResult ApplicationJsonOtherStatusCode(int statusCode, Error result) =>
                new TypeSafeFindPetByIdResult(statusCode, "application/json", typeof(Error), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeFindPetByIdResult Unsafe(IActionResult actionResult) =>
                new TypeSafeFindPetByIdResult(actionResult);
        }

        /// <remarks>
        /// deletes a single pet based on the ID supplied
        /// </remarks>
        /// <param name="id">ID of pet to delete</param>
        [HttpDelete]
        [Route("/pets/{id}")]
        // unexpected error
        [ProducesDefaultResponseType(typeof(Error))] // application/json
        // pet deleted

        public async Task<IActionResult> DeletePet(
            [FromRoute(Name = "id"), Required] long id
        ) => (await DeletePetTypeSafe(id)).ActionResult;

        protected abstract Task<TypeSafeDeletePetResult> DeletePetTypeSafe(
            long id);

        public readonly struct TypeSafeDeletePetResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeDeletePetResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeDeletePetResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeDeletePetResult(int statusCode, string mediaType, Type declaredType, object? resultObject)
                : this(new ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            
            
            public static TypeSafeDeletePetResult ApplicationJsonOtherStatusCode(int statusCode, Error result) =>
                new TypeSafeDeletePetResult(statusCode, "application/json", typeof(Error), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeDeletePetResult Unsafe(IActionResult actionResult) =>
                new TypeSafeDeletePetResult(actionResult);
        }
    }
}
