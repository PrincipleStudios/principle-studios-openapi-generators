/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Test
{ 
    public partial class Pet : IEquatable<Pet>
    {
        public Pet(
            [JsonProperty(PropertyName="id")] long Id
            [JsonProperty(PropertyName="category")] Category Category
            [JsonProperty(PropertyName="name"), Required] string Name
            [JsonProperty(PropertyName="photoUrls"), Required] global::System.Collections.Generic.IEnumerable<string> PhotoUrls
            [JsonProperty(PropertyName="tags")] global::System.Collections.Generic.IEnumerable<Tag> Tags
            [JsonProperty(PropertyName="status")] string Status
        ) { 
            this.Id = Id;
            this.Category = Category;
            this.Name = Name;
            this.PhotoUrls = PhotoUrls;
            this.Tags = Tags;
            this.Status = Status;
        }

        /// <summary>
        /// Gets Id
        /// </summary>
        [JsonProperty(PropertyName="id")]
        public long Id { get; }

        /// <summary>
        /// Gets Category
        /// </summary>
        [JsonProperty(PropertyName="category")]
        public Category Category { get; }

        /// <summary>
        /// Gets Name
        /// </summary>
        [Required]
        [JsonProperty(PropertyName="name")]
        public string Name { get; }

        /// <summary>
        /// Gets PhotoUrls
        /// </summary>
        [Required]
        [JsonProperty(PropertyName="photoUrls")]
        public global::System.Collections.Generic.IEnumerable<string> PhotoUrls { get; }

        /// <summary>
        /// Gets Tags
        /// </summary>
        [JsonProperty(PropertyName="tags")]
        public global::System.Collections.Generic.IEnumerable<Tag> Tags { get; }

        /// <summary>
        /// Gets Status
        /// </summary>
        [JsonProperty(PropertyName="status")]
        public string Status { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Pet)obj);
        }

        public bool Equals(Pet other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return (
                Id == other.Id ||
                Id != null &&
                Id.Equals(other.Id)
            ) && (
                Category == other.Category ||
                Category != null &&
                Category.Equals(other.Category)
            ) && (
                Name == other.Name ||
                Name != null &&
                Name.Equals(other.Name)
            ) && (
                PhotoUrls == other.PhotoUrls ||
                PhotoUrls != null &&
                PhotoUrls.Equals(other.PhotoUrls)
            ) && (
                Tags == other.Tags ||
                Tags != null &&
                Tags.Equals(other.Tags)
            ) && (
                Status == other.Status ||
                Status != null &&
                Status.Equals(other.Status)
            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (PhotoUrls != null)
                    hashCode = hashCode * 59 + PhotoUrls.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }
    }
}
