// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`typescript-axios petstore.yaml can generate the files 1`] = `
"/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public abstract class DefaultApiControllerBase : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Creates a new pet in the store. Duplicates are allowed</remarks>
        /// <param name=\\"newPet\\">Pet to add to the store</param>
        [HttpPost]
        [Route(\\"/api/pets\\")]
        
        [ProducesResponseType(200, Type = typeof(Pet))] // pet response
        [ProducesResponseType(0, Type = typeof(Error))] // unexpected error
        public abstract Task<IActionResult> AddPet(
            [FromBody] NewPet newPet);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>deletes a single pet based on the ID supplied</remarks>
        /// <param name=\\"id\\">ID of pet to delete</param>
        [HttpDelete]
        [Route(\\"/api/pets/{id}\\")]
        
        [ProducesResponseType(204)] // pet deleted
        [ProducesResponseType(0, Type = typeof(Error))] // unexpected error
        public abstract Task<IActionResult> DeletePet(
            [FromRoute, Required] long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Returns a user based on a single ID, if the user does not have access to the pet</remarks>
        /// <param name=\\"id\\">ID of pet to fetch</param>
        [HttpGet]
        [Route(\\"/api/pets/{id}\\")]
        
        [ProducesResponseType(200, Type = typeof(Pet))] // pet response
        [ProducesResponseType(0, Type = typeof(Error))] // unexpected error
        public abstract Task<IActionResult> FindPetById(
            [FromRoute, Required] long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Returns all pets from the system that the user has access to Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.  Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien. </remarks>
        /// <param name=\\"tags\\">tags to filter by</param>
        /// <param name=\\"limit\\">maximum number of results to return</param>
        [HttpGet]
        [Route(\\"/api/pets\\")]
        
        [ProducesResponseType(200, Type = typeof(List<Pet>))] // pet response
        [ProducesResponseType(0, Type = typeof(Error))] // unexpected error
        public abstract Task<IActionResult> FindPets(
            [FromQuery] List<string> tags,
            [FromQuery] int? limit);
    }
}"
`;

exports[`typescript-axios petstore.yaml can generate the files 2`] = `
"/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class Error : IEquatable<Error>
    {
        public Error(
                [JsonProperty(PropertyName=\\"code\\"), Required] int? Code, 
                [JsonProperty(PropertyName=\\"message\\"), Required] string Message
            )
        { 
            this.Code = Code;
            this.Message = Message;
        }

        
        /// <summary>
        /// Gets Code
        /// </summary>
        [Required]
        [JsonProperty(PropertyName=\\"code\\")]
        public int? Code { get; }

        /// <summary>
        /// Gets Message
        /// </summary>
        [Required]
        [JsonProperty(PropertyName=\\"message\\")]
        public string Message { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Error)obj);
        }

        public bool Equals(Error other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`typescript-axios petstore.yaml can generate the files 3`] = `
"/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class NewPet : IEquatable<NewPet>
    {
        public NewPet(
                [JsonProperty(PropertyName=\\"name\\"), Required] string Name, 
                [JsonProperty(PropertyName=\\"tag\\")] string Tag
            )
        { 
            this.Name = Name;
            this.Tag = Tag;
        }

        
        /// <summary>
        /// Gets Name
        /// </summary>
        [Required]
        [JsonProperty(PropertyName=\\"name\\")]
        public string Name { get; }

        /// <summary>
        /// Gets Tag
        /// </summary>
        [JsonProperty(PropertyName=\\"tag\\")]
        public string Tag { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NewPet)obj);
        }

        public bool Equals(NewPet other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Tag == other.Tag ||
                    Tag != null &&
                    Tag.Equals(other.Tag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Tag != null)
                    hashCode = hashCode * 59 + Tag.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`typescript-axios petstore.yaml can generate the files 4`] = `
"/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class Pet : IEquatable<Pet>
    {
        public Pet(
                [JsonProperty(PropertyName=\\"name\\"), Required] string Name, 
                [JsonProperty(PropertyName=\\"tag\\")] string Tag, 
                [JsonProperty(PropertyName=\\"id\\"), Required] long? Id
            )
        { 
            this.Name = Name;
            this.Tag = Tag;
            this.Id = Id;
        }

        
        /// <summary>
        /// Gets Name
        /// </summary>
        [Required]
        [JsonProperty(PropertyName=\\"name\\")]
        public string Name { get; }

        /// <summary>
        /// Gets Tag
        /// </summary>
        [JsonProperty(PropertyName=\\"tag\\")]
        public string Tag { get; }

        /// <summary>
        /// Gets Id
        /// </summary>
        [Required]
        [JsonProperty(PropertyName=\\"id\\")]
        public long? Id { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Pet)obj);
        }

        public bool Equals(Pet other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Tag == other.Tag ||
                    Tag != null &&
                    Tag.Equals(other.Tag)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Tag != null)
                    hashCode = hashCode * 59 + Tag.GetHashCode();
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`typescript-axios petstore.yaml can generate the files 5`] = `
"/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class PetAllOf : IEquatable<PetAllOf>
    {
        public PetAllOf(
                [JsonProperty(PropertyName=\\"id\\"), Required] long? Id
            )
        { 
            this.Id = Id;
        }

        
        /// <summary>
        /// Gets Id
        /// </summary>
        [Required]
        [JsonProperty(PropertyName=\\"id\\")]
        public long? Id { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PetAllOf)obj);
        }

        public bool Equals(PetAllOf other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;
