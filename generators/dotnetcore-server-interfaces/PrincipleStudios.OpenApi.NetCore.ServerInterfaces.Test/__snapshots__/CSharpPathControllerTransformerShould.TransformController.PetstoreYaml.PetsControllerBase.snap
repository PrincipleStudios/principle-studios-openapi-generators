/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Test
{ 
    /// <summary>
    public abstract class PetsControllerBase : ControllerBase
    {
        
        /// <remarks>
        /// Returns all pets from the system that the user has access to
        /// Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
        /// 
        /// Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
        /// 
        /// </remarks>
        /// <param name="tags">tags to filter by</param>
        /// <param name="limit">maximum number of results to return</param>
        [HttpGet]
        [Route("/pets")]
        // unexpected error
        [ProducesDefaultResponseType(typeof(Error))] // application/json
        // pet response
        [ProducesResponseType(200, Type = typeof(global::System.Collections.Generic.IEnumerable<Pet>))] // application/json
        public async Task<IActionResult> FindPets(
            [FromQuery(Name = "tags")] global::System.Collections.Generic.IEnumerable<string> tags,
            [FromQuery(Name = "limit")] int limit
        ) => (await FindPetsTypeSafe(tags,limit)).ActionResult;

        protected abstract Task<TypeSafeFindPetsResult> FindPetsTypeSafe(
            global::System.Collections.Generic.IEnumerable<string> tags, 
            int limit);

        public readonly struct TypeSafeFindPetsResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeFindPetsResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeFindPetsResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeFindPetsResult(int statusCode, string mediaType, Type declaredType, object? resultObject)
                : this(new ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            
            /// <summary>
            /// pet response
            /// </summary>
            public static TypeSafeFindPetsResult ApplicationJsonStatusCode200(global::System.Collections.Generic.IEnumerable<Pet> result) =>
                new TypeSafeFindPetsResult(200, "application/json", typeof(global::System.Collections.Generic.IEnumerable<Pet>), result);
            
            
            public static TypeSafeFindPetsResult ApplicationJsonOtherStatusCode(int statusCode, Error result) =>
                new TypeSafeFindPetsResult(statusCode, "application/json", typeof(Error), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeFindPetsResult Unsafe(IActionResult actionResult) =>
                new TypeSafeFindPetsResult(actionResult);
        }

        /// <remarks>
        /// Creates a new pet in the store. Duplicates are allowed
        /// </remarks>
        /// <param name="addPetBody"></param>
        [HttpPost]
        [Route("/pets")]
        [Consumes("application/json")]
        // unexpected error
        [ProducesDefaultResponseType(typeof(Error))] // application/json
        // pet response
        [ProducesResponseType(200, Type = typeof(Pet))] // application/json
        public async Task<IActionResult> AddPet(
            [FromBody, Required] NewPet addPetBody
        ) => (await AddPetTypeSafe(addPetBody)).ActionResult;

        protected abstract Task<TypeSafeAddPetResult> AddPetTypeSafe(
            NewPet addPetBody);

        public readonly struct TypeSafeAddPetResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeAddPetResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeAddPetResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeAddPetResult(int statusCode, string mediaType, Type declaredType, object? resultObject)
                : this(new ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            
            /// <summary>
            /// pet response
            /// </summary>
            public static TypeSafeAddPetResult ApplicationJsonStatusCode200(Pet result) =>
                new TypeSafeAddPetResult(200, "application/json", typeof(Pet), result);
            
            
            public static TypeSafeAddPetResult ApplicationJsonOtherStatusCode(int statusCode, Error result) =>
                new TypeSafeAddPetResult(statusCode, "application/json", typeof(Error), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeAddPetResult Unsafe(IActionResult actionResult) =>
                new TypeSafeAddPetResult(actionResult);
        }
    }
}
