/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Test
{ 
    public partial class ApiResponse : IEquatable<ApiResponse>
    {
        public ApiResponse(
            [JsonProperty(PropertyName="code")] int Code
            [JsonProperty(PropertyName="type")] string Type
            [JsonProperty(PropertyName="message")] string Message
        ) { 
            this.Code = Code;
            this.Type = Type;
            this.Message = Message;
        }

        /// <summary>
        /// Gets Code
        /// </summary>
        [JsonProperty(PropertyName="code")]
        public int Code { get; }

        /// <summary>
        /// Gets Type
        /// </summary>
        [JsonProperty(PropertyName="type")]
        public string Type { get; }

        /// <summary>
        /// Gets Message
        /// </summary>
        [JsonProperty(PropertyName="message")]
        public string Message { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiResponse)obj);
        }

        public bool Equals(ApiResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return (
                Code == other.Code ||
                Code != null &&
                Code.Equals(other.Code)
            ) && (
                Type == other.Type ||
                Type != null &&
                Type.Equals(other.Type)
            ) && (
                Message == other.Message ||
                Message != null &&
                Message.Equals(other.Message)
            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                return hashCode;
            }
        }
    }
}
