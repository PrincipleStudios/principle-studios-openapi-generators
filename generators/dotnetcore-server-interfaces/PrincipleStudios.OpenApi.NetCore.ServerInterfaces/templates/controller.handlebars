{{>partial_header header}}
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
#nullable enable
#nullable disable warnings

namespace {{packageName}}
{ {{#if operations}}
    {{#if header.description}}/// <summary>
    /// {{header.description}}
    /// </summary>
    [Description("{{header.description}}")]{{/if}}
    public abstract class {{className}}ControllerBase : ControllerBase
    {
        {{#each operations}}
        /// <summary>
        /// {{#summary}}{{summary}}{{/summary}}
        /// </summary>{{#notes}}
        /// <remarks>{{notes}}</remarks>{{/notes}}{{#allParams}}
        /// <param name="{{paramName}}">{{description}}</param>{{/allParams}}
        [{{httpMethod}}]
        [Route("{{{basePathWithoutHost}}}{{{path}}}")]{{!
        }}{{#responses}}
        [ProducesResponseType({{code}}{{#dataType}}, Type = typeof({{{dataType}}}){{/dataType}})] // {{message}}{{/responses}}{{!
        }}{{#authMethods}}
        [Authorize("{{name}}")]{{/authMethods}}
        public async Task<IActionResult> {{operationId}}({{#allParams}}
            {{>pathParam}}{{>queryParam}}{{>bodyParam}}{{>formParam}}{{>headerParam}}{{#hasMore}},{{/hasMore}}{{/allParams}}) =>
            (await {{operationId}}TypeSafe({{#allParams}}{{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}})).ActionResult;

        protected abstract Task<TypeSafe{{operationId}}Result> {{operationId}}TypeSafe({{#allParams}}
            {{{dataType}}} {{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}});

        public readonly struct TypeSafe{{operationId}}Result
        {
            public readonly IActionResult ActionResult;

            private TypeSafe{{operationId}}Result(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafe{{operationId}}Result(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafe{{operationId}}Result(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }
            {{#responses}}

            {{#message}}/// <summary>{{message}}</summary>{{/message}}
            {{^isDefault}}public static TypeSafe{{operationId}}Result StatusCode{{code}}({{#dataType}}{{{dataType}}} result{{/dataType}}){{/isDefault}}{{!
            }}{{#isDefault}}public static TypeSafe{{operationId}}Result OtherStatusCode(int statusCode{{#dataType}}, {{{dataType}}} result{{/dataType}}){{/isDefault}} =>
                new TypeSafe{{operationId}}Result({{#isDefault}}statusCode{{/isDefault}}{{^isDefault}}{{code}}{{/isDefault}}{{#dataType}}, result{{/dataType}});
            {{/responses}}

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafe{{operationId}}Result Unsafe(IActionResult actionResult) =>
                new TypeSafe{{operationId}}Result(actionResult);
        }
        {{/each}}
    }
{{/if}}
}