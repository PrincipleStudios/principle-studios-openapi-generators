{{>partial_header header}}
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
#nullable enable
#nullable disable warnings

namespace {{packageName}}
{ {{#if operations}}
    /// <summary>{{#if summary}}
    /// {{summary}}
    /// </summary>{{/if}}{{#if description}}
    /// <remarks>
    /// {{description}}
    /// </remarks>{{/if}}{{#if description}}
    [Description("{{description}}")]{{/if}}
    public abstract class {{className}}ControllerBase : ControllerBase
    {
        {{#each operations}}{{#if summary}}
        /// <summary>
        /// {{summary}}
        /// </summary>{{/if}}{{#if description}}
        /// <remarks>
        /// {{description}}
        /// </remarks>{{/if}}{{#each allParams}}
        /// <param name="{{paramName}}">{{description}}</param>{{/each}}
        [Http{{httpMethod}}]
        [Route("{{{basePathWithoutHost}}}{{{path}}}")]{{#if requestBodyType}}
        [Consumes("{{{requestBodyType}}}")]{{/if}}{{!
        }}{{#each responses}}
        [ProducesResponseType({{code}}{{#if dataType}}, Type = typeof({{{dataType}}}){{/if}})] // {{message}}{{/each}}{{!
        }}{{#if authMethods}}
        [Authorize("{{name}}")]{{/if}}
        public async Task<IActionResult> {{name}}(
            {{#each allParams}}{{#unless isCookieParam}}[{{!
            }}{{#if isPathParam}}FromRoute(Name = "{{rawName}}"){{/if}}{{!
            }}{{#if isQueryParam}}FromQuery(Name = "{{rawName}}"){{/if}}{{!
            }}{{#if isBodyParam}}FromBody{{/if}}{{!
            }}{{#if isFormParam}}FromForm(Name = "{{rawName}}"){{/if}}{{!
            }}{{#if isHeaderParam}}FromHeader(Name = "{{rawName}}"){{/if}}{{!
            }}{{#if required}}, Required{{/if}}{{!
            }}{{#if pattern}}, RegularExpression("{{{pattern}}}"){{/if}}{{!
            }}{{#if minLength.HasValue}}, MinLength({{minLength}}){{/if}}{{!
            }}{{#if maxLength.HasValue}}, MaxLength({{maxLength}}){{/if}}{{!
            }}{{#if minimum.HasValue}}{{#if maximum.HasValue}}, Range({{minimum}}, {{maximum}}){{/if}}{{/if}}{{!
            }}] {{{dataType}}} {{paramName}}{{#unless @last}},
            {{/unless}}{{/unless}}{{/each}}
        ) => (await {{name}}TypeSafe({{#each allParams}}{{paramName}}{{#unless @last}},{{/unless}}{{/each}})).ActionResult;

        protected abstract Task<TypeSafe{{name}}Result> {{name}}TypeSafe({{#allParams}}
            {{{dataType}}} {{paramName}}{{#unless @last}},{{/unless}}{{/allParams}});

        public readonly struct TypeSafe{{name}}Result
        {
            public readonly IActionResult ActionResult;

            private TypeSafe{{name}}Result(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafe{{name}}Result(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafe{{name}}Result(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }
            {{#responses}}

            {{#message}}/// <summary>{{message}}</summary>{{/message}}
            {{^isDefault}}public static TypeSafe{{name}}Result StatusCode{{code}}({{#dataType}}{{{dataType}}} result{{/dataType}}){{/isDefault}}{{!
            }}{{#isDefault}}public static TypeSafe{{name}}Result OtherStatusCode(int statusCode{{#dataType}}, {{{dataType}}} result{{/dataType}}){{/isDefault}} =>
                new TypeSafe{{name}}Result({{#isDefault}}statusCode{{/isDefault}}{{^isDefault}}{{code}}{{/isDefault}}{{#dataType}}, result{{/dataType}});
            {{/responses}}

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafe{{name}}Result Unsafe(IActionResult actionResult) =>
                new TypeSafe{{name}}Result(actionResult);
        }
        {{/each}}
    }
{{/if}}
}