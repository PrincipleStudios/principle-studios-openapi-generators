{{>partial_header this}}
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace {{this.packageName}}
{ {{#with model}}{{#if isEnum}}{{>enumClass}}{{else}}
    {{#if description}}/// <summary>
    /// {{description}}
    /// </summary>
    {{/if}}public partial class {{classname}} : {{#if parent}}{{{parent}}}, {{/if}}IEquatable<{{classname}}>
    {
        public {{classname}}(
        {{#each vars}}    [JsonProperty(PropertyName="{{baseName}}"){{#required}}, Required{{/required}}]{{!
        data type: }} {{#isEnum}}{{{datatypeWithEnum}}}{{^isContainer}}?{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{!
        name: }} {{name}}{{#hasMore}}, {{/hasMore}}
        {{/each}}) { {{#each vars}}
            this.{{name}} = {{name}};{{/each}}
        }

        {{#each vars}}
        /// <summary>
        /// Gets {{^description}}{{{name}}}{{/description}}{{#description}}{{description}}{{/description}}
        /// </summary>
        {{#if required}}
        [Required]
        {{/if}}
        [JsonProperty(PropertyName="{{baseName}}")]
        public {{{dataType}}} {{name}} { get; }

        {{/each}}
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals(({{classname}})obj);
        }

        public bool Equals({{classname}} other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return {{#each vars}}{{#if isContainer}}(
                {{name}} == other.{{name}} ||
                {{name}} != null &&
                {{name}}.SequenceEqual(other.{{name}})
            )
            {{else}}(
                {{name}} == other.{{name}} ||
                {{^isEnum}}{{name}} != null &&
                {{/isEnum}}{{name}}.Equals(other.{{name}})
            ){{/if}}{{#unless @last}} && {{/unless}}{{/each}};
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                {{#each vars}}
                if ({{name}} != null)
                    hashCode = hashCode * 59 + {{name}}.GetHashCode();
                {{/each}}
                return hashCode;
            }
        }
    }
{{/if}}
{{/with}}
}