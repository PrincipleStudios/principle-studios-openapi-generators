{{>partial_header header}}
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace {{packageName}}
{ {{#if operations}}{{#if summary}}
    /// <summary>
    /// {{linewrap summary "
    /// "}}
    /// </summary>{{/if}}{{#if description}}
    /// <remarks>
    /// {{linewrap description "
    /// "}}
    /// </remarks>{{/if}}{{#if description}}
    [Description("{{description}}")]{{/if}}
    public abstract class {{className}} : global::Microsoft.AspNetCore.Mvc.ControllerBase
    {
        {{#each operations as |operation|}}{{#each requestBodies as |requestBody|}}{{#if operation.summary}}
        /// <summary>
        /// {{linewrap operation.summary "
        /// "}}
        /// </summary>{{/if}}{{#if operation.description}}
        /// <remarks>
        /// {{linewrap operation.description "
        /// "}}
        /// </remarks>{{/if}}{{#each requestBody.allParams}}
        /// <param name="{{paramName}}">{{description}}</param>{{/each}}
        [global::Microsoft.AspNetCore.Mvc.Http{{operation.httpMethod}}]
        [global::Microsoft.AspNetCore.Mvc.Route("{{{operation.basePathWithoutHost}}}{{{operation.path}}}")]{{#if requestBody.requestBodyType}}
        [global::Microsoft.AspNetCore.Mvc.Consumes("{{{requestBody.requestBodyType}}}")]{{/if}}{{!
        }}{{#if operation.responses.defaultResponse}}
        // {{operation.responses.defaultResponse.description}}
        {{#each operation.responses.defaultResponse.content}}
        [global::Microsoft.AspNetCore.Mvc.ProducesDefaultResponseType({{#if dataType}}typeof({{{dataType}}}){{/if}})] // {{mediaType}}{{/each}}{{/if}}{{!
        }}{{#each operation.responses.statusResponse as |response statusCode|}}
        // {{response.description}}
        {{#each response.content}}
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType({{statusCode}}{{#if dataType}}, Type = typeof({{{dataType}}}){{/if}})] // {{mediaType}}{{/each}}{{/each}}{{!
        }}{{#each operation.securityRequirements}}{{#if schemes.Length}}
        [global::Microsoft.AspNetCore.Authorization.Authorize(Policy = "{{#each schemes}}{{schemeName}}{{#unless @last}},{{/unless}}{{/each}}")]{{else}}
        [global::Microsoft.AspNetCore.Authorization.AllowAnonymous]{{/if}}{{/each}}
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> {{requestBody.name}}TypeSafeEntry(
            {{#each requestBody.allParams}}{{#unless isCookieParam}}[{{!
            }}{{#if isPathParam}}global::Microsoft.AspNetCore.Mvc.FromRoute(Name = "{{rawName}}"){{/if}}{{!
            }}{{#if isQueryParam}}global::Microsoft.AspNetCore.Mvc.FromQuery(Name = "{{rawName}}"){{/if}}{{!
            }}{{#if isBodyParam}}global::Microsoft.AspNetCore.Mvc.FromBody{{/if}}{{!
            }}{{#if isFormParam}}global::Microsoft.AspNetCore.Mvc.FromForm(Name = "{{rawName}}"){{/if}}{{!
            }}{{#if isHeaderParam}}global::Microsoft.AspNetCore.Mvc.FromHeader(Name = "{{rawName}}"){{/if}}{{!
            }}{{#if required}}, global::System.ComponentModel.DataAnnotations.Required{{/if}}{{!
            }}{{#if pattern}}, global::System.ComponentModel.DataAnnotations.RegularExpression(@"{{{escapeverbatimstring pattern}}}"){{/if}}{{!
            }}{{#if minLength.HasValue}}, global::System.ComponentModel.DataAnnotations.MinLength({{minLength}}){{/if}}{{!
            }}{{#if maxLength.HasValue}}, global::System.ComponentModel.DataAnnotations.MaxLength({{maxLength}}){{/if}}{{!
            }}{{#if minimum.HasValue}}{{#if maximum.HasValue}}, global::System.ComponentModel.DataAnnotations.Range({{minimum}}, {{maximum}}){{/if}}{{/if}}{{!
            }}] {{#unless optional}}{{{dataType}}}{{else
            }}global::PrincipleStudios.OpenApiCodegen.Json.Extensions.Optional<{{{dataType}}}>{{/unless}} {{paramName}}{{#unless @last}},
            {{/unless}}{{/unless}}{{/each}}
        ) => (await {{requestBody.name}}({{#each requestBody.allParams}}{{paramName}}{{#unless @last}},{{/unless}}{{/each}})).ActionResult;
        {{!--
            TODO - check scopes
            {{#each operation.securityRequirements}}{{#if schemes.Length}}{{#if }}
            if (User.Identity?.AuthenticationType == "OAuth2" && !await VerifyScopes(User, "read:user", "user:email"))
                return Forbid();{{/if}}{{/if}}{{/each}}
            return --}}

        protected abstract global::System.Threading.Tasks.Task<{{operation.name}}ActionResult> {{requestBody.name}}({{#each requestBody.allParams}}
            {{#unless optional}}{{{dataType}}}{{else
            }}global::PrincipleStudios.OpenApiCodegen.Json.Extensions.Optional<{{{dataType}}}>{{/unless}} {{paramName}}{{#unless @last}}, {{/unless}}{{/each}});
        {{/each}}

        public readonly struct {{name}}ActionResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private class HeaderActionResult : global::Microsoft.AspNetCore.Mvc.IActionResult
            {
                private readonly global::Microsoft.AspNetCore.Mvc.IActionResult original;
                private readonly global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers;

                public HeaderActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult original, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers)
                {
                    this.original = original;
                    this.headers = headers;
                }

                public global::System.Threading.Tasks.Task ExecuteResultAsync(global::Microsoft.AspNetCore.Mvc.ActionContext context)
                {
                    foreach (var header in headers)
                        context.HttpContext.Response.Headers[header.Key] = global::Microsoft.Extensions.Primitives.StringValues.Concat(context.HttpContext.Response.Headers[header.Key], header.Value);
                    return original.ExecuteResultAsync(context);
                }
            }

            private {{name}}ActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult, global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
            {
                this.ActionResult = new HeaderActionResult(ActionResult, headers);
            }

            private {{name}}ActionResult(int statusCode, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode), headers)
            {
            }

            private {{name}}ActionResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                }, headers)
            {
            }
            {{#each responses.statusResponse as |response code|}}{{#each content}}
            {{#if response.description}}/// <summary>
            /// {{linewrap response.description "
            /// "}}
            /// </summary>{{/if}}
            public static {{../../name}}ActionResult {{responseMethodName}}({{#if dataType}}{{{dataType}}} result{{#if ../headers.Length}},
                {{/if}}{{/if}}{{#each ../headers}}{{#unless @first}},
                {{/unless}}string {{paramName}}{{/each}}) =>
                new {{../../name}}ActionResult({{code}}{{#if dataType}}, "{{mediaType}}", typeof({{{dataType}}}), result{{/if}}{{#each ../headers}},
                    new global::System.Collections.Generic.KeyValuePair<string, string>("{{rawName}}", {{paramName}}){{/each}});
            {{/each}}{{/each}}{{#if responses.defaultResponse}}{{#each responses.defaultResponse.content}}
            {{#if responses.defaultResponse.description}}/// <summary>
            /// {{linewrap responses.defaultResponse.description "
            /// "}}
            /// </summary>{{/if}}
            public static {{../name}}ActionResult {{responseMethodName}}(int statusCode{{#if dataType}}, {{{dataType}}} result{{/if}}{{#each ../responses.defaultResponse.headers}},
                string {{paramName}}{{/each}}) =>
                new {{../name}}ActionResult(statusCode{{#if dataType}}, "{{mediaType}}", typeof({{{dataType}}}), result{{/if}}{{#each ../responses.defaultResponse.headers}},
                    new global::System.Collections.Generic.KeyValuePair<string, string>("{{rawName}}", {{paramName}}){{/each}});
            {{/each}}{{/if}}

            /// <summary>Allows for action results not specified in the API</summary>
            public static {{name}}ActionResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers) =>
                new {{name}}ActionResult(actionResult, headers);
        }
        {{/each}}
    }
{{/if}}
}