{{>partial_header header}}
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
#nullable enable
#nullable disable warnings

namespace {{packageName}}
{ {{#if operations}}
    /// <summary>{{#if summary}}
    /// {{linewrap summary "
    /// "}}
    /// </summary>{{/if}}{{#if description}}
    /// <remarks>
    /// {{linewrap description "
    /// "}}
    /// </remarks>{{/if}}{{#if description}}
    [Description("{{description}}")]{{/if}}
    public abstract class {{className}}ControllerBase : ControllerBase
    {
        {{#each operations as |operation|}}{{#each requestBodies as |requestBody|}}{{#if operation.summary}}
        /// <summary>
        /// {{linewrap operation.summary "
        /// "}}
        /// </summary>{{/if}}{{#if operation.description}}
        /// <remarks>
        /// {{linewrap operation.description "
        /// "}}
        /// </remarks>{{/if}}{{#each requestBody.allParams}}
        /// <param name="{{paramName}}">{{description}}</param>{{/each}}
        [Http{{operation.httpMethod}}]
        [Route("{{{operation.basePathWithoutHost}}}{{{operation.path}}}")]{{#if requestBody.requestBodyType}}
        [Consumes("{{{requestBody.requestBodyType}}}")]{{/if}}{{!
        }}{{#if operation.responses.defaultResponse}}
        // {{operation.responses.defaultResponse.description}}
        {{#each operation.responses.defaultResponse.content}}
        [ProducesDefaultResponseType({{#if dataType}}typeof({{{dataType}}}){{/if}})] // {{mediaType}}{{/each}}{{/if}}{{!
        }}{{#each operation.responses.statusResponse as |response statusCode|}}
        // {{response.description}}
        {{#each response.content}}
        [ProducesResponseType({{statusCode}}{{#if dataType}}, Type = typeof({{{dataType}}}){{/if}})] // {{mediaType}}{{/each}}{{/each}}{{!
        }}{{#if operation.authMethods}}
        [Authorize("{{name}}")]{{/if}}
        public async Task<IActionResult> {{operation.name}}(
            {{#each requestBody.allParams}}{{#unless isCookieParam}}[{{!
            }}{{#if isPathParam}}FromRoute(Name = "{{rawName}}"){{/if}}{{!
            }}{{#if isQueryParam}}FromQuery(Name = "{{rawName}}"){{/if}}{{!
            }}{{#if isBodyParam}}FromBody{{/if}}{{!
            }}{{#if isFormParam}}FromForm(Name = "{{rawName}}"){{/if}}{{!
            }}{{#if isHeaderParam}}FromHeader(Name = "{{rawName}}"){{/if}}{{!
            }}{{#if required}}, Required{{/if}}{{!
            }}{{#if pattern}}, RegularExpression("{{{pattern}}}"){{/if}}{{!
            }}{{#if minLength.HasValue}}, MinLength({{minLength}}){{/if}}{{!
            }}{{#if maxLength.HasValue}}, MaxLength({{maxLength}}){{/if}}{{!
            }}{{#if minimum.HasValue}}{{#if maximum.HasValue}}, Range({{minimum}}, {{maximum}}){{/if}}{{/if}}{{!
            }}] {{{dataType}}} {{paramName}}{{#unless @last}},
            {{/unless}}{{/unless}}{{/each}}
        ) => (await {{requestBody.name}}TypeSafe({{#each requestBody.allParams}}{{paramName}}{{#unless @last}},{{/unless}}{{/each}})).ActionResult;

        protected abstract Task<TypeSafe{{operation.name}}Result> {{requestBody.name}}TypeSafe({{#each requestBody.allParams}}
            {{{dataType}}} {{paramName}}{{#unless @last}}, {{/unless}}{{/each}});
        {{/each}}

        public readonly struct TypeSafe{{name}}Result
        {
            public readonly IActionResult ActionResult;

            private TypeSafe{{name}}Result(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafe{{name}}Result(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafe{{name}}Result(int statusCode, string mediaType, Type declaredType, object? resultObject)
                : this(new ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            {{#each responses.statusResponse as |response code|}}{{#each content}}
            {{#if response.description}}/// <summary>
            /// {{linewrap response.description "
            /// "}}
            /// </summary>{{/if}}
            public static TypeSafe{{../../name}}Result {{mediaTypeId}}StatusCode{{code}}({{#if dataType}}{{{dataType}}} result{{/if}}) =>
                new TypeSafe{{../../name}}Result({{code}}, "{{mediaType}}", {{#if dataType}}typeof({{{dataType}}}), result{{else}}typeof(void){{/if}});
            {{/each}}{{/each}}{{#if responses.defaultResponse}}{{#each responses.defaultResponse.content}}
            {{#if responses.defaultResponse.description}}/// <summary>
            /// {{linewrap responses.defaultResponse.description "
            /// "}}
            /// </summary>{{/if}}
            public static TypeSafe{{../name}}Result {{mediaTypeId}}OtherStatusCode(int statusCode{{#if dataType}}, {{{dataType}}} result{{/if}}) =>
                new TypeSafe{{../name}}Result(statusCode, "{{mediaType}}", {{#if dataType}}typeof({{{dataType}}}), result{{else}}typeof(void){{/if}});
            {{/each}}{{/if}}

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafe{{name}}Result Unsafe(IActionResult actionResult) =>
                new TypeSafe{{name}}Result(actionResult);
        }
        {{/each}}
    }
{{/if}}
}