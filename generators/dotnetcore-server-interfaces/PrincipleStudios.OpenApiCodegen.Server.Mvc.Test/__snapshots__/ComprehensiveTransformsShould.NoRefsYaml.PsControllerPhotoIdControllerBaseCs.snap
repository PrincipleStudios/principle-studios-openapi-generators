/*
 * No Refs Demo
 *
 * A sample API that uses no rfs
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
#nullable enable
#nullable disable warnings

namespace PS.Controller
{ 
    /// <summary>
    public abstract class PhotoIdControllerBase : ControllerBase
    {
        
        /// <param name="id"></param>
        [HttpGet]
        [Route("/photo/{id}")]
        // unexpected error
        [ProducesDefaultResponseType(typeof(GetPhotoDefaultApplicationJson))] // application/json
        // 
        [ProducesResponseType(200, Type = typeof(global::System.IO.Stream))] // application/octet-stream
        public async Task<IActionResult> GetPhoto(
            [FromRoute(Name = "id"), Required] string id
        ) => (await GetPhotoTypeSafe(id)).ActionResult;

        protected abstract Task<TypeSafeGetPhotoResult> GetPhotoTypeSafe(
            string id);

        public readonly struct TypeSafeGetPhotoResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeGetPhotoResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeGetPhotoResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeGetPhotoResult(int statusCode, string mediaType, Type declaredType, object? resultObject)
                : this(new ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            
            
            public static TypeSafeGetPhotoResult ApplicationOctetStreamStatusCode200(global::System.IO.Stream result) =>
                new TypeSafeGetPhotoResult(200, "application/octet-stream", typeof(global::System.IO.Stream), result);
            
            
            public static TypeSafeGetPhotoResult ApplicationJsonOtherStatusCode(int statusCode, GetPhotoDefaultApplicationJson result) =>
                new TypeSafeGetPhotoResult(statusCode, "application/json", typeof(GetPhotoDefaultApplicationJson), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeGetPhotoResult Unsafe(IActionResult actionResult) =>
                new TypeSafeGetPhotoResult(actionResult);
        }
    }
}
