/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PS.Controller
{ 
    public partial class UpdatePetWithFormApplicationWwwFormUrlencodedRequest : IEquatable<UpdatePetWithFormApplicationWwwFormUrlencodedRequest>
    {
        public UpdatePetWithFormApplicationWwwFormUrlencodedRequest(
            [JsonProperty(PropertyName="name")] string? Name, 
            [JsonProperty(PropertyName="status")] string? Status
        ) { 
            this.Name = Name;
            this.Status = Status;
        }

        /// <summary>
        /// Gets Name
        /// </summary>
        [JsonProperty(PropertyName="name")]
        public string? Name { get; }

        /// <summary>
        /// Gets Status
        /// </summary>
        [JsonProperty(PropertyName="status")]
        public string? Status { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdatePetWithFormApplicationWwwFormUrlencodedRequest)obj);
        }

        public bool Equals(UpdatePetWithFormApplicationWwwFormUrlencodedRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return (
                Name == other.Name ||
                Name != null &&
                Name.Equals(other.Name)
            ) && (
                Status == other.Status ||
                Status != null &&
                Status.Equals(other.Status)
            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }
    }
}
