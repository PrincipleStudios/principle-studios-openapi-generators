/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
#nullable enable
#nullable disable warnings

namespace PS.Controller
{ 
    /// <summary>
    public abstract class UserLoginControllerBase : ControllerBase
    {
        
        /// <summary>
        /// Logs user into the system
        /// </summary>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        [HttpGet]
        [Route("/user/login")]
        // successful operation
        [ProducesResponseType(200, Type = typeof(string))] // application/xml        [ProducesResponseType(200, Type = typeof(string))] // application/json
        // Invalid username/password supplied

        public async Task<IActionResult> LoginUser(
            [FromQuery(Name = "username"), Required] string username,
            [FromQuery(Name = "password"), Required] string password
        ) => (await LoginUserTypeSafe(username,password)).ActionResult;

        protected abstract Task<TypeSafeLoginUserResult> LoginUserTypeSafe(
            string username, 
            string password);

        public readonly struct TypeSafeLoginUserResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeLoginUserResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeLoginUserResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeLoginUserResult(int statusCode, string mediaType, Type declaredType, object? resultObject)
                : this(new ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            
            /// <summary>
            /// successful operation
            /// </summary>
            public static TypeSafeLoginUserResult ApplicationXmlStatusCode200(string result) =>
                new TypeSafeLoginUserResult(200, "application/xml", typeof(string), result);
            
            /// <summary>
            /// successful operation
            /// </summary>
            public static TypeSafeLoginUserResult ApplicationJsonStatusCode200(string result) =>
                new TypeSafeLoginUserResult(200, "application/json", typeof(string), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeLoginUserResult Unsafe(IActionResult actionResult) =>
                new TypeSafeLoginUserResult(actionResult);
        }
    }
}
