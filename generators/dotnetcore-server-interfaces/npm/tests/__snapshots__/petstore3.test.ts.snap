// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 1`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class ApiResponse : IEquatable<ApiResponse>
    {
        public ApiResponse(
                [JsonProperty(PropertyName=\\"code\\")] int? Code, 
                [JsonProperty(PropertyName=\\"type\\")] string Type, 
                [JsonProperty(PropertyName=\\"message\\")] string Message
            )
        { 
            this.Code = Code;
            this.Type = Type;
            this.Message = Message;
        }

        
        /// <summary>
        /// Gets Code
        /// </summary>
        [JsonProperty(PropertyName=\\"code\\")]
        public int? Code { get; }

        /// <summary>
        /// Gets Type
        /// </summary>
        [JsonProperty(PropertyName=\\"type\\")]
        public string Type { get; }

        /// <summary>
        /// Gets Message
        /// </summary>
        [JsonProperty(PropertyName=\\"message\\")]
        public string Message { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiResponse)obj);
        }

        public bool Equals(ApiResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 2`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class Category : IEquatable<Category>
    {
        public Category(
                [JsonProperty(PropertyName=\\"id\\")] long? Id, 
                [JsonProperty(PropertyName=\\"name\\")] string Name
            )
        { 
            this.Id = Id;
            this.Name = Name;
        }

        
        /// <summary>
        /// Gets Id
        /// </summary>
        [JsonProperty(PropertyName=\\"id\\")]
        public long? Id { get; }

        /// <summary>
        /// Gets Name
        /// </summary>
        [JsonProperty(PropertyName=\\"name\\")]
        public string Name { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Category)obj);
        }

        public bool Equals(Category other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 3`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class InlineObject : IEquatable<InlineObject>
    {
        public InlineObject(
                [JsonProperty(PropertyName=\\"name\\")] string Name, 
                [JsonProperty(PropertyName=\\"status\\")] string Status
            )
        { 
            this.Name = Name;
            this.Status = Status;
        }

        
        /// <summary>
        /// Gets Updated name of the pet
        /// </summary>
        [JsonProperty(PropertyName=\\"name\\")]
        public string Name { get; }

        /// <summary>
        /// Gets Updated status of the pet
        /// </summary>
        [JsonProperty(PropertyName=\\"status\\")]
        public string Status { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineObject)obj);
        }

        public bool Equals(InlineObject other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 4`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class Order : IEquatable<Order>
    {
        public Order(
                [JsonProperty(PropertyName=\\"id\\")] long? Id, 
                [JsonProperty(PropertyName=\\"petId\\")] long? PetId, 
                [JsonProperty(PropertyName=\\"quantity\\")] int? Quantity, 
                [JsonProperty(PropertyName=\\"shipDate\\")] DateTimeOffset ShipDate, 
                [JsonProperty(PropertyName=\\"status\\")] StatusEnum? Status, 
                [JsonProperty(PropertyName=\\"complete\\")] bool? Complete
            )
        { 
            this.Id = Id;
            this.PetId = PetId;
            this.Quantity = Quantity;
            this.ShipDate = ShipDate;
            this.Status = Status;
            this.Complete = Complete;
        }

        
        /// <summary>
        /// Gets Id
        /// </summary>
        [JsonProperty(PropertyName=\\"id\\")]
        public long? Id { get; }

        /// <summary>
        /// Gets PetId
        /// </summary>
        [JsonProperty(PropertyName=\\"petId\\")]
        public long? PetId { get; }

        /// <summary>
        /// Gets Quantity
        /// </summary>
        [JsonProperty(PropertyName=\\"quantity\\")]
        public int? Quantity { get; }

        /// <summary>
        /// Gets ShipDate
        /// </summary>
        [JsonProperty(PropertyName=\\"shipDate\\")]
        public DateTimeOffset ShipDate { get; }

        /// <summary>
        /// Order Status
        /// </summary>
        /// <value>Order Status</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum PlacedEnum for placed
            /// </summary>
            [EnumMember(Value = \\"placed\\")]
            PlacedEnum = 1,
            
            /// <summary>
            /// Enum ApprovedEnum for approved
            /// </summary>
            [EnumMember(Value = \\"approved\\")]
            ApprovedEnum = 2,
            
            /// <summary>
            /// Enum DeliveredEnum for delivered
            /// </summary>
            [EnumMember(Value = \\"delivered\\")]
            DeliveredEnum = 3
        }
        /// <summary>
        /// Gets Order Status
        /// </summary>
        [JsonProperty(PropertyName=\\"status\\")]
        public StatusEnum? Status { get; }

        /// <summary>
        /// Gets Complete
        /// </summary>
        [JsonProperty(PropertyName=\\"complete\\")]
        public bool? Complete { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Order)obj);
        }

        public bool Equals(Order other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    PetId == other.PetId ||
                    PetId != null &&
                    PetId.Equals(other.PetId)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    ShipDate == other.ShipDate ||
                    ShipDate != null &&
                    ShipDate.Equals(other.ShipDate)
                ) && 
                (
                    Status == other.Status ||
                    Status.Equals(other.Status)
                ) && 
                (
                    Complete == other.Complete ||
                    Complete != null &&
                    Complete.Equals(other.Complete)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (PetId != null)
                    hashCode = hashCode * 59 + PetId.GetHashCode();
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                if (ShipDate != null)
                    hashCode = hashCode * 59 + ShipDate.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (Complete != null)
                    hashCode = hashCode * 59 + Complete.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 5`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class Pet : IEquatable<Pet>
    {
        public Pet(
                [JsonProperty(PropertyName=\\"id\\")] long? Id, 
                [JsonProperty(PropertyName=\\"category\\")] Category Category, 
                [JsonProperty(PropertyName=\\"name\\"), Required] string Name, 
                [JsonProperty(PropertyName=\\"photoUrls\\"), Required] IReadOnlyList<string> PhotoUrls, 
                [JsonProperty(PropertyName=\\"tags\\")] IReadOnlyList<Tag> Tags, 
                [JsonProperty(PropertyName=\\"status\\")] StatusEnum? Status
            )
        { 
            this.Id = Id;
            this.Category = Category;
            this.Name = Name;
            this.PhotoUrls = PhotoUrls;
            this.Tags = Tags;
            this.Status = Status;
        }

        
        /// <summary>
        /// Gets Id
        /// </summary>
        [JsonProperty(PropertyName=\\"id\\")]
        public long? Id { get; }

        /// <summary>
        /// Gets Category
        /// </summary>
        [JsonProperty(PropertyName=\\"category\\")]
        public Category Category { get; }

        /// <summary>
        /// Gets Name
        /// </summary>
        [Required]
        [JsonProperty(PropertyName=\\"name\\")]
        public string Name { get; }

        /// <summary>
        /// Gets PhotoUrls
        /// </summary>
        [Required]
        [JsonProperty(PropertyName=\\"photoUrls\\")]
        public IReadOnlyList<string> PhotoUrls { get; }

        /// <summary>
        /// Gets Tags
        /// </summary>
        [JsonProperty(PropertyName=\\"tags\\")]
        public IReadOnlyList<Tag> Tags { get; }

        /// <summary>
        /// pet status in the store
        /// </summary>
        /// <value>pet status in the store</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum AvailableEnum for available
            /// </summary>
            [EnumMember(Value = \\"available\\")]
            AvailableEnum = 1,
            
            /// <summary>
            /// Enum PendingEnum for pending
            /// </summary>
            [EnumMember(Value = \\"pending\\")]
            PendingEnum = 2,
            
            /// <summary>
            /// Enum SoldEnum for sold
            /// </summary>
            [EnumMember(Value = \\"sold\\")]
            SoldEnum = 3
        }
        /// <summary>
        /// Gets pet status in the store
        /// </summary>
        [JsonProperty(PropertyName=\\"status\\")]
        public StatusEnum? Status { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Pet)obj);
        }

        public bool Equals(Pet other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PhotoUrls == other.PhotoUrls ||
                    PhotoUrls != null &&
                    PhotoUrls.SequenceEqual(other.PhotoUrls)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Status == other.Status ||
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (PhotoUrls != null)
                    hashCode = hashCode * 59 + PhotoUrls.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 6`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public abstract class PetApiControllerBase : ControllerBase
    { 
        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <param name=\\"pet\\">Pet object that needs to be added to the store</param>
        [HttpPost]
        [Route(\\"/v2/pet\\")]
        [ProducesResponseType(405)] // Invalid input
        [Authorize(\\"petstore_auth\\")]
        public async Task<IActionResult> AddPet(
            [FromBody] Pet pet) =>
            (await AddPetTypeSafe(pet)).ActionResult;

        public abstract Task<TypeSafeAddPetResult> AddPetTypeSafe(
            Pet pet);

        public readonly struct TypeSafeAddPetResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeAddPetResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeAddPetResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeAddPetResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>Invalid input</summary>
            public static TypeSafeAddPetResult StatusCode405() =>
                new TypeSafeAddPetResult(405);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeAddPetResult Unsafe(IActionResult actionResult) =>
                new TypeSafeAddPetResult(actionResult);
        }

        /// <summary>
        /// Deletes a pet
        /// </summary>
        /// <param name=\\"petId\\">Pet id to delete</param>
        /// <param name=\\"apiKey\\"></param>
        [HttpDelete]
        [Route(\\"/v2/pet/{petId}\\")]
        [ProducesResponseType(400)] // Invalid ID supplied
        [ProducesResponseType(404)] // Pet not found
        [Authorize(\\"petstore_auth\\")]
        public async Task<IActionResult> DeletePet(
            [FromRoute, Required] long? petId,
            [FromHeader] string apiKey) =>
            (await DeletePetTypeSafe(petId,apiKey)).ActionResult;

        public abstract Task<TypeSafeDeletePetResult> DeletePetTypeSafe(
            long? petId,
            string apiKey);

        public readonly struct TypeSafeDeletePetResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeDeletePetResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeDeletePetResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeDeletePetResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>Invalid ID supplied</summary>
            public static TypeSafeDeletePetResult StatusCode400() =>
                new TypeSafeDeletePetResult(400);

            /// <summary>Pet not found</summary>
            public static TypeSafeDeletePetResult StatusCode404() =>
                new TypeSafeDeletePetResult(404);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeDeletePetResult Unsafe(IActionResult actionResult) =>
                new TypeSafeDeletePetResult(actionResult);
        }

        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <remarks>Multiple status values can be provided with comma separated strings</remarks>
        /// <param name=\\"status\\">Status values that need to be considered for filter</param>
        [HttpGet]
        [Route(\\"/v2/pet/findByStatus\\")]
        [ProducesResponseType(200, Type = typeof(IReadOnlyList<Pet>))] // successful operation
        [ProducesResponseType(400)] // Invalid status value
        [Authorize(\\"petstore_auth\\")]
        public async Task<IActionResult> FindPetsByStatus(
            [FromQuery, Required] IReadOnlyList<string> status) =>
            (await FindPetsByStatusTypeSafe(status)).ActionResult;

        public abstract Task<TypeSafeFindPetsByStatusResult> FindPetsByStatusTypeSafe(
            IReadOnlyList<string> status);

        public readonly struct TypeSafeFindPetsByStatusResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeFindPetsByStatusResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeFindPetsByStatusResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeFindPetsByStatusResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>successful operation</summary>
            public static TypeSafeFindPetsByStatusResult StatusCode200(IReadOnlyList<Pet> result) =>
                new TypeSafeFindPetsByStatusResult(200, result);

            /// <summary>Invalid status value</summary>
            public static TypeSafeFindPetsByStatusResult StatusCode400() =>
                new TypeSafeFindPetsByStatusResult(400);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeFindPetsByStatusResult Unsafe(IActionResult actionResult) =>
                new TypeSafeFindPetsByStatusResult(actionResult);
        }

        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <remarks>Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.</remarks>
        /// <param name=\\"tags\\">Tags to filter by</param>
        [HttpGet]
        [Route(\\"/v2/pet/findByTags\\")]
        [ProducesResponseType(200, Type = typeof(IReadOnlyList<Pet>))] // successful operation
        [ProducesResponseType(400)] // Invalid tag value
        [Authorize(\\"petstore_auth\\")]
        public async Task<IActionResult> FindPetsByTags(
            [FromQuery, Required] IReadOnlyList<string> tags) =>
            (await FindPetsByTagsTypeSafe(tags)).ActionResult;

        public abstract Task<TypeSafeFindPetsByTagsResult> FindPetsByTagsTypeSafe(
            IReadOnlyList<string> tags);

        public readonly struct TypeSafeFindPetsByTagsResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeFindPetsByTagsResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeFindPetsByTagsResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeFindPetsByTagsResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>successful operation</summary>
            public static TypeSafeFindPetsByTagsResult StatusCode200(IReadOnlyList<Pet> result) =>
                new TypeSafeFindPetsByTagsResult(200, result);

            /// <summary>Invalid tag value</summary>
            public static TypeSafeFindPetsByTagsResult StatusCode400() =>
                new TypeSafeFindPetsByTagsResult(400);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeFindPetsByTagsResult Unsafe(IActionResult actionResult) =>
                new TypeSafeFindPetsByTagsResult(actionResult);
        }

        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <remarks>Returns a single pet</remarks>
        /// <param name=\\"petId\\">ID of pet to return</param>
        [HttpGet]
        [Route(\\"/v2/pet/{petId}\\")]
        [ProducesResponseType(200, Type = typeof(Pet))] // successful operation
        [ProducesResponseType(400)] // Invalid ID supplied
        [ProducesResponseType(404)] // Pet not found
        [Authorize(\\"api_key\\")]
        public async Task<IActionResult> GetPetById(
            [FromRoute, Required] long? petId) =>
            (await GetPetByIdTypeSafe(petId)).ActionResult;

        public abstract Task<TypeSafeGetPetByIdResult> GetPetByIdTypeSafe(
            long? petId);

        public readonly struct TypeSafeGetPetByIdResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeGetPetByIdResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeGetPetByIdResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeGetPetByIdResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>successful operation</summary>
            public static TypeSafeGetPetByIdResult StatusCode200(Pet result) =>
                new TypeSafeGetPetByIdResult(200, result);

            /// <summary>Invalid ID supplied</summary>
            public static TypeSafeGetPetByIdResult StatusCode400() =>
                new TypeSafeGetPetByIdResult(400);

            /// <summary>Pet not found</summary>
            public static TypeSafeGetPetByIdResult StatusCode404() =>
                new TypeSafeGetPetByIdResult(404);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeGetPetByIdResult Unsafe(IActionResult actionResult) =>
                new TypeSafeGetPetByIdResult(actionResult);
        }

        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <param name=\\"pet\\">Pet object that needs to be added to the store</param>
        [HttpPut]
        [Route(\\"/v2/pet\\")]
        [ProducesResponseType(400)] // Invalid ID supplied
        [ProducesResponseType(404)] // Pet not found
        [ProducesResponseType(405)] // Validation exception
        [Authorize(\\"petstore_auth\\")]
        public async Task<IActionResult> UpdatePet(
            [FromBody] Pet pet) =>
            (await UpdatePetTypeSafe(pet)).ActionResult;

        public abstract Task<TypeSafeUpdatePetResult> UpdatePetTypeSafe(
            Pet pet);

        public readonly struct TypeSafeUpdatePetResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeUpdatePetResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeUpdatePetResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeUpdatePetResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>Invalid ID supplied</summary>
            public static TypeSafeUpdatePetResult StatusCode400() =>
                new TypeSafeUpdatePetResult(400);

            /// <summary>Pet not found</summary>
            public static TypeSafeUpdatePetResult StatusCode404() =>
                new TypeSafeUpdatePetResult(404);

            /// <summary>Validation exception</summary>
            public static TypeSafeUpdatePetResult StatusCode405() =>
                new TypeSafeUpdatePetResult(405);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeUpdatePetResult Unsafe(IActionResult actionResult) =>
                new TypeSafeUpdatePetResult(actionResult);
        }

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>
        /// <param name=\\"petId\\">ID of pet that needs to be updated</param>
        /// <param name=\\"name\\">Updated name of the pet</param>
        /// <param name=\\"status\\">Updated status of the pet</param>
        [HttpPost]
        [Route(\\"/v2/pet/{petId}\\")]
        [ProducesResponseType(405)] // Invalid input
        [Authorize(\\"petstore_auth\\")]
        public async Task<IActionResult> UpdatePetWithForm(
            [FromRoute, Required] long? petId,
            [FromForm] string name,
            [FromForm] string status) =>
            (await UpdatePetWithFormTypeSafe(petId,name,status)).ActionResult;

        public abstract Task<TypeSafeUpdatePetWithFormResult> UpdatePetWithFormTypeSafe(
            long? petId,
            string name,
            string status);

        public readonly struct TypeSafeUpdatePetWithFormResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeUpdatePetWithFormResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeUpdatePetWithFormResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeUpdatePetWithFormResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>Invalid input</summary>
            public static TypeSafeUpdatePetWithFormResult StatusCode405() =>
                new TypeSafeUpdatePetWithFormResult(405);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeUpdatePetWithFormResult Unsafe(IActionResult actionResult) =>
                new TypeSafeUpdatePetWithFormResult(actionResult);
        }

        /// <summary>
        /// uploads an image
        /// </summary>
        /// <param name=\\"petId\\">ID of pet to update</param>
        /// <param name=\\"body\\"></param>
        [HttpPost]
        [Route(\\"/v2/pet/{petId}/uploadImage\\")]
        [ProducesResponseType(200, Type = typeof(ApiResponse))] // successful operation
        [Authorize(\\"petstore_auth\\")]
        public async Task<IActionResult> UploadFile(
            [FromRoute, Required] long? petId,
            [FromBody] System.IO.Stream body) =>
            (await UploadFileTypeSafe(petId,body)).ActionResult;

        public abstract Task<TypeSafeUploadFileResult> UploadFileTypeSafe(
            long? petId,
            System.IO.Stream body);

        public readonly struct TypeSafeUploadFileResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeUploadFileResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeUploadFileResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeUploadFileResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>successful operation</summary>
            public static TypeSafeUploadFileResult StatusCode200(ApiResponse result) =>
                new TypeSafeUploadFileResult(200, result);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeUploadFileResult Unsafe(IActionResult actionResult) =>
                new TypeSafeUploadFileResult(actionResult);
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 7`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public abstract class StoreApiControllerBase : ControllerBase
    { 
        /// <summary>
        /// Delete purchase order by ID
        /// </summary>
        /// <remarks>For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors</remarks>
        /// <param name=\\"orderId\\">ID of the order that needs to be deleted</param>
        [HttpDelete]
        [Route(\\"/v2/store/order/{orderId}\\")]
        [ProducesResponseType(400)] // Invalid ID supplied
        [ProducesResponseType(404)] // Order not found
        public async Task<IActionResult> DeleteOrder(
            [FromRoute, Required] long? orderId) =>
            (await DeleteOrderTypeSafe(orderId)).ActionResult;

        public abstract Task<TypeSafeDeleteOrderResult> DeleteOrderTypeSafe(
            long? orderId);

        public readonly struct TypeSafeDeleteOrderResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeDeleteOrderResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeDeleteOrderResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeDeleteOrderResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>Invalid ID supplied</summary>
            public static TypeSafeDeleteOrderResult StatusCode400() =>
                new TypeSafeDeleteOrderResult(400);

            /// <summary>Order not found</summary>
            public static TypeSafeDeleteOrderResult StatusCode404() =>
                new TypeSafeDeleteOrderResult(404);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeDeleteOrderResult Unsafe(IActionResult actionResult) =>
                new TypeSafeDeleteOrderResult(actionResult);
        }

        /// <summary>
        /// Returns pet inventories by status
        /// </summary>
        /// <remarks>Returns a map of status codes to quantities</remarks>
        [HttpGet]
        [Route(\\"/v2/store/inventory\\")]
        [ProducesResponseType(200, Type = typeof(Dictionary<string, int?>))] // successful operation
        [Authorize(\\"api_key\\")]
        public async Task<IActionResult> GetInventory() =>
            (await GetInventoryTypeSafe()).ActionResult;

        public abstract Task<TypeSafeGetInventoryResult> GetInventoryTypeSafe();

        public readonly struct TypeSafeGetInventoryResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeGetInventoryResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeGetInventoryResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeGetInventoryResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>successful operation</summary>
            public static TypeSafeGetInventoryResult StatusCode200(Dictionary<string, int?> result) =>
                new TypeSafeGetInventoryResult(200, result);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeGetInventoryResult Unsafe(IActionResult actionResult) =>
                new TypeSafeGetInventoryResult(actionResult);
        }

        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <remarks>For valid response try integer IDs with value &gt;&#x3D; 1 and &lt;&#x3D; 10. Other values will generated exceptions</remarks>
        /// <param name=\\"orderId\\">ID of pet that needs to be fetched</param>
        [HttpGet]
        [Route(\\"/v2/store/order/{orderId}\\")]
        [ProducesResponseType(200, Type = typeof(Order))] // successful operation
        [ProducesResponseType(400)] // Invalid ID supplied
        [ProducesResponseType(404)] // Order not found
        public async Task<IActionResult> GetOrderById(
            [FromRoute, Required, Range(1, 10)] long? orderId) =>
            (await GetOrderByIdTypeSafe(orderId)).ActionResult;

        public abstract Task<TypeSafeGetOrderByIdResult> GetOrderByIdTypeSafe(
            long? orderId);

        public readonly struct TypeSafeGetOrderByIdResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeGetOrderByIdResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeGetOrderByIdResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeGetOrderByIdResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>successful operation</summary>
            public static TypeSafeGetOrderByIdResult StatusCode200(Order result) =>
                new TypeSafeGetOrderByIdResult(200, result);

            /// <summary>Invalid ID supplied</summary>
            public static TypeSafeGetOrderByIdResult StatusCode400() =>
                new TypeSafeGetOrderByIdResult(400);

            /// <summary>Order not found</summary>
            public static TypeSafeGetOrderByIdResult StatusCode404() =>
                new TypeSafeGetOrderByIdResult(404);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeGetOrderByIdResult Unsafe(IActionResult actionResult) =>
                new TypeSafeGetOrderByIdResult(actionResult);
        }

        /// <summary>
        /// Place an order for a pet
        /// </summary>
        /// <param name=\\"order\\">order placed for purchasing the pet</param>
        [HttpPost]
        [Route(\\"/v2/store/order\\")]
        [ProducesResponseType(200, Type = typeof(Order))] // successful operation
        [ProducesResponseType(400)] // Invalid Order
        public async Task<IActionResult> PlaceOrder(
            [FromBody] Order order) =>
            (await PlaceOrderTypeSafe(order)).ActionResult;

        public abstract Task<TypeSafePlaceOrderResult> PlaceOrderTypeSafe(
            Order order);

        public readonly struct TypeSafePlaceOrderResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafePlaceOrderResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafePlaceOrderResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafePlaceOrderResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>successful operation</summary>
            public static TypeSafePlaceOrderResult StatusCode200(Order result) =>
                new TypeSafePlaceOrderResult(200, result);

            /// <summary>Invalid Order</summary>
            public static TypeSafePlaceOrderResult StatusCode400() =>
                new TypeSafePlaceOrderResult(400);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafePlaceOrderResult Unsafe(IActionResult actionResult) =>
                new TypeSafePlaceOrderResult(actionResult);
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 8`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class Tag : IEquatable<Tag>
    {
        public Tag(
                [JsonProperty(PropertyName=\\"id\\")] long? Id, 
                [JsonProperty(PropertyName=\\"name\\")] string Name
            )
        { 
            this.Id = Id;
            this.Name = Name;
        }

        
        /// <summary>
        /// Gets Id
        /// </summary>
        [JsonProperty(PropertyName=\\"id\\")]
        public long? Id { get; }

        /// <summary>
        /// Gets Name
        /// </summary>
        [JsonProperty(PropertyName=\\"name\\")]
        public string Name { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Tag)obj);
        }

        public bool Equals(Tag other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 9`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class User : IEquatable<User>
    {
        public User(
                [JsonProperty(PropertyName=\\"id\\")] long? Id, 
                [JsonProperty(PropertyName=\\"username\\")] string Username, 
                [JsonProperty(PropertyName=\\"firstName\\")] string FirstName, 
                [JsonProperty(PropertyName=\\"lastName\\")] string LastName, 
                [JsonProperty(PropertyName=\\"email\\")] string Email, 
                [JsonProperty(PropertyName=\\"password\\")] string Password, 
                [JsonProperty(PropertyName=\\"phone\\")] string Phone, 
                [JsonProperty(PropertyName=\\"userStatus\\")] int? UserStatus
            )
        { 
            this.Id = Id;
            this.Username = Username;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.Email = Email;
            this.Password = Password;
            this.Phone = Phone;
            this.UserStatus = UserStatus;
        }

        
        /// <summary>
        /// Gets Id
        /// </summary>
        [JsonProperty(PropertyName=\\"id\\")]
        public long? Id { get; }

        /// <summary>
        /// Gets Username
        /// </summary>
        [JsonProperty(PropertyName=\\"username\\")]
        public string Username { get; }

        /// <summary>
        /// Gets FirstName
        /// </summary>
        [JsonProperty(PropertyName=\\"firstName\\")]
        public string FirstName { get; }

        /// <summary>
        /// Gets LastName
        /// </summary>
        [JsonProperty(PropertyName=\\"lastName\\")]
        public string LastName { get; }

        /// <summary>
        /// Gets Email
        /// </summary>
        [JsonProperty(PropertyName=\\"email\\")]
        public string Email { get; }

        /// <summary>
        /// Gets Password
        /// </summary>
        [JsonProperty(PropertyName=\\"password\\")]
        public string Password { get; }

        /// <summary>
        /// Gets Phone
        /// </summary>
        [JsonProperty(PropertyName=\\"phone\\")]
        public string Phone { get; }

        /// <summary>
        /// Gets User Status
        /// </summary>
        [JsonProperty(PropertyName=\\"userStatus\\")]
        public int? UserStatus { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((User)obj);
        }

        public bool Equals(User other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    UserStatus == other.UserStatus ||
                    UserStatus != null &&
                    UserStatus.Equals(other.UserStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                if (UserStatus != null)
                    hashCode = hashCode * 59 + UserStatus.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 10`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public abstract class UserApiControllerBase : ControllerBase
    { 
        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name=\\"user\\">Created user object</param>
        [HttpPost]
        [Route(\\"/v2/user\\")]
        [ProducesResponseType(0)] // successful operation
        public async Task<IActionResult> CreateUser(
            [FromBody] User user) =>
            (await CreateUserTypeSafe(user)).ActionResult;

        public abstract Task<TypeSafeCreateUserResult> CreateUserTypeSafe(
            User user);

        public readonly struct TypeSafeCreateUserResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeCreateUserResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeCreateUserResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeCreateUserResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>successful operation</summary>
            public static TypeSafeCreateUserResult OtherStatusCode(int statusCode) =>
                new TypeSafeCreateUserResult(statusCode);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeCreateUserResult Unsafe(IActionResult actionResult) =>
                new TypeSafeCreateUserResult(actionResult);
        }

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <param name=\\"user\\">List of user object</param>
        [HttpPost]
        [Route(\\"/v2/user/createWithArray\\")]
        [ProducesResponseType(0)] // successful operation
        public async Task<IActionResult> CreateUsersWithArrayInput(
            [FromBody] IReadOnlyList<User> user) =>
            (await CreateUsersWithArrayInputTypeSafe(user)).ActionResult;

        public abstract Task<TypeSafeCreateUsersWithArrayInputResult> CreateUsersWithArrayInputTypeSafe(
            IReadOnlyList<User> user);

        public readonly struct TypeSafeCreateUsersWithArrayInputResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeCreateUsersWithArrayInputResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeCreateUsersWithArrayInputResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeCreateUsersWithArrayInputResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>successful operation</summary>
            public static TypeSafeCreateUsersWithArrayInputResult OtherStatusCode(int statusCode) =>
                new TypeSafeCreateUsersWithArrayInputResult(statusCode);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeCreateUsersWithArrayInputResult Unsafe(IActionResult actionResult) =>
                new TypeSafeCreateUsersWithArrayInputResult(actionResult);
        }

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <param name=\\"user\\">List of user object</param>
        [HttpPost]
        [Route(\\"/v2/user/createWithList\\")]
        [ProducesResponseType(0)] // successful operation
        public async Task<IActionResult> CreateUsersWithListInput(
            [FromBody] IReadOnlyList<User> user) =>
            (await CreateUsersWithListInputTypeSafe(user)).ActionResult;

        public abstract Task<TypeSafeCreateUsersWithListInputResult> CreateUsersWithListInputTypeSafe(
            IReadOnlyList<User> user);

        public readonly struct TypeSafeCreateUsersWithListInputResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeCreateUsersWithListInputResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeCreateUsersWithListInputResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeCreateUsersWithListInputResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>successful operation</summary>
            public static TypeSafeCreateUsersWithListInputResult OtherStatusCode(int statusCode) =>
                new TypeSafeCreateUsersWithListInputResult(statusCode);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeCreateUsersWithListInputResult Unsafe(IActionResult actionResult) =>
                new TypeSafeCreateUsersWithListInputResult(actionResult);
        }

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name=\\"username\\">The name that needs to be deleted</param>
        [HttpDelete]
        [Route(\\"/v2/user/{username}\\")]
        [ProducesResponseType(400)] // Invalid username supplied
        [ProducesResponseType(404)] // User not found
        public async Task<IActionResult> DeleteUser(
            [FromRoute, Required] string username) =>
            (await DeleteUserTypeSafe(username)).ActionResult;

        public abstract Task<TypeSafeDeleteUserResult> DeleteUserTypeSafe(
            string username);

        public readonly struct TypeSafeDeleteUserResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeDeleteUserResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeDeleteUserResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeDeleteUserResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>Invalid username supplied</summary>
            public static TypeSafeDeleteUserResult StatusCode400() =>
                new TypeSafeDeleteUserResult(400);

            /// <summary>User not found</summary>
            public static TypeSafeDeleteUserResult StatusCode404() =>
                new TypeSafeDeleteUserResult(404);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeDeleteUserResult Unsafe(IActionResult actionResult) =>
                new TypeSafeDeleteUserResult(actionResult);
        }

        /// <summary>
        /// Get user by user name
        /// </summary>
        /// <param name=\\"username\\">The name that needs to be fetched. Use user1 for testing. </param>
        [HttpGet]
        [Route(\\"/v2/user/{username}\\")]
        [ProducesResponseType(200, Type = typeof(User))] // successful operation
        [ProducesResponseType(400)] // Invalid username supplied
        [ProducesResponseType(404)] // User not found
        public async Task<IActionResult> GetUserByName(
            [FromRoute, Required] string username) =>
            (await GetUserByNameTypeSafe(username)).ActionResult;

        public abstract Task<TypeSafeGetUserByNameResult> GetUserByNameTypeSafe(
            string username);

        public readonly struct TypeSafeGetUserByNameResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeGetUserByNameResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeGetUserByNameResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeGetUserByNameResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>successful operation</summary>
            public static TypeSafeGetUserByNameResult StatusCode200(User result) =>
                new TypeSafeGetUserByNameResult(200, result);

            /// <summary>Invalid username supplied</summary>
            public static TypeSafeGetUserByNameResult StatusCode400() =>
                new TypeSafeGetUserByNameResult(400);

            /// <summary>User not found</summary>
            public static TypeSafeGetUserByNameResult StatusCode404() =>
                new TypeSafeGetUserByNameResult(404);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeGetUserByNameResult Unsafe(IActionResult actionResult) =>
                new TypeSafeGetUserByNameResult(actionResult);
        }

        /// <summary>
        /// Logs user into the system
        /// </summary>
        /// <param name=\\"username\\">The user name for login</param>
        /// <param name=\\"password\\">The password for login in clear text</param>
        [HttpGet]
        [Route(\\"/v2/user/login\\")]
        [ProducesResponseType(200, Type = typeof(string))] // successful operation
        [ProducesResponseType(400)] // Invalid username/password supplied
        public async Task<IActionResult> LoginUser(
            [FromQuery, Required] string username,
            [FromQuery, Required] string password) =>
            (await LoginUserTypeSafe(username,password)).ActionResult;

        public abstract Task<TypeSafeLoginUserResult> LoginUserTypeSafe(
            string username,
            string password);

        public readonly struct TypeSafeLoginUserResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeLoginUserResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeLoginUserResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeLoginUserResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>successful operation</summary>
            public static TypeSafeLoginUserResult StatusCode200(string result) =>
                new TypeSafeLoginUserResult(200, result);

            /// <summary>Invalid username/password supplied</summary>
            public static TypeSafeLoginUserResult StatusCode400() =>
                new TypeSafeLoginUserResult(400);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeLoginUserResult Unsafe(IActionResult actionResult) =>
                new TypeSafeLoginUserResult(actionResult);
        }

        /// <summary>
        /// Logs out current logged in user session
        /// </summary>
        [HttpGet]
        [Route(\\"/v2/user/logout\\")]
        [ProducesResponseType(0)] // successful operation
        public async Task<IActionResult> LogoutUser() =>
            (await LogoutUserTypeSafe()).ActionResult;

        public abstract Task<TypeSafeLogoutUserResult> LogoutUserTypeSafe();

        public readonly struct TypeSafeLogoutUserResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeLogoutUserResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeLogoutUserResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeLogoutUserResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>successful operation</summary>
            public static TypeSafeLogoutUserResult OtherStatusCode(int statusCode) =>
                new TypeSafeLogoutUserResult(statusCode);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeLogoutUserResult Unsafe(IActionResult actionResult) =>
                new TypeSafeLogoutUserResult(actionResult);
        }

        /// <summary>
        /// Updated user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name=\\"username\\">name that need to be updated</param>
        /// <param name=\\"user\\">Updated user object</param>
        [HttpPut]
        [Route(\\"/v2/user/{username}\\")]
        [ProducesResponseType(400)] // Invalid user supplied
        [ProducesResponseType(404)] // User not found
        public async Task<IActionResult> UpdateUser(
            [FromRoute, Required] string username,
            [FromBody] User user) =>
            (await UpdateUserTypeSafe(username,user)).ActionResult;

        public abstract Task<TypeSafeUpdateUserResult> UpdateUserTypeSafe(
            string username,
            User user);

        public readonly struct TypeSafeUpdateUserResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeUpdateUserResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeUpdateUserResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeUpdateUserResult(int statusCode, object? resultObject)
                : this(new ObjectResult(resultObject) { StatusCode = statusCode })
            {
            }

            /// <summary>Invalid user supplied</summary>
            public static TypeSafeUpdateUserResult StatusCode400() =>
                new TypeSafeUpdateUserResult(400);

            /// <summary>User not found</summary>
            public static TypeSafeUpdateUserResult StatusCode404() =>
                new TypeSafeUpdateUserResult(404);

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeUpdateUserResult Unsafe(IActionResult actionResult) =>
                new TypeSafeUpdateUserResult(actionResult);
        }
    }
}"
`;
