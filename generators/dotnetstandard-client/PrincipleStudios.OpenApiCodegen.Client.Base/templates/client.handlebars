{{>partial_header header}}
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace {{packageName}}
{ {{#if operations}}
    public static class {{className}}
    {
        {{#each operations as |operation|}}{{#each requestBodies as |requestBody|}}{{#if operation.summary}}
        /// <summary>
        /// {{linewrap operation.summary "
        /// "}}
        /// </summary>{{/if}}{{#if operation.description}}
        /// <remarks>
        /// {{linewrap operation.description "
        /// "}}
        /// </remarks>{{/if}}{{#each requestBody.allParams}}
        /// <param name="{{paramName}}">{{description}}</param>{{/each}}
        public static async global::System.Threading.Tasks.Task<{{operation.name}}ReturnType> {{operation.name}}(
            this global::System.Net.Http.HttpClient client,
            {{#each requestBody.allParams}}{{{dataType}}} {{paramName}},
            {{/each}}
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => await (await client.SendAsync({{operation.name}}({{#each requestBody.allParams}}{{paramName}}{{#unless @last}},{{/unless}}{{/each}})).ConfigureAwait(false))
            .Parse{{operation.name}}().ConfigureAwait(false);

        public static global::System.Net.Http.HttpRequestMessage {{operation.name}}(
            {{#each requestBody.allParams}}{{{dataType}}} {{paramName}}{{#unless @last}},{{/unless}}
            {{/each}})
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.{{{operation.httpMethod}}}, "{{{operation.path}}}"{{#each requestBody.allParams}}{{#if isPathParam}}
                        .Replace("{" + "{{rawName}}" + "}", global::System.Web.HttpUtility.UrlEncode({{paramName}}.ToString())){{/if}}{{/each}});
{{#if requestBody.isForm}}
            requestMessage.Content = new global::System.Net.Http.MultipartFormDataContent()
            {
{{#each requestBody.allParams}}{{#if isFormParam}}
                { new {{#if isFile}}global::System.Net.Http.StreamContent({{paramName}}){{else}}global::System.Net.Http.StringContent({{paramName}}.ToString()){{/if}}, "{{rawName}}" },
{{/if}}{{/each}}
            };
{{else}}{{#each requestBody.allParams}}{{#if isBodyParam}}{{#if isFile}}
            requestMessage.Content = new global::System.Net.Http.StreamContent({{paramName}});
{{else}}
            requestMessage.Content = new global::System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject({{paramName}}), System.Text.Encoding.UTF8, "{{{requestBody.requestBodyType}}}");
{{/if}}{{/if}}{{/each}}{{/if}}
{{#each requestBody.allParams}}{{#if isHeaderParam}}
            requestMessage.Headers.Add("{{baseName}}", {{paramName}}{{#if dataTypeEnumerable}}.Select(v => v.ToString()){{else}}.ToString(){{/if}});{{/if}}{{/each}}
            return requestMessage;
        }

        {{/each}}
        public static async global::System.Threading.Tasks.Task<{{operation.name}}ReturnType?> Parse{{operation.name}}(this global::System.Net.Http.HttpResponseMessage response)
        {
            switch ((int)response.StatusCode)
            { {{#each responses.statusResponse as |response code|}}
                case {{code}}:
                    {{#each response.content}}
                    {{#if mediaType}} if (response.Content.Headers.ContentType.MediaType == "{{mediaType}}") {{/if}}
                        return new {{operation.name}}ReturnType.{{responseMethodName}}
                        {
                            Response = response,{{#if dataType}}
                            Body = Newtonsoft.Json.JsonConvert.DeserializeObject<{{{dataType}}}>(await response.Content.ReadAsStringAsync()), {{/if}}
                            {{!-- {{#each ../headers}}
                            {{paramName}} = ,{{/each}} --}}
                        };
                    {{/each}}
                    break;
                {{/each}}{{#if responses.defaultResponse}}
                default: {{#each responses.defaultResponse.content}}
                    {{#if mediaType}} if (response.Content.Headers.ContentType.MediaType == "{{mediaType}}") {{/if}}
                        return new {{operation.name}}ReturnType.{{responseMethodName}}
                        {
                            Response = response,{{#if dataType}}
                            Body = Newtonsoft.Json.JsonConvert.DeserializeObject<{{{dataType}}}>(await response.Content.ReadAsStringAsync()), {{/if}}
                            {{!-- {{#each ../headers}}
                            {{paramName}} = ,{{/each}} --}}
                        }; {{/each}}
                    break;{{/if}}
            }
            return new {{operation.name}}ReturnType
            {
                Response = response,
            };
        }

        public class {{name}}ReturnType : global::System.IDisposable
        {
            public global::System.Net.Http.HttpResponseMessage Response { get; set; }

            void global::System.IDisposable.Dispose()
            {
                Response?.Dispose();
            }

            {{#each responses.statusResponse as |response code|}}{{#each content}}
            {{#if response.description}}/// <summary>
            /// {{linewrap response.description "
            /// "}}
            /// </summary>{{/if}}
            public class {{responseMethodName}} : {{../../name}}ReturnType
            {
                {{#if dataType}}public {{{dataType}}} Body { get; set; }
                {{/if}}{{!-- {{#each ../headers}}
                public string {{paramName}} { get; }{{/each}} --}}
            }
            {{/each}}{{/each}}{{#if responses.defaultResponse}}{{#each responses.defaultResponse.content}}
            {{#if responses.defaultResponse.description}}/// <summary>
            /// {{linewrap responses.defaultResponse.description "
            /// "}}
            /// </summary>{{/if}}
            public class {{responseMethodName}} : {{../name}}ReturnType
            {
                {{#if dataType}}public {{{dataType}}} Body { get; set; }
                {{/if}}{{!-- {{#each ../responses.defaultResponse.headers}}
                public string {{paramName}} { get; }{{/each}} --}}
            }
            {{/each}}{{/if}}
        }
        {{/each}}
    }
{{/if}}
}