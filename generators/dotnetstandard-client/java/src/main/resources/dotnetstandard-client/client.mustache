{{>partial_header}}
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
#nullable enable
#nullable disable warnings

namespace {{packageName}}
{ {{#operations}}
    /// <summary>
    /// {{description}}
    /// </summary>{{#description}}
    [Description("{{description}}")]{{/description}}
    public interface I{{classname}}Client
    { {{#operation}}
        /// <summary>
        /// {{#summary}}{{summary}}{{/summary}}
        /// </summary>{{#notes}}
        /// <remarks>{{notes}}</remarks>{{/notes}}{{#allParams}}
        /// <param name="{{paramName}}">{{description}}</param>{{/allParams}}{{!
        }}
        Task<{{classname}}Client.ITypeSafe{{operationId}}Result> {{operationId}}Async({{#allParams}}
            {{&dataType}} {{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}});
        {{/operation}}
    }

    public class {{classname}}ClientConfiguration
    {
        public string BaseUrl { get; set; }
        public JsonSerializerSettings Settings { get; set; }
    }

    /// <summary>
    /// {{description}}
    /// </summary>{{#description}}
    [Description("{{description}}")]{{/description}}
    public sealed class {{classname}}Client : I{{classname}}Client
    {
        private readonly HttpClient httpClient;
        private readonly {{classname}}ClientConfiguration configuration;

        public {{classname}}Client(HttpClient httpClient, {{classname}}ClientConfiguration configuration)
        {
            this.httpClient = httpClient;
            this.configuration = configuration;
        }

{{#operation}}
        /// <summary>
        /// {{#summary}}{{summary}}{{/summary}}
        /// </summary>{{#notes}}
        /// <remarks>{{notes}}</remarks>{{/notes}}{{#allParams}}
        /// <param name="{{paramName}}">{{description}}</param>{{/allParams}}{{!
        }}
        public Task<ITypeSafe{{operationId}}Result> {{operationId}}Async({{#allParams}}
            {{&dataType}} {{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}}) =>
            // TODO
            httpClient.GetAsync(configuration.BaseUrl + "/foo")
                      .ContinueWith(t => (ITypeSafe{{operationId}}Result)new TypeSafe{{operationId}}Result(t.Result, configuration.Settings));

{{/operation}}{{#operation}}
        public interface ITypeSafe{{operationId}}Result
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;

            {{#responses}}

            {{#message}}/// <summary>{{message}}</summary>{{/message}}
            Task<{{#dataType}}{{&dataType}}{{/dataType}}{{^dataType}}HttpResponseMessage{{/dataType}}> {{^isDefault}}StatusCode{{code}}{{/isDefault}}{{#isDefault}}OtherStatusCode{{/isDefault}}Async();
            {{/responses}}
        }

        public readonly struct TypeSafe{{operationId}}Result : ITypeSafe{{operationId}}Result
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafe{{operationId}}Result(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }

            {{#responses}}

            {{#message}}/// <summary>{{message}}</summary>{{/message}}
            public async Task<{{#dataType}}{{&dataType}}{{/dataType}}{{^dataType}}HttpResponseMessage{{/dataType}}> {{^isDefault}}StatusCode{{code}}{{/isDefault}}{{#isDefault}}OtherStatusCode{{/isDefault}}Async()
            { {{^isDefault}}
                if (this.Response.StatusCode != (System.Net.HttpStatusCode){{code}})
                    throw new InvalidOperationException();
{{/isDefault}}
{{#dataType}}
                var json = await this.Response.Content.ReadAsStringAsync();
                return Newtonsoft.Json.JsonConvert.DeserializeObject<{{&dataType}}>(json, settings);
{{/dataType}}{{^dataType}}
                await Task.Yield();
                return Response;
{{/dataType}}
            }
            {{/responses}}
        }

{{/operation}}
    }
{{/operations}}
}