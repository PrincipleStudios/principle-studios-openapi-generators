// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 1`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class ApiResponse : IEquatable<ApiResponse>
    {
        public ApiResponse(
                [JsonProperty(PropertyName=\\"code\\")] int? Code, 
                [JsonProperty(PropertyName=\\"type\\")] string Type, 
                [JsonProperty(PropertyName=\\"message\\")] string Message
            )
        { 
            this.Code = Code;
            this.Type = Type;
            this.Message = Message;
        }

        
        /// <summary>
        /// Gets Code
        /// </summary>
        [JsonProperty(PropertyName=\\"code\\")]
        public int? Code { get; }

        /// <summary>
        /// Gets Type
        /// </summary>
        [JsonProperty(PropertyName=\\"type\\")]
        public string Type { get; }

        /// <summary>
        /// Gets Message
        /// </summary>
        [JsonProperty(PropertyName=\\"message\\")]
        public string Message { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiResponse)obj);
        }

        public bool Equals(ApiResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 2`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class Category : IEquatable<Category>
    {
        public Category(
                [JsonProperty(PropertyName=\\"id\\")] long? Id, 
                [JsonProperty(PropertyName=\\"name\\")] string Name
            )
        { 
            this.Id = Id;
            this.Name = Name;
        }

        
        /// <summary>
        /// Gets Id
        /// </summary>
        [JsonProperty(PropertyName=\\"id\\")]
        public long? Id { get; }

        /// <summary>
        /// Gets Name
        /// </summary>
        [JsonProperty(PropertyName=\\"name\\")]
        public string Name { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Category)obj);
        }

        public bool Equals(Category other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 3`] = `
"
/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Collections.Generic;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{
    public static class NameValueCollectionExtensions
    {
        public static void Add(this System.Collections.Specialized.NameValueCollection original, string key, IEnumerable<string> values)
        {
            foreach (var value in values)
            {
                original.Add(key, value);
            }
        }
    }
}
"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 4`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class InlineObject : IEquatable<InlineObject>
    {
        public InlineObject(
                [JsonProperty(PropertyName=\\"name\\")] string Name, 
                [JsonProperty(PropertyName=\\"status\\")] string Status
            )
        { 
            this.Name = Name;
            this.Status = Status;
        }

        
        /// <summary>
        /// Gets Updated name of the pet
        /// </summary>
        [JsonProperty(PropertyName=\\"name\\")]
        public string Name { get; }

        /// <summary>
        /// Gets Updated status of the pet
        /// </summary>
        [JsonProperty(PropertyName=\\"status\\")]
        public string Status { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineObject)obj);
        }

        public bool Equals(InlineObject other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 5`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class Order : IEquatable<Order>
    {
        public Order(
                [JsonProperty(PropertyName=\\"id\\")] long? Id, 
                [JsonProperty(PropertyName=\\"petId\\")] long? PetId, 
                [JsonProperty(PropertyName=\\"quantity\\")] int? Quantity, 
                [JsonProperty(PropertyName=\\"shipDate\\")] DateTimeOffset ShipDate, 
                [JsonProperty(PropertyName=\\"status\\")] StatusEnum? Status, 
                [JsonProperty(PropertyName=\\"complete\\")] bool? Complete
            )
        { 
            this.Id = Id;
            this.PetId = PetId;
            this.Quantity = Quantity;
            this.ShipDate = ShipDate;
            this.Status = Status;
            this.Complete = Complete;
        }

        
        /// <summary>
        /// Gets Id
        /// </summary>
        [JsonProperty(PropertyName=\\"id\\")]
        public long? Id { get; }

        /// <summary>
        /// Gets PetId
        /// </summary>
        [JsonProperty(PropertyName=\\"petId\\")]
        public long? PetId { get; }

        /// <summary>
        /// Gets Quantity
        /// </summary>
        [JsonProperty(PropertyName=\\"quantity\\")]
        public int? Quantity { get; }

        /// <summary>
        /// Gets ShipDate
        /// </summary>
        [JsonProperty(PropertyName=\\"shipDate\\")]
        public DateTimeOffset ShipDate { get; }

        /// <summary>
        /// Order Status
        /// </summary>
        /// <value>Order Status</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum PlacedEnum for placed
            /// </summary>
            [EnumMember(Value = \\"placed\\")]
            PlacedEnum = 1,
            
            /// <summary>
            /// Enum ApprovedEnum for approved
            /// </summary>
            [EnumMember(Value = \\"approved\\")]
            ApprovedEnum = 2,
            
            /// <summary>
            /// Enum DeliveredEnum for delivered
            /// </summary>
            [EnumMember(Value = \\"delivered\\")]
            DeliveredEnum = 3
        }
        /// <summary>
        /// Gets Order Status
        /// </summary>
        [JsonProperty(PropertyName=\\"status\\")]
        public StatusEnum? Status { get; }

        /// <summary>
        /// Gets Complete
        /// </summary>
        [JsonProperty(PropertyName=\\"complete\\")]
        public bool? Complete { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Order)obj);
        }

        public bool Equals(Order other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    PetId == other.PetId ||
                    PetId != null &&
                    PetId.Equals(other.PetId)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    ShipDate == other.ShipDate ||
                    ShipDate != null &&
                    ShipDate.Equals(other.ShipDate)
                ) && 
                (
                    Status == other.Status ||
                    Status.Equals(other.Status)
                ) && 
                (
                    Complete == other.Complete ||
                    Complete != null &&
                    Complete.Equals(other.Complete)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (PetId != null)
                    hashCode = hashCode * 59 + PetId.GetHashCode();
                if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                if (ShipDate != null)
                    hashCode = hashCode * 59 + ShipDate.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (Complete != null)
                    hashCode = hashCode * 59 + Complete.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 6`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class Pet : IEquatable<Pet>
    {
        public Pet(
                [JsonProperty(PropertyName=\\"id\\")] long? Id, 
                [JsonProperty(PropertyName=\\"category\\")] Category Category, 
                [JsonProperty(PropertyName=\\"name\\"), Required] string Name, 
                [JsonProperty(PropertyName=\\"photoUrls\\"), Required] IReadOnlyList<string> PhotoUrls, 
                [JsonProperty(PropertyName=\\"tags\\")] IReadOnlyList<Tag> Tags, 
                [JsonProperty(PropertyName=\\"status\\")] StatusEnum? Status
            )
        { 
            this.Id = Id;
            this.Category = Category;
            this.Name = Name;
            this.PhotoUrls = PhotoUrls;
            this.Tags = Tags;
            this.Status = Status;
        }

        
        /// <summary>
        /// Gets Id
        /// </summary>
        [JsonProperty(PropertyName=\\"id\\")]
        public long? Id { get; }

        /// <summary>
        /// Gets Category
        /// </summary>
        [JsonProperty(PropertyName=\\"category\\")]
        public Category Category { get; }

        /// <summary>
        /// Gets Name
        /// </summary>
        [Required]
        [JsonProperty(PropertyName=\\"name\\")]
        public string Name { get; }

        /// <summary>
        /// Gets PhotoUrls
        /// </summary>
        [Required]
        [JsonProperty(PropertyName=\\"photoUrls\\")]
        public IReadOnlyList<string> PhotoUrls { get; }

        /// <summary>
        /// Gets Tags
        /// </summary>
        [JsonProperty(PropertyName=\\"tags\\")]
        public IReadOnlyList<Tag> Tags { get; }

        /// <summary>
        /// pet status in the store
        /// </summary>
        /// <value>pet status in the store</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum AvailableEnum for available
            /// </summary>
            [EnumMember(Value = \\"available\\")]
            AvailableEnum = 1,
            
            /// <summary>
            /// Enum PendingEnum for pending
            /// </summary>
            [EnumMember(Value = \\"pending\\")]
            PendingEnum = 2,
            
            /// <summary>
            /// Enum SoldEnum for sold
            /// </summary>
            [EnumMember(Value = \\"sold\\")]
            SoldEnum = 3
        }
        /// <summary>
        /// Gets pet status in the store
        /// </summary>
        [JsonProperty(PropertyName=\\"status\\")]
        public StatusEnum? Status { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Pet)obj);
        }

        public bool Equals(Pet other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PhotoUrls == other.PhotoUrls ||
                    PhotoUrls != null &&
                    PhotoUrls.SequenceEqual(other.PhotoUrls)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Status == other.Status ||
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (PhotoUrls != null)
                    hashCode = hashCode * 59 + PhotoUrls.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 7`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public interface IPetApiClient
    { 
        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <param name=\\"pet\\">Pet object that needs to be added to the store</param>
        Task<PetApiClient.ITypeSafeAddPetResult> AddPetAsync(
            Pet pet,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Deletes a pet
        /// </summary>
        /// <param name=\\"petId\\">Pet id to delete</param>
        /// <param name=\\"apiKey\\"></param>
        Task<PetApiClient.ITypeSafeDeletePetResult> DeletePetAsync(
            long? petId,
            string apiKey,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <remarks>Multiple status values can be provided with comma separated strings</remarks>
        /// <param name=\\"status\\">Status values that need to be considered for filter</param>
        Task<PetApiClient.ITypeSafeFindPetsByStatusResult> FindPetsByStatusAsync(
            IReadOnlyList<string> status,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <remarks>Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.</remarks>
        /// <param name=\\"tags\\">Tags to filter by</param>
        Task<PetApiClient.ITypeSafeFindPetsByTagsResult> FindPetsByTagsAsync(
            IReadOnlyList<string> tags,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <remarks>Returns a single pet</remarks>
        /// <param name=\\"petId\\">ID of pet to return</param>
        Task<PetApiClient.ITypeSafeGetPetByIdResult> GetPetByIdAsync(
            long? petId,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <param name=\\"pet\\">Pet object that needs to be added to the store</param>
        Task<PetApiClient.ITypeSafeUpdatePetResult> UpdatePetAsync(
            Pet pet,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>
        /// <param name=\\"petId\\">ID of pet that needs to be updated</param>
        /// <param name=\\"name\\">Updated name of the pet</param>
        /// <param name=\\"status\\">Updated status of the pet</param>
        Task<PetApiClient.ITypeSafeUpdatePetWithFormResult> UpdatePetWithFormAsync(
            long? petId,
            string name,
            string status,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// uploads an image
        /// </summary>
        /// <param name=\\"petId\\">ID of pet to update</param>
        /// <param name=\\"body\\"></param>
        Task<PetApiClient.ITypeSafeUploadFileResult> UploadFileAsync(
            long? petId,
            System.IO.Stream body,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);
    }

    public class PetApiClientConfiguration
    {
        public string BaseUrl { get; set; }
        public JsonSerializerSettings Settings { get; set; }
    }

    /// <summary>
    /// 
    /// </summary>
    public sealed class PetApiClient : IPetApiClient
    {
        private readonly HttpClient httpClient;
        private readonly PetApiClientConfiguration configuration;

        public PetApiClient(HttpClient httpClient, PetApiClientConfiguration configuration)
        {
            this.httpClient = httpClient;
            this.configuration = configuration;
        }

        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <param name=\\"_pet\\">Pet object that needs to be added to the store</param>
        public Task<ITypeSafeAddPetResult> AddPetAsync(
            Pet _pet,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/pet\\";
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Post, uri);
            request.Headers.Authorization = authorization;
            request.Content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(_pet, this.configuration.Settings), System.Text.Encoding.UTF8, \\"application/json\\");
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeAddPetResult)new TypeSafeAddPetResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Deletes a pet
        /// </summary>
        /// <param name=\\"_petId\\">Pet id to delete</param>
        /// <param name=\\"_apiKey\\"></param>
        public Task<ITypeSafeDeletePetResult> DeletePetAsync(
            long? _petId,
            string _apiKey,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/pet/{petId}\\"
                        .Replace(\\"{petId}\\", System.Web.HttpUtility.UrlEncode(_petId.ToString()));
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Delete, uri);
            request.Headers.Authorization = authorization;
            request.Headers.Add(\\"api_key\\", _apiKey.ToString());
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeDeletePetResult)new TypeSafeDeletePetResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <remarks>Multiple status values can be provided with comma separated strings</remarks>
        /// <param name=\\"_status\\">Status values that need to be considered for filter</param>
        public Task<ITypeSafeFindPetsByStatusResult> FindPetsByStatusAsync(
            IReadOnlyList<string> _status,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/pet/findByStatus\\";
            var query = new System.Collections.Specialized.NameValueCollection
            {
                { \\"status\\", _status.Select(v => v.ToString()) },
            };
            var uri = new UriBuilder(this.configuration.BaseUrl + path)
                    {
                        Query = string.Join(\\"&\\", from key in query.AllKeys
                                                 let values = query.GetValues(key)
                                                 where values != null && values.Length > 0
                                                 let keySuffix = values.Length > 1 ? \\"[]\\" : \\"\\"
                                                 from value in values
                                                 select System.Web.HttpUtility.UrlEncode(key) + keySuffix + \\"=\\" + System.Web.HttpUtility.UrlEncode(value)),
                    }
                    .Uri;
            var request = new HttpRequestMessage(HttpMethod.Get, uri);
            request.Headers.Authorization = authorization;
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeFindPetsByStatusResult)new TypeSafeFindPetsByStatusResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <remarks>Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.</remarks>
        /// <param name=\\"_tags\\">Tags to filter by</param>
        public Task<ITypeSafeFindPetsByTagsResult> FindPetsByTagsAsync(
            IReadOnlyList<string> _tags,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/pet/findByTags\\";
            var query = new System.Collections.Specialized.NameValueCollection
            {
                { \\"tags\\", _tags.Select(v => v.ToString()) },
            };
            var uri = new UriBuilder(this.configuration.BaseUrl + path)
                    {
                        Query = string.Join(\\"&\\", from key in query.AllKeys
                                                 let values = query.GetValues(key)
                                                 where values != null && values.Length > 0
                                                 let keySuffix = values.Length > 1 ? \\"[]\\" : \\"\\"
                                                 from value in values
                                                 select System.Web.HttpUtility.UrlEncode(key) + keySuffix + \\"=\\" + System.Web.HttpUtility.UrlEncode(value)),
                    }
                    .Uri;
            var request = new HttpRequestMessage(HttpMethod.Get, uri);
            request.Headers.Authorization = authorization;
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeFindPetsByTagsResult)new TypeSafeFindPetsByTagsResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <remarks>Returns a single pet</remarks>
        /// <param name=\\"_petId\\">ID of pet to return</param>
        public Task<ITypeSafeGetPetByIdResult> GetPetByIdAsync(
            long? _petId,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/pet/{petId}\\"
                        .Replace(\\"{petId}\\", System.Web.HttpUtility.UrlEncode(_petId.ToString()));
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Get, uri);
            request.Headers.Authorization = authorization;
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeGetPetByIdResult)new TypeSafeGetPetByIdResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <param name=\\"_pet\\">Pet object that needs to be added to the store</param>
        public Task<ITypeSafeUpdatePetResult> UpdatePetAsync(
            Pet _pet,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/pet\\";
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Put, uri);
            request.Headers.Authorization = authorization;
            request.Content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(_pet, this.configuration.Settings), System.Text.Encoding.UTF8, \\"application/json\\");
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeUpdatePetResult)new TypeSafeUpdatePetResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>
        /// <param name=\\"_petId\\">ID of pet that needs to be updated</param>
        /// <param name=\\"_name\\">Updated name of the pet</param>
        /// <param name=\\"_status\\">Updated status of the pet</param>
        public Task<ITypeSafeUpdatePetWithFormResult> UpdatePetWithFormAsync(
            long? _petId,
            string _name,
            string _status,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/pet/{petId}\\"
                        .Replace(\\"{petId}\\", System.Web.HttpUtility.UrlEncode(_petId.ToString()));
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Post, uri);
            request.Headers.Authorization = authorization;
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeUpdatePetWithFormResult)new TypeSafeUpdatePetWithFormResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// uploads an image
        /// </summary>
        /// <param name=\\"_petId\\">ID of pet to update</param>
        /// <param name=\\"_body\\"></param>
        public Task<ITypeSafeUploadFileResult> UploadFileAsync(
            long? _petId,
            System.IO.Stream _body,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/pet/{petId}/uploadImage\\"
                        .Replace(\\"{petId}\\", System.Web.HttpUtility.UrlEncode(_petId.ToString()));
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Post, uri);
            request.Headers.Authorization = authorization;
            request.Content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(_body, this.configuration.Settings), System.Text.Encoding.UTF8, \\"application/octet-stream\\");
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeUploadFileResult)new TypeSafeUploadFileResult(t.Result, this.configuration.Settings));
        }


        public interface ITypeSafeAddPetResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>Invalid input</summary>
            Task<HttpResponseMessage> StatusCode405Async();
        }

        public readonly struct TypeSafeAddPetResult : ITypeSafeAddPetResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeAddPetResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>Invalid input</summary>
            public Task<HttpResponseMessage> StatusCode405Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)405)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeDeletePetResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>Invalid ID supplied</summary>
            Task<HttpResponseMessage> StatusCode400Async();

            /// <summary>Pet not found</summary>
            Task<HttpResponseMessage> StatusCode404Async();
        }

        public readonly struct TypeSafeDeletePetResult : ITypeSafeDeletePetResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeDeletePetResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>Invalid ID supplied</summary>
            public Task<HttpResponseMessage> StatusCode400Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)400)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            /// <summary>Pet not found</summary>
            public Task<HttpResponseMessage> StatusCode404Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)404)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeFindPetsByStatusResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>successful operation</summary>
            Task<IReadOnlyList<Pet>> StatusCode200Async();

            /// <summary>Invalid status value</summary>
            Task<HttpResponseMessage> StatusCode400Async();
        }

        public readonly struct TypeSafeFindPetsByStatusResult : ITypeSafeFindPetsByStatusResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeFindPetsByStatusResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>successful operation</summary>
            public Task<IReadOnlyList<Pet>> StatusCode200Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)200)
                    throw new InvalidOperationException();
                var settings = this.settings;
                return this.Response.Content.ReadAsStringAsync()
                    .ContinueWith(t => Newtonsoft.Json.JsonConvert.DeserializeObject<IReadOnlyList<Pet>>(t.Result, settings));
            }

            /// <summary>Invalid status value</summary>
            public Task<HttpResponseMessage> StatusCode400Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)400)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeFindPetsByTagsResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>successful operation</summary>
            Task<IReadOnlyList<Pet>> StatusCode200Async();

            /// <summary>Invalid tag value</summary>
            Task<HttpResponseMessage> StatusCode400Async();
        }

        public readonly struct TypeSafeFindPetsByTagsResult : ITypeSafeFindPetsByTagsResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeFindPetsByTagsResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>successful operation</summary>
            public Task<IReadOnlyList<Pet>> StatusCode200Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)200)
                    throw new InvalidOperationException();
                var settings = this.settings;
                return this.Response.Content.ReadAsStringAsync()
                    .ContinueWith(t => Newtonsoft.Json.JsonConvert.DeserializeObject<IReadOnlyList<Pet>>(t.Result, settings));
            }

            /// <summary>Invalid tag value</summary>
            public Task<HttpResponseMessage> StatusCode400Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)400)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeGetPetByIdResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>successful operation</summary>
            Task<Pet> StatusCode200Async();

            /// <summary>Invalid ID supplied</summary>
            Task<HttpResponseMessage> StatusCode400Async();

            /// <summary>Pet not found</summary>
            Task<HttpResponseMessage> StatusCode404Async();
        }

        public readonly struct TypeSafeGetPetByIdResult : ITypeSafeGetPetByIdResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeGetPetByIdResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>successful operation</summary>
            public Task<Pet> StatusCode200Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)200)
                    throw new InvalidOperationException();
                var settings = this.settings;
                return this.Response.Content.ReadAsStringAsync()
                    .ContinueWith(t => Newtonsoft.Json.JsonConvert.DeserializeObject<Pet>(t.Result, settings));
            }

            /// <summary>Invalid ID supplied</summary>
            public Task<HttpResponseMessage> StatusCode400Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)400)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            /// <summary>Pet not found</summary>
            public Task<HttpResponseMessage> StatusCode404Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)404)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeUpdatePetResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>Invalid ID supplied</summary>
            Task<HttpResponseMessage> StatusCode400Async();

            /// <summary>Pet not found</summary>
            Task<HttpResponseMessage> StatusCode404Async();

            /// <summary>Validation exception</summary>
            Task<HttpResponseMessage> StatusCode405Async();
        }

        public readonly struct TypeSafeUpdatePetResult : ITypeSafeUpdatePetResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeUpdatePetResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>Invalid ID supplied</summary>
            public Task<HttpResponseMessage> StatusCode400Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)400)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            /// <summary>Pet not found</summary>
            public Task<HttpResponseMessage> StatusCode404Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)404)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            /// <summary>Validation exception</summary>
            public Task<HttpResponseMessage> StatusCode405Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)405)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeUpdatePetWithFormResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>Invalid input</summary>
            Task<HttpResponseMessage> StatusCode405Async();
        }

        public readonly struct TypeSafeUpdatePetWithFormResult : ITypeSafeUpdatePetWithFormResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeUpdatePetWithFormResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>Invalid input</summary>
            public Task<HttpResponseMessage> StatusCode405Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)405)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeUploadFileResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>successful operation</summary>
            Task<ApiResponse> StatusCode200Async();
        }

        public readonly struct TypeSafeUploadFileResult : ITypeSafeUploadFileResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeUploadFileResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>successful operation</summary>
            public Task<ApiResponse> StatusCode200Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)200)
                    throw new InvalidOperationException();
                var settings = this.settings;
                return this.Response.Content.ReadAsStringAsync()
                    .ContinueWith(t => Newtonsoft.Json.JsonConvert.DeserializeObject<ApiResponse>(t.Result, settings));
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }

    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 8`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public interface IStoreApiClient
    { 
        /// <summary>
        /// Delete purchase order by ID
        /// </summary>
        /// <remarks>For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors</remarks>
        /// <param name=\\"orderId\\">ID of the order that needs to be deleted</param>
        Task<StoreApiClient.ITypeSafeDeleteOrderResult> DeleteOrderAsync(
            long? orderId,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Returns pet inventories by status
        /// </summary>
        /// <remarks>Returns a map of status codes to quantities</remarks>
        Task<StoreApiClient.ITypeSafeGetInventoryResult> GetInventoryAsync(
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <remarks>For valid response try integer IDs with value &gt;&#x3D; 1 and &lt;&#x3D; 10. Other values will generated exceptions</remarks>
        /// <param name=\\"orderId\\">ID of pet that needs to be fetched</param>
        Task<StoreApiClient.ITypeSafeGetOrderByIdResult> GetOrderByIdAsync(
            long? orderId,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Place an order for a pet
        /// </summary>
        /// <param name=\\"order\\">order placed for purchasing the pet</param>
        Task<StoreApiClient.ITypeSafePlaceOrderResult> PlaceOrderAsync(
            Order order,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);
    }

    public class StoreApiClientConfiguration
    {
        public string BaseUrl { get; set; }
        public JsonSerializerSettings Settings { get; set; }
    }

    /// <summary>
    /// 
    /// </summary>
    public sealed class StoreApiClient : IStoreApiClient
    {
        private readonly HttpClient httpClient;
        private readonly StoreApiClientConfiguration configuration;

        public StoreApiClient(HttpClient httpClient, StoreApiClientConfiguration configuration)
        {
            this.httpClient = httpClient;
            this.configuration = configuration;
        }

        /// <summary>
        /// Delete purchase order by ID
        /// </summary>
        /// <remarks>For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors</remarks>
        /// <param name=\\"_orderId\\">ID of the order that needs to be deleted</param>
        public Task<ITypeSafeDeleteOrderResult> DeleteOrderAsync(
            long? _orderId,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/store/order/{orderId}\\"
                        .Replace(\\"{orderId}\\", System.Web.HttpUtility.UrlEncode(_orderId.ToString()));
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Delete, uri);
            request.Headers.Authorization = authorization;
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeDeleteOrderResult)new TypeSafeDeleteOrderResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Returns pet inventories by status
        /// </summary>
        /// <remarks>Returns a map of status codes to quantities</remarks>
        public Task<ITypeSafeGetInventoryResult> GetInventoryAsync(
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/store/inventory\\";
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Get, uri);
            request.Headers.Authorization = authorization;
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeGetInventoryResult)new TypeSafeGetInventoryResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <remarks>For valid response try integer IDs with value &gt;&#x3D; 1 and &lt;&#x3D; 10. Other values will generated exceptions</remarks>
        /// <param name=\\"_orderId\\">ID of pet that needs to be fetched</param>
        public Task<ITypeSafeGetOrderByIdResult> GetOrderByIdAsync(
            long? _orderId,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/store/order/{orderId}\\"
                        .Replace(\\"{orderId}\\", System.Web.HttpUtility.UrlEncode(_orderId.ToString()));
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Get, uri);
            request.Headers.Authorization = authorization;
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeGetOrderByIdResult)new TypeSafeGetOrderByIdResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Place an order for a pet
        /// </summary>
        /// <param name=\\"_order\\">order placed for purchasing the pet</param>
        public Task<ITypeSafePlaceOrderResult> PlaceOrderAsync(
            Order _order,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/store/order\\";
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Post, uri);
            request.Headers.Authorization = authorization;
            request.Content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(_order, this.configuration.Settings), System.Text.Encoding.UTF8, \\"application/json\\");
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafePlaceOrderResult)new TypeSafePlaceOrderResult(t.Result, this.configuration.Settings));
        }


        public interface ITypeSafeDeleteOrderResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>Invalid ID supplied</summary>
            Task<HttpResponseMessage> StatusCode400Async();

            /// <summary>Order not found</summary>
            Task<HttpResponseMessage> StatusCode404Async();
        }

        public readonly struct TypeSafeDeleteOrderResult : ITypeSafeDeleteOrderResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeDeleteOrderResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>Invalid ID supplied</summary>
            public Task<HttpResponseMessage> StatusCode400Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)400)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            /// <summary>Order not found</summary>
            public Task<HttpResponseMessage> StatusCode404Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)404)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeGetInventoryResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>successful operation</summary>
            Task<Dictionary<string, int?>> StatusCode200Async();
        }

        public readonly struct TypeSafeGetInventoryResult : ITypeSafeGetInventoryResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeGetInventoryResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>successful operation</summary>
            public Task<Dictionary<string, int?>> StatusCode200Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)200)
                    throw new InvalidOperationException();
                var settings = this.settings;
                return this.Response.Content.ReadAsStringAsync()
                    .ContinueWith(t => Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, int?>>(t.Result, settings));
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeGetOrderByIdResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>successful operation</summary>
            Task<Order> StatusCode200Async();

            /// <summary>Invalid ID supplied</summary>
            Task<HttpResponseMessage> StatusCode400Async();

            /// <summary>Order not found</summary>
            Task<HttpResponseMessage> StatusCode404Async();
        }

        public readonly struct TypeSafeGetOrderByIdResult : ITypeSafeGetOrderByIdResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeGetOrderByIdResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>successful operation</summary>
            public Task<Order> StatusCode200Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)200)
                    throw new InvalidOperationException();
                var settings = this.settings;
                return this.Response.Content.ReadAsStringAsync()
                    .ContinueWith(t => Newtonsoft.Json.JsonConvert.DeserializeObject<Order>(t.Result, settings));
            }

            /// <summary>Invalid ID supplied</summary>
            public Task<HttpResponseMessage> StatusCode400Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)400)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            /// <summary>Order not found</summary>
            public Task<HttpResponseMessage> StatusCode404Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)404)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafePlaceOrderResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>successful operation</summary>
            Task<Order> StatusCode200Async();

            /// <summary>Invalid Order</summary>
            Task<HttpResponseMessage> StatusCode400Async();
        }

        public readonly struct TypeSafePlaceOrderResult : ITypeSafePlaceOrderResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafePlaceOrderResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>successful operation</summary>
            public Task<Order> StatusCode200Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)200)
                    throw new InvalidOperationException();
                var settings = this.settings;
                return this.Response.Content.ReadAsStringAsync()
                    .ContinueWith(t => Newtonsoft.Json.JsonConvert.DeserializeObject<Order>(t.Result, settings));
            }

            /// <summary>Invalid Order</summary>
            public Task<HttpResponseMessage> StatusCode400Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)400)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }

    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 9`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class Tag : IEquatable<Tag>
    {
        public Tag(
                [JsonProperty(PropertyName=\\"id\\")] long? Id, 
                [JsonProperty(PropertyName=\\"name\\")] string Name
            )
        { 
            this.Id = Id;
            this.Name = Name;
        }

        
        /// <summary>
        /// Gets Id
        /// </summary>
        [JsonProperty(PropertyName=\\"id\\")]
        public long? Id { get; }

        /// <summary>
        /// Gets Name
        /// </summary>
        [JsonProperty(PropertyName=\\"name\\")]
        public string Name { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Tag)obj);
        }

        public bool Equals(Tag other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 10`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public partial class User : IEquatable<User>
    {
        public User(
                [JsonProperty(PropertyName=\\"id\\")] long? Id, 
                [JsonProperty(PropertyName=\\"username\\")] string Username, 
                [JsonProperty(PropertyName=\\"firstName\\")] string FirstName, 
                [JsonProperty(PropertyName=\\"lastName\\")] string LastName, 
                [JsonProperty(PropertyName=\\"email\\")] string Email, 
                [JsonProperty(PropertyName=\\"password\\")] string Password, 
                [JsonProperty(PropertyName=\\"phone\\")] string Phone, 
                [JsonProperty(PropertyName=\\"userStatus\\")] int? UserStatus
            )
        { 
            this.Id = Id;
            this.Username = Username;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.Email = Email;
            this.Password = Password;
            this.Phone = Phone;
            this.UserStatus = UserStatus;
        }

        
        /// <summary>
        /// Gets Id
        /// </summary>
        [JsonProperty(PropertyName=\\"id\\")]
        public long? Id { get; }

        /// <summary>
        /// Gets Username
        /// </summary>
        [JsonProperty(PropertyName=\\"username\\")]
        public string Username { get; }

        /// <summary>
        /// Gets FirstName
        /// </summary>
        [JsonProperty(PropertyName=\\"firstName\\")]
        public string FirstName { get; }

        /// <summary>
        /// Gets LastName
        /// </summary>
        [JsonProperty(PropertyName=\\"lastName\\")]
        public string LastName { get; }

        /// <summary>
        /// Gets Email
        /// </summary>
        [JsonProperty(PropertyName=\\"email\\")]
        public string Email { get; }

        /// <summary>
        /// Gets Password
        /// </summary>
        [JsonProperty(PropertyName=\\"password\\")]
        public string Password { get; }

        /// <summary>
        /// Gets Phone
        /// </summary>
        [JsonProperty(PropertyName=\\"phone\\")]
        public string Phone { get; }

        /// <summary>
        /// Gets User Status
        /// </summary>
        [JsonProperty(PropertyName=\\"userStatus\\")]
        public int? UserStatus { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((User)obj);
        }

        public bool Equals(User other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    UserStatus == other.UserStatus ||
                    UserStatus != null &&
                    UserStatus.Equals(other.UserStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                if (UserStatus != null)
                    hashCode = hashCode * 59 + UserStatus.GetHashCode();
                return hashCode;
            }
        }
    }
}"
`;

exports[`dotnetcore-server-interfaces petstore.yaml can generate the files 11`] = `
"/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Demo
{ 
    /// <summary>
    /// 
    /// </summary>
    public interface IUserApiClient
    { 
        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name=\\"user\\">Created user object</param>
        Task<UserApiClient.ITypeSafeCreateUserResult> CreateUserAsync(
            User user,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <param name=\\"user\\">List of user object</param>
        Task<UserApiClient.ITypeSafeCreateUsersWithArrayInputResult> CreateUsersWithArrayInputAsync(
            IReadOnlyList<User> user,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <param name=\\"user\\">List of user object</param>
        Task<UserApiClient.ITypeSafeCreateUsersWithListInputResult> CreateUsersWithListInputAsync(
            IReadOnlyList<User> user,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name=\\"username\\">The name that needs to be deleted</param>
        Task<UserApiClient.ITypeSafeDeleteUserResult> DeleteUserAsync(
            string username,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Get user by user name
        /// </summary>
        /// <param name=\\"username\\">The name that needs to be fetched. Use user1 for testing. </param>
        Task<UserApiClient.ITypeSafeGetUserByNameResult> GetUserByNameAsync(
            string username,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Logs user into the system
        /// </summary>
        /// <param name=\\"username\\">The user name for login</param>
        /// <param name=\\"password\\">The password for login in clear text</param>
        Task<UserApiClient.ITypeSafeLoginUserResult> LoginUserAsync(
            string username,
            string password,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Logs out current logged in user session
        /// </summary>
        Task<UserApiClient.ITypeSafeLogoutUserResult> LogoutUserAsync(
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);

        /// <summary>
        /// Updated user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name=\\"username\\">name that need to be updated</param>
        /// <param name=\\"user\\">Updated user object</param>
        Task<UserApiClient.ITypeSafeUpdateUserResult> UpdateUserAsync(
            string username,
            User user,
            System.Net.Http.Headers.AuthenticationHeaderValue? _authorizationHeader = null);
    }

    public class UserApiClientConfiguration
    {
        public string BaseUrl { get; set; }
        public JsonSerializerSettings Settings { get; set; }
    }

    /// <summary>
    /// 
    /// </summary>
    public sealed class UserApiClient : IUserApiClient
    {
        private readonly HttpClient httpClient;
        private readonly UserApiClientConfiguration configuration;

        public UserApiClient(HttpClient httpClient, UserApiClientConfiguration configuration)
        {
            this.httpClient = httpClient;
            this.configuration = configuration;
        }

        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name=\\"_user\\">Created user object</param>
        public Task<ITypeSafeCreateUserResult> CreateUserAsync(
            User _user,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/user\\";
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Post, uri);
            request.Headers.Authorization = authorization;
            request.Content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(_user, this.configuration.Settings), System.Text.Encoding.UTF8, \\"application/json\\");
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeCreateUserResult)new TypeSafeCreateUserResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <param name=\\"_user\\">List of user object</param>
        public Task<ITypeSafeCreateUsersWithArrayInputResult> CreateUsersWithArrayInputAsync(
            IReadOnlyList<User> _user,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/user/createWithArray\\";
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Post, uri);
            request.Headers.Authorization = authorization;
            request.Content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(_user, this.configuration.Settings), System.Text.Encoding.UTF8, \\"application/json\\");
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeCreateUsersWithArrayInputResult)new TypeSafeCreateUsersWithArrayInputResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <param name=\\"_user\\">List of user object</param>
        public Task<ITypeSafeCreateUsersWithListInputResult> CreateUsersWithListInputAsync(
            IReadOnlyList<User> _user,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/user/createWithList\\";
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Post, uri);
            request.Headers.Authorization = authorization;
            request.Content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(_user, this.configuration.Settings), System.Text.Encoding.UTF8, \\"application/json\\");
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeCreateUsersWithListInputResult)new TypeSafeCreateUsersWithListInputResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name=\\"_username\\">The name that needs to be deleted</param>
        public Task<ITypeSafeDeleteUserResult> DeleteUserAsync(
            string _username,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/user/{username}\\"
                        .Replace(\\"{username}\\", System.Web.HttpUtility.UrlEncode(_username.ToString()));
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Delete, uri);
            request.Headers.Authorization = authorization;
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeDeleteUserResult)new TypeSafeDeleteUserResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Get user by user name
        /// </summary>
        /// <param name=\\"_username\\">The name that needs to be fetched. Use user1 for testing. </param>
        public Task<ITypeSafeGetUserByNameResult> GetUserByNameAsync(
            string _username,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/user/{username}\\"
                        .Replace(\\"{username}\\", System.Web.HttpUtility.UrlEncode(_username.ToString()));
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Get, uri);
            request.Headers.Authorization = authorization;
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeGetUserByNameResult)new TypeSafeGetUserByNameResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Logs user into the system
        /// </summary>
        /// <param name=\\"_username\\">The user name for login</param>
        /// <param name=\\"_password\\">The password for login in clear text</param>
        public Task<ITypeSafeLoginUserResult> LoginUserAsync(
            string _username,
            string _password,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/user/login\\";
            var query = new System.Collections.Specialized.NameValueCollection
            {
                { \\"username\\", _username.ToString() },
                { \\"password\\", _password.ToString() },
            };
            var uri = new UriBuilder(this.configuration.BaseUrl + path)
                    {
                        Query = string.Join(\\"&\\", from key in query.AllKeys
                                                 let values = query.GetValues(key)
                                                 where values != null && values.Length > 0
                                                 let keySuffix = values.Length > 1 ? \\"[]\\" : \\"\\"
                                                 from value in values
                                                 select System.Web.HttpUtility.UrlEncode(key) + keySuffix + \\"=\\" + System.Web.HttpUtility.UrlEncode(value)),
                    }
                    .Uri;
            var request = new HttpRequestMessage(HttpMethod.Get, uri);
            request.Headers.Authorization = authorization;
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeLoginUserResult)new TypeSafeLoginUserResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Logs out current logged in user session
        /// </summary>
        public Task<ITypeSafeLogoutUserResult> LogoutUserAsync(
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/user/logout\\";
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Get, uri);
            request.Headers.Authorization = authorization;
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeLogoutUserResult)new TypeSafeLogoutUserResult(t.Result, this.configuration.Settings));
        }

        /// <summary>
        /// Updated user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name=\\"_username\\">name that need to be updated</param>
        /// <param name=\\"_user\\">Updated user object</param>
        public Task<ITypeSafeUpdateUserResult> UpdateUserAsync(
            string _username,
            User _user,
            System.Net.Http.Headers.AuthenticationHeaderValue? authorization = null)
        {
            var path = \\"/user/{username}\\"
                        .Replace(\\"{username}\\", System.Web.HttpUtility.UrlEncode(_username.ToString()));
            var uri = new UriBuilder(this.configuration.BaseUrl + path).Uri;
            var request = new HttpRequestMessage(HttpMethod.Put, uri);
            request.Headers.Authorization = authorization;
            request.Content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(_user, this.configuration.Settings), System.Text.Encoding.UTF8, \\"application/json\\");
            return this.httpClient.SendAsync(request)
                             .ContinueWith(t => (ITypeSafeUpdateUserResult)new TypeSafeUpdateUserResult(t.Result, this.configuration.Settings));
        }


        public interface ITypeSafeCreateUserResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>successful operation</summary>
            Task<HttpResponseMessage> OtherStatusCodeAsync();
        }

        public readonly struct TypeSafeCreateUserResult : ITypeSafeCreateUserResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeCreateUserResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>successful operation</summary>
            public Task<HttpResponseMessage> OtherStatusCodeAsync()
            {

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeCreateUsersWithArrayInputResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>successful operation</summary>
            Task<HttpResponseMessage> OtherStatusCodeAsync();
        }

        public readonly struct TypeSafeCreateUsersWithArrayInputResult : ITypeSafeCreateUsersWithArrayInputResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeCreateUsersWithArrayInputResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>successful operation</summary>
            public Task<HttpResponseMessage> OtherStatusCodeAsync()
            {

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeCreateUsersWithListInputResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>successful operation</summary>
            Task<HttpResponseMessage> OtherStatusCodeAsync();
        }

        public readonly struct TypeSafeCreateUsersWithListInputResult : ITypeSafeCreateUsersWithListInputResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeCreateUsersWithListInputResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>successful operation</summary>
            public Task<HttpResponseMessage> OtherStatusCodeAsync()
            {

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeDeleteUserResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>Invalid username supplied</summary>
            Task<HttpResponseMessage> StatusCode400Async();

            /// <summary>User not found</summary>
            Task<HttpResponseMessage> StatusCode404Async();
        }

        public readonly struct TypeSafeDeleteUserResult : ITypeSafeDeleteUserResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeDeleteUserResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>Invalid username supplied</summary>
            public Task<HttpResponseMessage> StatusCode400Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)400)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            /// <summary>User not found</summary>
            public Task<HttpResponseMessage> StatusCode404Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)404)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeGetUserByNameResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>successful operation</summary>
            Task<User> StatusCode200Async();

            /// <summary>Invalid username supplied</summary>
            Task<HttpResponseMessage> StatusCode400Async();

            /// <summary>User not found</summary>
            Task<HttpResponseMessage> StatusCode404Async();
        }

        public readonly struct TypeSafeGetUserByNameResult : ITypeSafeGetUserByNameResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeGetUserByNameResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>successful operation</summary>
            public Task<User> StatusCode200Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)200)
                    throw new InvalidOperationException();
                var settings = this.settings;
                return this.Response.Content.ReadAsStringAsync()
                    .ContinueWith(t => Newtonsoft.Json.JsonConvert.DeserializeObject<User>(t.Result, settings));
            }

            /// <summary>Invalid username supplied</summary>
            public Task<HttpResponseMessage> StatusCode400Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)400)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            /// <summary>User not found</summary>
            public Task<HttpResponseMessage> StatusCode404Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)404)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeLoginUserResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>successful operation</summary>
            Task<string> StatusCode200Async();

            /// <summary>Invalid username/password supplied</summary>
            Task<HttpResponseMessage> StatusCode400Async();
        }

        public readonly struct TypeSafeLoginUserResult : ITypeSafeLoginUserResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeLoginUserResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>successful operation</summary>
            public Task<string> StatusCode200Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)200)
                    throw new InvalidOperationException();
                var settings = this.settings;
                return this.Response.Content.ReadAsStringAsync()
                    .ContinueWith(t => Newtonsoft.Json.JsonConvert.DeserializeObject<string>(t.Result, settings));
            }

            /// <summary>Invalid username/password supplied</summary>
            public Task<HttpResponseMessage> StatusCode400Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)400)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeLogoutUserResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>successful operation</summary>
            Task<HttpResponseMessage> OtherStatusCodeAsync();
        }

        public readonly struct TypeSafeLogoutUserResult : ITypeSafeLogoutUserResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeLogoutUserResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>successful operation</summary>
            public Task<HttpResponseMessage> OtherStatusCodeAsync()
            {

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }


        public interface ITypeSafeUpdateUserResult : IDisposable
        {
            HttpResponseMessage Response { get; }
            System.Net.HttpStatusCode StatusCode => Response.StatusCode;


            /// <summary>Invalid user supplied</summary>
            Task<HttpResponseMessage> StatusCode400Async();

            /// <summary>User not found</summary>
            Task<HttpResponseMessage> StatusCode404Async();
        }

        public readonly struct TypeSafeUpdateUserResult : ITypeSafeUpdateUserResult
        {
            private readonly JsonSerializerSettings settings;

            public TypeSafeUpdateUserResult(HttpResponseMessage response, JsonSerializerSettings settings)
            {
                this.Response = response;
                this.settings = settings;
            }

            public HttpResponseMessage Response { get; }


            /// <summary>Invalid user supplied</summary>
            public Task<HttpResponseMessage> StatusCode400Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)400)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            /// <summary>User not found</summary>
            public Task<HttpResponseMessage> StatusCode404Async()
            {
                if (this.Response.StatusCode != (System.Net.HttpStatusCode)404)
                    throw new InvalidOperationException();

                return Task.FromResult(Response);
            }

            void IDisposable.Dispose()
            {
                ((IDisposable)Response).Dispose();
            }
        }

    }
}"
`;
