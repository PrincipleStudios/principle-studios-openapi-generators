// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`typescript-rxjs enum.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\npm\\out.local.petstore3\\models\\Option.ts 1`] = `
"/*
 * Rock Paper Scissors
 *
 * A sample API that uses enums to play rock-paper-scissors
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools (PrincipleStudios.OpenApiCodegen.Client.TypeScript v1.0.0.0)
 */

/**
 * @export
 * @interface Option
 */
export type Option =
    | \\"rock\\"
    | \\"paper\\"
    | \\"scissors\\"
;
"
`;

exports[`typescript-rxjs enum.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\npm\\out.local.petstore3\\operations\\index.ts 1`] = `
"/*
 * Rock Paper Scissors
 *
 * A sample API that uses enums to play rock-paper-scissors
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools (PrincipleStudios.OpenApiCodegen.Client.TypeScript v1.0.0.0)
 */
import { conversion as playRockPaperScissors } from './playRockPaperScissors';

export default {
    playRockPaperScissors,
} as const;
"
`;

exports[`typescript-rxjs enum.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\npm\\out.local.petstore3\\operations\\playRockPaperScissors.ts 1`] = `
"/*
 * Rock Paper Scissors
 *
 * A sample API that uses enums to play rock-paper-scissors
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools (PrincipleStudios.OpenApiCodegen.Client.TypeScript v1.0.0.0)
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse, TransformRequest } from '@principlestudios/openapi-codegen-typescript';
import {
    Option,
} from './../models/Option';

export type RequestParams = {
};
export type RequestBodies = {
    'application/json': { \\"player1\\": Option; \\"player2\\": Option };
};

export type StructuredResponses = {
    /** One player won */
    200: {
        'application/json': \\"player1\\" | \\"player2\\";
    };
    /** Tie */
    409: {
        '': undefined;
    };
};
export type Responses = 
    | StandardResponse<200, 'application/json', \\"player1\\" | \\"player2\\">
    | StandardResponse<409, '', undefined>;

export function playRockPaperScissors<K extends keyof RequestBodies>(params: RequestParams, body: RequestBodies[K], mimeType: K): RequestOpts;
export function playRockPaperScissors(params: RequestParams, body: RequestBodies[keyof RequestBodies] | null = null, mimeType: keyof RequestBodies | null = null): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(body, 'body');
    throwIfNullOrUndefined(mimeType, 'mimeType');

    const headers: HttpHeaders = {};
    if (mimeType) headers['Content-Type'] = mimeType;

    return {
        path: '/rock-paper-scissors',
        method: 'POST',
        headers,
        body,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
            409,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.getResponseHeader(\\"Content-Type\\"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, RequestBodies, Responses, 'body'> = {
    request: playRockPaperScissors,
    response: responseConversion,
};

"
`;
