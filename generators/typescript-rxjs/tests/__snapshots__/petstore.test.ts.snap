// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`typescript-rxjs petstore.yaml can generate the files: index.ts 1`] = `
"/* eslint-disable */
export * from './runtime';
export * from './apis';
export * from './models';
"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: runtime.ts 1`] = `
"/* eslint-disable */
/**
 * Swagger Petstore
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Templates provided by Principle. (https://github.com/mdekrey/principle-studios-openapi-generators)
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { ajax, AjaxRequest, AjaxResponse } from 'rxjs/ajax';
import { map } from 'rxjs/operators';

export const BASE_PATH = 'http://petstore.swagger.io/api'.replace(/\\\\/+$/, '');

export interface ConfigurationParameters {
    basePath: string; // override base path
    username: string | undefined; // parameter for basic security
    password: string | undefined; // parameter for basic security
    apiKey: undefined | string | ((name: string) => string); // parameter for apiKey security
    accessToken: undefined | string | ((name?: string, scopes?: string[]) => string); // parameter for oauth2 security
    rxjsRequest: (params: RequestArgs) => Observable<AjaxResponse>;

}

export class Configuration {
    readonly basePath: string;
    readonly username: string | undefined;
    readonly password: string | undefined;
    readonly apiKey: string | ((name: string) => string) | undefined;
    readonly accessToken: string | ((name?: string | undefined, scopes?: string[] | undefined) => string) | undefined;
    readonly rxjsRequest: (params: RequestArgs) => Observable<AjaxResponse>;

    constructor(configuration: Partial<ConfigurationParameters> = {}) {
        this.basePath = configuration.basePath || BASE_PATH;
        this.username = configuration.username || undefined;
        this.password = configuration.password || undefined;
        this.apiKey = configuration.apiKey || undefined;
        this.accessToken = configuration.accessToken || undefined;
        this.rxjsRequest = configuration.rxjsRequest || ajax;
    }
}

/**
 * This is the base class for all generated API classes.
 */
export class BaseAPI {

    constructor(protected configuration = new Configuration()) {
    }

    protected readonly request = <T>(requestOpts: RequestOpts): Observable<T> =>
        this.executeRequest(requestOpts).pipe(
            map((res) => {
                if (res.status >= 200 && res.status < 300) {
                    return res.response as T;
                }
                throw res;
            })
        );

    protected readonly executeRequest = (requestOpts: RequestOpts) =>
        this.configuration.rxjsRequest(this.createRequestArgs(requestOpts));

    private readonly createRequestArgs = (requestOpts: RequestOpts): RequestArgs => {
        let url = this.configuration.basePath + requestOpts.path;
        if (requestOpts.query !== undefined && Object.keys(requestOpts.query).length !== 0) {
            // only add the queryString to the URL if there are query parameters.
            // this is done to avoid urls ending with a '?' character which buggy webservers
            // do not handle correctly sometimes.
            url += '?' + queryString(requestOpts.query);
        }

        return {
            url,
            method: requestOpts.method,
            headers: requestOpts.headers,
            body: requestOpts.body instanceof FormData ? requestOpts.body : JSON.stringify(requestOpts.body),
            responseType: requestOpts.responseType || 'json',
        };
    }
}

/**
 * @deprecated
 * export for not being a breaking change
 */
export class RequiredError extends Error {
    name: 'RequiredError' = 'RequiredError';
}

export const COLLECTION_FORMATS = {
    csv: ',',
    ssv: ' ',
    tsv: '\\\\t',
    pipes: '|',
};

export type Json = any;
export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
export type HttpHeaders = { [key: string]: string };
export type HttpQuery = Partial<{ [key: string]: string | number | null | boolean | Array<string | number | null | boolean> }>; // partial is needed for strict mode
export type HttpBody = Json | FormData;

export interface RequestOpts {
    path: string;
    method: HttpMethod;
    headers?: HttpHeaders;
    query?: HttpQuery;
    body?: HttpBody;
    responseType?: 'json' | 'blob' | 'arraybuffer' | 'text';
}

export const encodeURI = (value: any) => encodeURIComponent(String(value));

const queryString = (params: HttpQuery): string => Object.keys(params)
    .map((key) => {
        const value = params[key];
        return (value instanceof Array)
            ? value.map((val) => \`\${encodeURI(key)}=\${encodeURI(val)}\`).join('&')
            : \`\${encodeURI(key)}=\${encodeURI(value)}\`;
    })
    .join('&');

// alias fallback for not being a breaking change
export const querystring = queryString;

/**
 * @deprecated
 */
export const throwIfRequired = (params: {[key: string]: any}, key: string, nickname: string) => {
    if (!params || params[key] == null) {
        throw new RequiredError(\`Required parameter \${key} was null or undefined when calling \${nickname}.\`);
    }
};

export const throwIfNullOrUndefined = (value: any, nickname?: string) => {
    if (value == null) {
        throw new Error(\`Parameter \\"\${value}\\" was null or undefined when calling \\"\${nickname}\\".\`);
    }
};

// alias for easier importing
export type RequestArgs = AjaxRequest;
export type ResponseArgs = AjaxResponse;
"
`;
