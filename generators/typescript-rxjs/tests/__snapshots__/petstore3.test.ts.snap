// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\apis\\PetApi.ts 1`] = `
"/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Templates provided by Principle. (https://github.com/mdekrey/principle-studios-openapi-generators)
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, RequestOpts } from '../runtime';
import {
    ApiResponse,
    Pet,
} from '../models';

export interface AddPetRequest {
    pet: Pet;
}

export interface DeletePetRequest {
    petId: number;
    apiKey?: string;
}

export interface FindPetsByStatusRequest {
    status: Array<FindPetsByStatusStatusEnum>;
}

export interface FindPetsByTagsRequest {
    tags: Array<string>;
}

export interface GetPetByIdRequest {
    petId: number;
}

export interface UpdatePetRequest {
    pet: Pet;
}

export interface UpdatePetWithFormRequest {
    petId: number;
    name?: string;
    status?: string;
}

export interface UploadFileRequest {
    petId: number;
    body?: Blob;
}

/**
 * no description
 */
export class PetApiRequests {

    /**
     * Add a new pet to the store
     */
    static readonly addPet = ({ pet }: AddPetRequest): RequestOpts => {
        throwIfNullOrUndefined(pet, 'addPet');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return {
            path: '/pet',
            method: 'POST',
            headers,
            body: pet,
        };
    };

    /**
     * Deletes a pet
     */
    static readonly deletePet = ({ petId, apiKey }: DeletePetRequest): RequestOpts => {
        throwIfNullOrUndefined(petId, 'deletePet');

        const headers: HttpHeaders = {
            ...(apiKey != null ? { 'api_key': String(apiKey) } : undefined),
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return {
            path: '/pet/{petId}'.replace('{petId}', encodeURI(petId)),
            method: 'DELETE',
            headers,
        };
    };

    /**
     * Multiple status values can be provided with comma separated strings
     * Finds Pets by status
     */
    static readonly findPetsByStatus = ({ status }: FindPetsByStatusRequest): RequestOpts => {
        throwIfNullOrUndefined(status, 'findPetsByStatus');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'status': status,
        };

        return {
            path: '/pet/findByStatus',
            method: 'GET',
            headers,
            query,
        };
    };

    /**
     * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * Finds Pets by tags
     */
    static readonly findPetsByTags = ({ tags }: FindPetsByTagsRequest): RequestOpts => {
        throwIfNullOrUndefined(tags, 'findPetsByTags');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'tags': tags,
        };

        return {
            path: '/pet/findByTags',
            method: 'GET',
            headers,
            query,
        };
    };

    /**
     * Returns a single pet
     * Find pet by ID
     */
    static readonly getPetById = ({ petId }: GetPetByIdRequest): RequestOpts => {
        throwIfNullOrUndefined(petId, 'getPetById');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'api_key': this.configuration.apiKey('api_key') }), // api_key authentication
        };

        return {
            path: '/pet/{petId}'.replace('{petId}', encodeURI(petId)),
            method: 'GET',
            headers,
        };
    };

    /**
     * Update an existing pet
     */
    static readonly updatePet = ({ pet }: UpdatePetRequest): RequestOpts => {
        throwIfNullOrUndefined(pet, 'updatePet');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return {
            path: '/pet',
            method: 'PUT',
            headers,
            body: pet,
        };
    };

    /**
     * Updates a pet in the store with form data
     */
    static readonly updatePetWithForm = ({ petId, name, status }: UpdatePetWithFormRequest): RequestOpts => {
        throwIfNullOrUndefined(petId, 'updatePetWithForm');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const formData = new FormData();
        if (name !== undefined) { formData.append('name', name as any); }
        if (status !== undefined) { formData.append('status', status as any); }

        return {
            path: '/pet/{petId}'.replace('{petId}', encodeURI(petId)),
            method: 'POST',
            headers,
            body: formData,
        };
    };

    /**
     * uploads an image
     */
    static readonly uploadFile = ({ petId, body }: UploadFileRequest): RequestOpts => {
        throwIfNullOrUndefined(petId, 'uploadFile');

        const headers: HttpHeaders = {
            'Content-Type': 'application/octet-stream',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('petstore_auth', ['write:pets', 'read:pets'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return {
            path: '/pet/{petId}/uploadImage'.replace('{petId}', encodeURI(petId)),
            method: 'POST',
            headers,
            body: body as any,
        };
    };

}

/**
 * no description
 */
export class PetApi extends BaseAPI {

    /**
     * Add a new pet to the store
     */
    readonly addPet = (params: AddPetRequest): Observable<void> =>
        this.request<void>(
            PetApiRequests.addPet(params)
        );

    /**
     * Deletes a pet
     */
    readonly deletePet = (params: DeletePetRequest): Observable<void> =>
        this.request<void>(
            PetApiRequests.deletePet(params)
        );

    /**
     * Multiple status values can be provided with comma separated strings
     * Finds Pets by status
     */
    readonly findPetsByStatus = (params: FindPetsByStatusRequest): Observable<Array<Pet>> =>
        this.request<Array<Pet>>(
            PetApiRequests.findPetsByStatus(params)
        );

    /**
     * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * Finds Pets by tags
     */
    readonly findPetsByTags = (params: FindPetsByTagsRequest): Observable<Array<Pet>> =>
        this.request<Array<Pet>>(
            PetApiRequests.findPetsByTags(params)
        );

    /**
     * Returns a single pet
     * Find pet by ID
     */
    readonly getPetById = (params: GetPetByIdRequest): Observable<Pet> =>
        this.request<Pet>(
            PetApiRequests.getPetById(params)
        );

    /**
     * Update an existing pet
     */
    readonly updatePet = (params: UpdatePetRequest): Observable<void> =>
        this.request<void>(
            PetApiRequests.updatePet(params)
        );

    /**
     * Updates a pet in the store with form data
     */
    readonly updatePetWithForm = (params: UpdatePetWithFormRequest): Observable<void> =>
        this.request<void>(
            PetApiRequests.updatePetWithForm(params)
        );

    /**
     * uploads an image
     */
    readonly uploadFile = (params: UploadFileRequest): Observable<ApiResponse> =>
        this.request<ApiResponse>(
            PetApiRequests.uploadFile(params)
        );

}

/**
 * @export
 * @enum {string}
 */
export enum FindPetsByStatusStatusEnum {
    Available = 'available',
    Pending = 'pending',
    Sold = 'sold'
}
"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\apis\\StoreApi.ts 1`] = `
"/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Templates provided by Principle. (https://github.com/mdekrey/principle-studios-openapi-generators)
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, RequestOpts } from '../runtime';
import {
    Order,
} from '../models';

export interface DeleteOrderRequest {
    orderId: number;
}

export interface GetOrderByIdRequest {
    orderId: number;
}

export interface PlaceOrderRequest {
    order: Order;
}

/**
 * no description
 */
export class StoreApiRequests {

    /**
     * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * Delete purchase order by ID
     */
    static readonly deleteOrder = ({ orderId }: DeleteOrderRequest): RequestOpts => {
        throwIfNullOrUndefined(orderId, 'deleteOrder');

        return {
            path: '/store/order/{orderId}'.replace('{orderId}', encodeURI(orderId)),
            method: 'DELETE',
        };
    };

    /**
     * Returns a map of status codes to quantities
     * Returns pet inventories by status
     */
    static readonly getInventory = (): RequestOpts => {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'api_key': this.configuration.apiKey('api_key') }), // api_key authentication
        };

        return {
            path: '/store/inventory',
            method: 'GET',
            headers,
        };
    };

    /**
     * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * Find purchase order by ID
     */
    static readonly getOrderById = ({ orderId }: GetOrderByIdRequest): RequestOpts => {
        throwIfNullOrUndefined(orderId, 'getOrderById');

        return {
            path: '/store/order/{orderId}'.replace('{orderId}', encodeURI(orderId)),
            method: 'GET',
        };
    };

    /**
     * Place an order for a pet
     */
    static readonly placeOrder = ({ order }: PlaceOrderRequest): RequestOpts => {
        throwIfNullOrUndefined(order, 'placeOrder');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return {
            path: '/store/order',
            method: 'POST',
            headers,
            body: order,
        };
    };

}

/**
 * no description
 */
export class StoreApi extends BaseAPI {

    /**
     * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     * Delete purchase order by ID
     */
    readonly deleteOrder = (params: DeleteOrderRequest): Observable<void> =>
        this.request<void>(
            StoreApiRequests.deleteOrder(params)
        );

    /**
     * Returns a map of status codes to quantities
     * Returns pet inventories by status
     */
    readonly getInventory = (): Observable<{ [key: string]: number; }> =>
        this.request<{ [key: string]: number; }>(
            StoreApiRequests.getInventory()
        );

    /**
     * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     * Find purchase order by ID
     */
    readonly getOrderById = (params: GetOrderByIdRequest): Observable<Order> =>
        this.request<Order>(
            StoreApiRequests.getOrderById(params)
        );

    /**
     * Place an order for a pet
     */
    readonly placeOrder = (params: PlaceOrderRequest): Observable<Order> =>
        this.request<Order>(
            StoreApiRequests.placeOrder(params)
        );

}
"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\apis\\UserApi.ts 1`] = `
"/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Templates provided by Principle. (https://github.com/mdekrey/principle-studios-openapi-generators)
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, RequestOpts } from '../runtime';
import {
    User,
} from '../models';

export interface CreateUserRequest {
    user: User;
}

export interface CreateUsersWithArrayInputRequest {
    user: Array<User>;
}

export interface CreateUsersWithListInputRequest {
    user: Array<User>;
}

export interface DeleteUserRequest {
    username: string;
}

export interface GetUserByNameRequest {
    username: string;
}

export interface LoginUserRequest {
    username: string;
    password: string;
}

export interface UpdateUserRequest {
    username: string;
    user: User;
}

/**
 * no description
 */
export class UserApiRequests {

    /**
     * This can only be done by the logged in user.
     * Create user
     */
    static readonly createUser = ({ user }: CreateUserRequest): RequestOpts => {
        throwIfNullOrUndefined(user, 'createUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return {
            path: '/user',
            method: 'POST',
            headers,
            body: user,
        };
    };

    /**
     * Creates list of users with given input array
     */
    static readonly createUsersWithArrayInput = ({ user }: CreateUsersWithArrayInputRequest): RequestOpts => {
        throwIfNullOrUndefined(user, 'createUsersWithArrayInput');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return {
            path: '/user/createWithArray',
            method: 'POST',
            headers,
            body: user,
        };
    };

    /**
     * Creates list of users with given input array
     */
    static readonly createUsersWithListInput = ({ user }: CreateUsersWithListInputRequest): RequestOpts => {
        throwIfNullOrUndefined(user, 'createUsersWithListInput');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return {
            path: '/user/createWithList',
            method: 'POST',
            headers,
            body: user,
        };
    };

    /**
     * This can only be done by the logged in user.
     * Delete user
     */
    static readonly deleteUser = ({ username }: DeleteUserRequest): RequestOpts => {
        throwIfNullOrUndefined(username, 'deleteUser');

        return {
            path: '/user/{username}'.replace('{username}', encodeURI(username)),
            method: 'DELETE',
        };
    };

    /**
     * Get user by user name
     */
    static readonly getUserByName = ({ username }: GetUserByNameRequest): RequestOpts => {
        throwIfNullOrUndefined(username, 'getUserByName');

        return {
            path: '/user/{username}'.replace('{username}', encodeURI(username)),
            method: 'GET',
        };
    };

    /**
     * Logs user into the system
     */
    static readonly loginUser = ({ username, password }: LoginUserRequest): RequestOpts => {
        throwIfNullOrUndefined(username, 'loginUser');
        throwIfNullOrUndefined(password, 'loginUser');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'username': username,
            'password': password,
        };

        return {
            path: '/user/login',
            method: 'GET',
            query,
        };
    };

    /**
     * Logs out current logged in user session
     */
    static readonly logoutUser = (): RequestOpts => {
        return {
            path: '/user/logout',
            method: 'GET',
        };
    };

    /**
     * This can only be done by the logged in user.
     * Updated user
     */
    static readonly updateUser = ({ username, user }: UpdateUserRequest): RequestOpts => {
        throwIfNullOrUndefined(username, 'updateUser');
        throwIfNullOrUndefined(user, 'updateUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return {
            path: '/user/{username}'.replace('{username}', encodeURI(username)),
            method: 'PUT',
            headers,
            body: user,
        };
    };

}

/**
 * no description
 */
export class UserApi extends BaseAPI {

    /**
     * This can only be done by the logged in user.
     * Create user
     */
    readonly createUser = (params: CreateUserRequest): Observable<void> =>
        this.request<void>(
            UserApiRequests.createUser(params)
        );

    /**
     * Creates list of users with given input array
     */
    readonly createUsersWithArrayInput = (params: CreateUsersWithArrayInputRequest): Observable<void> =>
        this.request<void>(
            UserApiRequests.createUsersWithArrayInput(params)
        );

    /**
     * Creates list of users with given input array
     */
    readonly createUsersWithListInput = (params: CreateUsersWithListInputRequest): Observable<void> =>
        this.request<void>(
            UserApiRequests.createUsersWithListInput(params)
        );

    /**
     * This can only be done by the logged in user.
     * Delete user
     */
    readonly deleteUser = (params: DeleteUserRequest): Observable<void> =>
        this.request<void>(
            UserApiRequests.deleteUser(params)
        );

    /**
     * Get user by user name
     */
    readonly getUserByName = (params: GetUserByNameRequest): Observable<User> =>
        this.request<User>(
            UserApiRequests.getUserByName(params)
        );

    /**
     * Logs user into the system
     */
    readonly loginUser = (params: LoginUserRequest): Observable<string> =>
        this.request<string>(
            UserApiRequests.loginUser(params)
        );

    /**
     * Logs out current logged in user session
     */
    readonly logoutUser = (): Observable<void> =>
        this.request<void>(
            UserApiRequests.logoutUser()
        );

    /**
     * This can only be done by the logged in user.
     * Updated user
     */
    readonly updateUser = (params: UpdateUserRequest): Observable<void> =>
        this.request<void>(
            UserApiRequests.updateUser(params)
        );

}
"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\apis\\index.ts 1`] = `
"/* eslint-disable */
export * from './PetApi';
export * from './StoreApi';
export * from './UserApi';
"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\index.ts 1`] = `
"/* eslint-disable */
export * from './runtime';
export * from './apis';
export * from './models';
"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\models\\ApiResponse.ts 1`] = `
"/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Templates provided by Principle. (https://github.com/mdekrey/principle-studios-openapi-generators)
 * Do not edit the class manually.
 */

/* eslint-disable */
/**
 * @export
 * @interface ApiResponse
 */
export interface ApiResponse {
    /**
     * @type {number}
     * @memberof ApiResponse
     */
    code?: number;
    /**
     * @type {string}
     * @memberof ApiResponse
     */
    type?: string;
    /**
     * @type {string}
     * @memberof ApiResponse
     */
    message?: string;
}
"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\models\\Category.ts 1`] = `
"/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Templates provided by Principle. (https://github.com/mdekrey/principle-studios-openapi-generators)
 * Do not edit the class manually.
 */

/* eslint-disable */
/**
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * @type {number}
     * @memberof Category
     */
    id?: number;
    /**
     * @type {string}
     * @memberof Category
     */
    name?: string;
}
"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\models\\InlineObject.ts 1`] = `
"/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Templates provided by Principle. (https://github.com/mdekrey/principle-studios-openapi-generators)
 * Do not edit the class manually.
 */

/* eslint-disable */
/**
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * Updated name of the pet
     * @type {string}
     * @memberof InlineObject
     */
    name?: string;
    /**
     * Updated status of the pet
     * @type {string}
     * @memberof InlineObject
     */
    status?: string;
}
"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\models\\Order.ts 1`] = `
"/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Templates provided by Principle. (https://github.com/mdekrey/principle-studios-openapi-generators)
 * Do not edit the class manually.
 */

/* eslint-disable */
/**
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * @type {number}
     * @memberof Order
     */
    id?: number;
    /**
     * @type {number}
     * @memberof Order
     */
    petId?: number;
    /**
     * @type {number}
     * @memberof Order
     */
    quantity?: number;
    /**
     * @type {Date}
     * @memberof Order
     */
    shipDate?: Date;
    /**
     * Order Status
     * @type {string}
     * @memberof Order
     */
    status?: OrderStatusEnum;
    /**
     * @type {boolean}
     * @memberof Order
     */
    complete?: boolean;
}

/**
 * @export
 * @enum {string}
 */
export enum OrderStatusEnum {
    Placed = 'placed',
    Approved = 'approved',
    Delivered = 'delivered'
}

"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\models\\Pet.ts 1`] = `
"/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Templates provided by Principle. (https://github.com/mdekrey/principle-studios-openapi-generators)
 * Do not edit the class manually.
 */

/* eslint-disable */
import {
    Category,
    Tag,
} from './';

/**
 * @export
 * @interface Pet
 */
export interface Pet {
    /**
     * @type {number}
     * @memberof Pet
     */
    id?: number;
    /**
     * @type {Category}
     * @memberof Pet
     */
    category?: Category;
    /**
     * @type {string}
     * @memberof Pet
     */
    name: string;
    /**
     * @type {Array<string>}
     * @memberof Pet
     */
    photoUrls: Array<string>;
    /**
     * @type {Array<Tag>}
     * @memberof Pet
     */
    tags?: Array<Tag>;
    /**
     * pet status in the store
     * @type {string}
     * @memberof Pet
     */
    status?: PetStatusEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum PetStatusEnum {
    Available = 'available',
    Pending = 'pending',
    Sold = 'sold'
}

"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\models\\Tag.ts 1`] = `
"/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Templates provided by Principle. (https://github.com/mdekrey/principle-studios-openapi-generators)
 * Do not edit the class manually.
 */

/* eslint-disable */
/**
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * @type {number}
     * @memberof Tag
     */
    id?: number;
    /**
     * @type {string}
     * @memberof Tag
     */
    name?: string;
}
"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\models\\User.ts 1`] = `
"/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Templates provided by Principle. (https://github.com/mdekrey/principle-studios-openapi-generators)
 * Do not edit the class manually.
 */

/* eslint-disable */
/**
 * @export
 * @interface User
 */
export interface User {
    /**
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * @type {string}
     * @memberof User
     */
    phone?: string;
    /**
     * User Status
     * @type {number}
     * @memberof User
     */
    userStatus?: number;
}
"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\models\\index.ts 1`] = `
"/* eslint-disable */
export * from './ApiResponse';
export * from './Category';
export * from './InlineObject';
export * from './Order';
export * from './Pet';
export * from './Tag';
export * from './User';
"
`;

exports[`typescript-rxjs petstore.yaml can generate the files: C:\\Users\\mattd\\Source\\openapi-codegen\\generators\\typescript-rxjs\\out.local.petstore3\\runtime.ts 1`] = `
"/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Templates provided by Principle. (https://github.com/mdekrey/principle-studios-openapi-generators)
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { ajax, AjaxRequest, AjaxResponse } from 'rxjs/ajax';
import { map } from 'rxjs/operators';

export const BASE_PATH = 'http://petstore.swagger.io/api'.replace(/\\\\/+$/, '');

export interface ConfigurationParameters {
    basePath: string; // override base path
    username: string | undefined; // parameter for basic security
    password: string | undefined; // parameter for basic security
    apiKey: undefined | string | ((name: string) => string); // parameter for apiKey security
    accessToken: undefined | string | ((name?: string, scopes?: string[]) => string); // parameter for oauth2 security
    rxjsRequest: (params: RequestArgs) => Observable<AjaxResponse>;

}

export class Configuration {
    readonly basePath: string;
    readonly username: string | undefined;
    readonly password: string | undefined;
    readonly apiKey: string | ((name: string) => string) | undefined;
    readonly accessToken: string | ((name?: string | undefined, scopes?: string[] | undefined) => string) | undefined;
    readonly rxjsRequest: (params: RequestArgs) => Observable<AjaxResponse>;

    constructor(configuration: Partial<ConfigurationParameters> = {}) {
        this.basePath = configuration.basePath || BASE_PATH;
        this.username = configuration.username || undefined;
        this.password = configuration.password || undefined;
        this.apiKey = configuration.apiKey || undefined;
        this.accessToken = configuration.accessToken || undefined;
        this.rxjsRequest = configuration.rxjsRequest || ajax;
    }
}

/**
 * This is the base class for all generated API classes.
 */
export class BaseAPI {

    constructor(protected configuration = new Configuration()) {
    }

    protected readonly request = <T>(requestOpts: RequestOpts): Observable<T> =>
        this.executeRequest(requestOpts).pipe(
            map((res) => {
                if (res.status >= 200 && res.status < 300) {
                    return res.response as T;
                }
                throw res;
            })
        );

    protected readonly executeRequest = (requestOpts: RequestOpts) =>
        this.configuration.rxjsRequest(this.createRequestArgs(requestOpts));

    private readonly createRequestArgs = (requestOpts: RequestOpts): RequestArgs => {
        let url = this.configuration.basePath + requestOpts.path;
        if (requestOpts.query !== undefined && Object.keys(requestOpts.query).length !== 0) {
            // only add the queryString to the URL if there are query parameters.
            // this is done to avoid urls ending with a '?' character which buggy webservers
            // do not handle correctly sometimes.
            url += '?' + queryString(requestOpts.query);
        }

        return {
            url,
            method: requestOpts.method,
            headers: requestOpts.headers,
            body: requestOpts.body instanceof FormData ? requestOpts.body : JSON.stringify(requestOpts.body),
            responseType: requestOpts.responseType || 'json',
        };
    }
}

/**
 * @deprecated
 * export for not being a breaking change
 */
export class RequiredError extends Error {
    name: 'RequiredError' = 'RequiredError';
}

export const COLLECTION_FORMATS = {
    csv: ',',
    ssv: ' ',
    tsv: '\\\\t',
    pipes: '|',
};

export type Json = any;
export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';
export type HttpHeaders = { [key: string]: string };
export type HttpQuery = Partial<{ [key: string]: string | number | null | boolean | Array<string | number | null | boolean> }>; // partial is needed for strict mode
export type HttpBody = Json | FormData;

export interface RequestOpts {
    path: string;
    method: HttpMethod;
    headers?: HttpHeaders;
    query?: HttpQuery;
    body?: HttpBody;
    responseType?: 'json' | 'blob' | 'arraybuffer' | 'text';
}

export const encodeURI = (value: any) => encodeURIComponent(String(value));

const queryString = (params: HttpQuery): string => Object.keys(params)
    .map((key) => {
        const value = params[key];
        return (value instanceof Array)
            ? value.map((val) => \`\${encodeURI(key)}=\${encodeURI(val)}\`).join('&')
            : \`\${encodeURI(key)}=\${encodeURI(value)}\`;
    })
    .join('&');

// alias fallback for not being a breaking change
export const querystring = queryString;

/**
 * @deprecated
 */
export const throwIfRequired = (params: {[key: string]: any}, key: string, nickname: string) => {
    if (!params || params[key] == null) {
        throw new RequiredError(\`Required parameter \${key} was null or undefined when calling \${nickname}.\`);
    }
};

export const throwIfNullOrUndefined = (value: any, nickname?: string) => {
    if (value == null) {
        throw new Error(\`Parameter \\"\${value}\\" was null or undefined when calling \\"\${nickname}\\".\`);
    }
};

// alias for easier importing
export type RequestArgs = AjaxRequest;
export type ResponseArgs = AjaxResponse;
"
`;
