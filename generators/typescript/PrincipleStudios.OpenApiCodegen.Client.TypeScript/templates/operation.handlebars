{{>partial_header header}}
{{#with operation}}
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse, TransformRequest } from '@principlestudios/openapi-codegen-typescript';
{{#each imports}}
import {
{{#each members}}
    {{{.}}},
{{/each}}
} from '{{path}}';
{{/each}}

export type RequestParams = {
    {{#sharedParams}}
    {{paramName}}{{#unless required}}?{{/unless}}: {{{dataType}}}{{#isNullable}} | null{{/isNullable}};
    {{/sharedParams}}
};
export type RequestBodies = {
    {{#each requestBodies}}
    '{{requestBodyType}}': {{#unless isForm}}{{#allParams}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/allParams}}{{else}}{
        {{#allParams}}
        {{paramName}}{{#unless required}}?{{/unless}}: {{{dataType}}}{{#isNullable}} | null{{/isNullable}};
        {{/allParams}}
    }{{/unless}};
    {{/each}}
};

export type StructuredResponses = {
    {{#if responses.defaultResponse}}
    {{#if responses.defaultResponse.description}}
    /** {{responses.defaultResponse.description}} */
    {{/if}}
    'other': {
        {{#each responses.defaultResponse.content}}
        '{{mediaType}}': {{#if dataType}}{{{dataType}}}{{else}}undefined{{/if}};
        {{/each}}
    };
    {{/if}}
    {{#each responses.statusResponse as |response statusCode|}}
    {{#if response.description}}
    /** {{response.description}} */
    {{/if}}
    {{statusCode}}: {
        {{#each response.content}}
        '{{mediaType}}': {{#if dataType}}{{{dataType}}}{{else}}undefined{{/if}};
        {{/each}}
    };
    {{/each}}
};
export type Responses = {{#if responses.defaultResponse}}{{#each responses.defaultResponse.content}}
    | StandardResponse<'other', '{{mediaType}}', {{#if dataType}}{{{dataType}}}{{else}}undefined{{/if}}>{{/each}}{{/if}}{{!--
    --}}{{#each responses.statusResponse as |response statusCode|}}{{#each response.content}}
    | StandardResponse<{{statusCode}}, '{{mediaType}}', {{#if dataType}}{{{dataType}}}{{else}}undefined{{/if}}>{{/each}}{{/each}};

{{#if allowNoBody}}
export function {{{name}}}(params: RequestParams): RequestOpts;
{{/if}}
{{#if requestBodies.length}}
export function {{{name}}}<K extends keyof RequestBodies>(params: RequestParams, body: RequestBodies[K], mimeType: K): RequestOpts;
{{/if}}
export function {{{name}}}(params: RequestParams{{#if requestBodies.length}}, body: RequestBodies[keyof RequestBodies] | null = null, mimeType: keyof RequestBodies | null = null{{/if}}): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    {{#if requestBodies.length}}
    {{#if allowNoBody}}if (mimeType) {{/if}}throwIfNullOrUndefined(body, 'body');
    {{#if allowNoBody}}if (body)  {{/if}}throwIfNullOrUndefined(mimeType, 'mimeType');
    {{/if}}
    {{#each sharedParams}}
    {{#if required}}
    throwIfNullOrUndefined(params.{{{paramName}}}, '{{rawName}}');
    {{/if}}
    {{/each}}

    const headers: HttpHeaders = {};
    {{#if requestBodies.length}}
    if (mimeType) headers['Content-Type'] = mimeType;
    {{/if}}
    {{#each sharedParams}}
    {{#if isHeaderParam}}
    if (params.{{{paramName}}} !== undefined) headers['{{{rawName}}}'] = params.{{{paramName}}}; {{!-- TODO - openapi style/explode combo --}}
    {{/if}}
    {{/each}}

    {{#if hasQueryParams}}
    const query: HttpQuery = { {{!-- required parameters are used directly since they are already checked by throwIfNullOrUndefined  --}}
        {{#each sharedParams}}
        {{#if isQueryParam}}
        {{#if required}}
        {{#if dataTypeEnumerable}}
        '{{rawName}}': params.{{{paramName}}},
        {{else}}
        '{{rawName}}': params.{{{paramName}}},
        {{/if}}
        {{/if}}
        {{/if}}
        {{/each}}
    };
    {{#each sharedParams}}
    {{#if isQueryParam}}
    {{#unless required}}
    {{#if dataTypeEnumerable}}
    {{!-- TODO - openapi style/explode combo --}}
    if (params.{{{paramName}}} !== undefined) { query['{{rawName}}'] = params.{{{paramName}}}; }
    {{else}}
    if (params.{{{paramName}}} !== undefined) { query['{{rawName}}'] = params.{{{paramName}}}; }
    {{/if}}
    {{/unless}}
    {{/if}}
    {{/each}}

    {{/if}}
    {{#if hasFormRequest}}
    let actualBody: RequestBodies[keyof RequestBodies] | FormData = body;
    if (mimeType === 'application/x-www-form-urlencoded')
    {
        let formData = new FormData();
        {{#each requestBodies}}
        {{#each allParams}}
        {{#if isFormParam}}
        {{#if dataTypeEnumerable}}
        if (body!.{{{paramName}}} !== undefined) {
            {{!-- TODO - openapi style/explode combo --}}
            body!.{{{paramName}}}.forEach((element) => formData.append('{{rawName}}', element as any))
            {{!-- formData.append('{{rawName}}', body!.{{{paramName}}}.join(COLLECTION_FORMATS['{{collectionFormat}}'])); --}}
        }
        {{else}}
        if (body!.{{{paramName}}} !== undefined) { formData.append('{{rawName}}', body!.{{{paramName}}} as any); }
        {{/if}}
        {{/if}}
        {{/each}}
        {{/each}}
        actualBody = formData;
    }

    {{/if}}
    return {
        path: '{{{path}}}'{{#each sharedParams}}{{#if isPathParam}}.replace('{{{rawNameWithCurly}}}', encodeURI(params.{{{paramName}}})){{/if}}{{/each}},
        method: '{{httpMethod}}',
        headers,
        {{#if hasQueryParams}}
        query,
        {{/if}}
        {{#if requestBodies.length}}
        {{#if hasFormRequest}}
        body: actualBody,
        {{else}}
        body,
        {{/if}}
        {{/if}}
{{!-- {{#isResponseFile}}
        responseType: 'blob'
{{/isResponseFile}} --}}
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [{{#each responses.statusResponse as |response statusCode|}}
            {{statusCode}},{{/each}}
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
        {{!-- TODO - we need response headers in this, etc. --}}
    }) as Responses;

export const conversion: RequestConversion<RequestParams, {{#if requestBodies.length}}RequestBodies{{else}}{}{{/if}}, Responses, {{#if requestBodies.length}}{{#unless allowNoBody}}'body'{{else}}'optional'{{/unless}}{{else}}'no-body'{{/if}}> = {
    request: {{{name}}},
    response: responseConversion,
};

{{/with}}
