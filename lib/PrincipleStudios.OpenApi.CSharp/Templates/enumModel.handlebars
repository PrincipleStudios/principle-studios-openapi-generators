{{>partial_header Header}}
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace {{this.PackageName}}
{ {{#with Model as |Model|}}{{#if Description}}
    /// <summary>
    /// {{linewrap Description "
    /// "}}
    /// </summary>{{/if}}
    {{#if Model.IsString}}[global::System.Text.Json.Serialization.JsonConverter(typeof(global::PrincipleStudios.OpenApiCodegen.Json.Extensions.JsonStringEnumPropertyNameConverter))]
    [global::System.ComponentModel.TypeConverter("{{../this.PackageName}}.{{ClassName}}TypeConverter")]
    {{/if}}
    public enum {{ClassName}}
    {
        {{#each EnumVars as |EnumVar|}}
        /// <summary>
        /// Enum {{EnumVar.Name}} for {{{EnumVar.Value}}}
        /// </summary>{{#if Model.IsString}}
        [global::System.Text.Json.Serialization.JsonPropertyName("{{{EnumVar.Value}}}")]{{/if}}
        {{EnumVar.Name}} = {{#if Model.IsString}}{{@index}}{{else}}{{{EnumVar.Value}}}{{/if}},

        {{/each}}
    }

    public class {{ClassName}}TypeConverter : global::System.ComponentModel.TypeConverter
    {
        public override bool CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Type sourceType)
        {
            return sourceType == typeof(string);
        }

        public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Type? destinationType)
        {
            return destinationType == typeof(string);
        }

        public override object? ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Globalization.CultureInfo? culture, object value)
        {
            if (value is not string s) return null;
            switch (s)
            {
            {{#each EnumVars as |EnumVar|}}
                case "{{{EnumVar.Value}}}":
                    return {{../ClassName}}.{{EnumVar.Name}};
            {{/each}}
                default:
                    return null;
            }
        }

        public override object? ConvertTo(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Globalization.CultureInfo? culture, object? value, global::System.Type destinationType)
        {
            if (value == null) return null;
            if (destinationType != typeof(string)) return null;


            switch (({{ClassName}})value)
            {
            {{#each EnumVars as |EnumVar|}}
                case {{../ClassName}}.{{EnumVar.Name}}:
                    return "{{{EnumVar.Value}}}";
            {{/each}}
                default:
                    return null;
            }
        }
    }

{{/with}}
}