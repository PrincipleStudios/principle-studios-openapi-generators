{{>partial_header header}}
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace {{this.packageName}}
{ {{#with model as |model|}}{{#if description}}
    /// <summary>
    /// {{linewrap description "
    /// "}}
    /// </summary>{{/if}}
    {{#if model.isString}}[global::Newtonsoft.Json.JsonConverter(typeof(global::Newtonsoft.Json.Converters.StringEnumConverter))]
    [global::System.ComponentModel.TypeConverterAttribute(typeof({{className}}EnumConverter))]{{/if}}
    public enum {{className}}
    {
        {{#each enumVars as |enumVar|}}
        /// <summary>
        /// Enum {{enumVar.name}} for {{{enumVar.value}}}
        /// </summary>{{#if model.isString}}
        [global::System.Runtime.Serialization.EnumMember(Value = "{{{enumVar.value}}}")]{{/if}}
        {{enumVar.name}} = {{#if model.isString}}{{@index}}{{else}}{{{enumVar.value}}}{{/if}},

        {{/each}}
    }

    public class {{className}}EnumConverter : global::System.ComponentModel.TypeConverter
    {
        public override object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, object value)
        {
            var s = value as string;
            if (string.IsNullOrEmpty(s))
            {
                return null;
            }

            return global::Newtonsoft.Json.JsonConvert.DeserializeObject<{{className}}>(@"""" + value.ToString() + @"""");
        }
    }
{{/with}}
}