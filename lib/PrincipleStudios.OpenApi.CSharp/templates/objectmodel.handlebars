{{>partial_header header}}
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace {{this.packageName}}
{ {{#with model}}
    {{#if description}}/// <summary>
    /// {{linewrap description "
    /// "}}
    /// </summary>
    {{/if}}public partial class {{className}} : {{#if parent}}{{{parent}}}, {{/if}}IEquatable<{{className}}>
    {
        public {{className}}(
        {{#each vars}}    [JsonProperty(PropertyName="{{baseName}}"){{#if required}}, Required{{/if}}]{{!
        data type: }} {{{dataType}}}{{!
        name: }} {{name}}{{#unless @last}}, {{/unless}}
        {{/each}}) { {{#each vars}}
            this.{{name}} = {{name}};{{/each}}
        }

        {{#each vars}}
        /// <summary>
        /// Gets {{^if description}}{{{name}}}{{else}}{{description}}{{/if}}
        /// </summary>
        {{#if required}}
        [Required]
        {{/if}}
        [JsonProperty(PropertyName="{{baseName}}")]
        public {{{dataType}}} {{name}} { get; }

        {{/each}}
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals(({{classname}})obj);
        }

        public bool Equals({{classname}} other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return {{#each vars}}(
                {{name}} == other.{{name}} ||{{#if nullable}}
                {{name}} != null &&{{/if}}{{#unless isContainer}}
                {{name}}.Equals(other.{{name}}){{else}}
                {{name}}.SequenceEqual(other.{{name}}){{/unless}}
            ){{#unless @last}} && {{/unless}}{{else}}true{{/each}};
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                {{#each vars}}
                {{#if nullable}}if ({{name}} != null)
                    {{/if}}hashCode = hashCode * 59 + {{name}}.GetHashCode();
                {{/each}}
                return hashCode;
            }
        }
    }
{{/with}}
}