/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PrincipleStudios.Test
{ 
    public static class Operations
    {
        
        /// <remarks>
        /// Returns all pets from the system that the user has access to
        /// Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
        /// 
        /// Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
        /// 
        /// </remarks>
        /// <param name="tags">tags to filter by</param>
        /// <param name="limit">maximum number of results to return</param>
        public static global::System.Threading.Tasks.Task<global::System.Net.Http.HttpResponseMessage> SendFindPetsAsync(
            this global::System.Net.Http.HttpClient client,
            global::System.Collections.Generic.IEnumerable<string>? tags,
int? limit,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(FindPets(tags,limit));

        public static global::System.Net.Http.HttpRequestMessage FindPets(
            global::System.Collections.Generic.IEnumerable<string>? tags,
            int? limit
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Get, "/pets");


            return requestMessage;
        }

        public static global::System.Threading.Tasks.Task<IFindPetsTypeSafeResult> ParseFindPetsTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public interface IFindPetsTypeSafeResult
        {
            
            /// <summary>
            /// pet response
            /// </summary>
            public readonly struct Ok : IFindPetsTypeSafeResult
            {
                public global::System.Collections.Generic.IEnumerable<Pet> Body { get; }
                
            }
            
            
            public readonly struct OtherStatusCode : IFindPetsTypeSafeResult
            {
                public Error Body { get; }
                
            }
            
        }

        /// <remarks>
        /// Creates a new pet in the store. Duplicates are allowed
        /// </remarks>
        /// <param name="addPetBody"></param>
        public static global::System.Threading.Tasks.Task<global::System.Net.Http.HttpResponseMessage> SendAddPetAsync(
            this global::System.Net.Http.HttpClient client,
            NewPet addPetBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(AddPet(addPetBody));

        public static global::System.Net.Http.HttpRequestMessage AddPet(
            NewPet addPetBody
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Post, "/pets");
            requestMessage.Content = new global::System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(addPetBody), System.Text.Encoding.UTF8, "application/json");


            return requestMessage;
        }

        public static global::System.Threading.Tasks.Task<IAddPetTypeSafeResult> ParseAddPetTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public interface IAddPetTypeSafeResult
        {
            
            /// <summary>
            /// pet response
            /// </summary>
            public readonly struct Ok : IAddPetTypeSafeResult
            {
                public Pet Body { get; }
                
            }
            
            
            public readonly struct OtherStatusCode : IAddPetTypeSafeResult
            {
                public Error Body { get; }
                
            }
            
        }

        /// <remarks>
        /// Returns a user based on a single ID, if the user does not have access to the pet
        /// </remarks>
        /// <param name="id">ID of pet to fetch</param>
        public static global::System.Threading.Tasks.Task<global::System.Net.Http.HttpResponseMessage> SendFindPetByIdAsync(
            this global::System.Net.Http.HttpClient client,
            long id,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(FindPetById(id));

        public static global::System.Net.Http.HttpRequestMessage FindPetById(
            long id
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Get, "/pets/{id}"
                        .Replace("{" + "id" + "}", global::System.Web.HttpUtility.UrlEncode(id.ToString())));


            return requestMessage;
        }

        public static global::System.Threading.Tasks.Task<IFindPetByIdTypeSafeResult> ParseFindPetByIdTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public interface IFindPetByIdTypeSafeResult
        {
            
            /// <summary>
            /// pet response
            /// </summary>
            public readonly struct Ok : IFindPetByIdTypeSafeResult
            {
                public Pet Body { get; }
                
            }
            
            
            public readonly struct OtherStatusCode : IFindPetByIdTypeSafeResult
            {
                public Error Body { get; }
                
            }
            
        }

        /// <remarks>
        /// deletes a single pet based on the ID supplied
        /// </remarks>
        /// <param name="id">ID of pet to delete</param>
        public static global::System.Threading.Tasks.Task<global::System.Net.Http.HttpResponseMessage> SendDeletePetAsync(
            this global::System.Net.Http.HttpClient client,
            long id,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(DeletePet(id));

        public static global::System.Net.Http.HttpRequestMessage DeletePet(
            long id
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Delete, "/pets/{id}"
                        .Replace("{" + "id" + "}", global::System.Web.HttpUtility.UrlEncode(id.ToString())));


            return requestMessage;
        }

        public static global::System.Threading.Tasks.Task<IDeletePetTypeSafeResult> ParseDeletePetTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public interface IDeletePetTypeSafeResult
        {
            
            /// <summary>
            /// pet deleted
            /// </summary>
            public readonly struct NoContent : IDeletePetTypeSafeResult
            {
                
            }
            
            
            public readonly struct OtherStatusCode : IDeletePetTypeSafeResult
            {
                public Error Body { get; }
                
            }
            
        }
    }
}
