/*
 * OAuth Scopes Sample
 *
 * A sample API that uses oauth scopes
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    public static class Operations
    {
        
        /// <param name="data">base-64 encoded data</param>
        public static async global::System.Threading.Tasks.Task<GetInfoReturnType> GetInfo(
            this global::System.Net.Http.HttpClient client,
            byte[]? data,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => await (await client.SendAsync(GetInfo(data)).ConfigureAwait(false))
            .ParseGetInfo().ConfigureAwait(false);

        public static global::System.Net.Http.HttpRequestMessage GetInfo(
            byte[]? data
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Get, "api/info");


            return requestMessage;
        }

        public static async global::System.Threading.Tasks.Task<GetInfoReturnType?> ParseGetInfo(this global::System.Net.Http.HttpResponseMessage response)
        {
            switch ((int)response.StatusCode)
            { 
                case 200:
                     if (response.Content.Headers.ContentType.MediaType == "application/json") 
                        return new GetInfoReturnType.Ok
                        {
                            Response = response,
                            Body = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(await response.Content.ReadAsStringAsync()), 
                        };
                    break;
                
            }
            return new GetInfoReturnType
            {
                Response = response,
            };
        }

        public class GetInfoReturnType : global::System.IDisposable
        {
            public global::System.Net.Http.HttpResponseMessage Response { get; set; }

            void global::System.IDisposable.Dispose()
            {
                Response?.Dispose();
            }

            
            /// <summary>
            /// Sample Response
            /// </summary>
            public class Ok : GetInfoReturnType
            {
                public string Body { get; set; }
                
            }
            
        }
    }
}
