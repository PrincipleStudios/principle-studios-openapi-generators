/*
 * Dictionary Ref Demo
 *
 * A sample API that uses a ref for something C# could inline
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    public static class Operations
    {
        
        /// <param name="lookupRecordBody"></param>
        public static async global::System.Threading.Tasks.Task<LookupRecordReturnType> LookupRecord(
            this global::System.Net.Http.HttpClient client,
            global::System.Collections.Generic.Dictionary<string, string> lookupRecordBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => await (await client.SendAsync(LookupRecord(lookupRecordBody)).ConfigureAwait(false))
            .ParseLookupRecord().ConfigureAwait(false);

        public static global::System.Net.Http.HttpRequestMessage LookupRecord(
            global::System.Collections.Generic.Dictionary<string, string> lookupRecordBody
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Post, "address");
            requestMessage.Content = global::System.Net.Http.Json.JsonContent.Create<global::System.Collections.Generic.Dictionary<string, string>>(lookupRecordBody, global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json"));


            return requestMessage;
        }

        public static async global::System.Threading.Tasks.Task<LookupRecordReturnType?> ParseLookupRecord(this global::System.Net.Http.HttpResponseMessage response)
        {
            switch ((int)response.StatusCode)
            { 
                case 200:
                     if (response.Content.Headers.ContentType.MediaType == "application/json") 
                        return new LookupRecordReturnType.Ok
                        {
                            Response = response,
                            Body = await global::System.Text.Json.JsonSerializer.DeserializeAsync<global::System.Collections.Generic.Dictionary<string, string>>(await response.Content.ReadAsStreamAsync()), 
                        };
                    break;
                
            }
            return new LookupRecordReturnType
            {
                Response = response,
            };
        }

        public class LookupRecordReturnType : global::System.IDisposable
        {
            public global::System.Net.Http.HttpResponseMessage Response { get; set; }

            void global::System.IDisposable.Dispose()
            {
                Response?.Dispose();
            }

            
            
            public class Ok : LookupRecordReturnType
            {
                public global::System.Collections.Generic.Dictionary<string, string> Body { get; set; }
                
            }
            
        }
    }
}
