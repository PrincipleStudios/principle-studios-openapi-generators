/*
 * Headers Sample
 *
 * A sample API that demonstrates header parameters/responses
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    public static class Operations
    {
        
        /// <param name="xData">base-64 encoded data</param>
        public static async global::System.Threading.Tasks.Task<GetInfoReturnType> GetInfo(
            this global::System.Net.Http.HttpClient client,
            byte[] xData,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => await (await client.SendAsync(GetInfo(xData)).ConfigureAwait(false))
            .ParseGetInfo().ConfigureAwait(false);

        public static global::System.Net.Http.HttpRequestMessage GetInfo(
            byte[] xData
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Get, "info");


            requestMessage.Headers.Add("", xData.ToString());
            return requestMessage;
        }

        public static async global::System.Threading.Tasks.Task<GetInfoReturnType?> ParseGetInfo(this global::System.Net.Http.HttpResponseMessage response)
        {
            switch ((int)response.StatusCode)
            { 
                case 200:
                     if (response.Content.Headers.ContentType.MediaType == "application/json") 
                        return new GetInfoReturnType.Ok
                        {
                            Response = response,
                            Body = await global::System.Text.Json.JsonSerializer.DeserializeAsync<global::System.Collections.Generic.Dictionary<string, string>>(await response.Content.ReadAsStreamAsync()), 
                        };
                    break;
                
                case 204:
                    
                        return new GetInfoReturnType.NoContent
                        {
                            Response = response,
                        };
                    break;
                
                default: 
                    
                        return new GetInfoReturnType.OtherStatusCode
                        {
                            Response = response,
                        }; 
                    break;
            }
            return new GetInfoReturnType
            {
                Response = response,
            };
        }

        public class GetInfoReturnType : global::System.IDisposable
        {
            public global::System.Net.Http.HttpResponseMessage Response { get; set; }

            void global::System.IDisposable.Dispose()
            {
                Response?.Dispose();
            }

            
            /// <summary>
            /// Sample Response
            /// </summary>
            public class Ok : GetInfoReturnType
            {
                public global::System.Collections.Generic.Dictionary<string, string> Body { get; set; }
                
            }
            
            /// <summary>
            /// Sample Response
            /// </summary>
            public class NoContent : GetInfoReturnType
            {
                
            }
            
            
            public class OtherStatusCode : GetInfoReturnType
            {
                
            }
            
        }

        public static async global::System.Threading.Tasks.Task<_RedirectReturnType> _Redirect(
            this global::System.Net.Http.HttpClient client,
                        global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => await (await client.SendAsync(_Redirect()).ConfigureAwait(false))
            .Parse_Redirect().ConfigureAwait(false);

        public static global::System.Net.Http.HttpRequestMessage _Redirect(
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Get, "redirect");


            return requestMessage;
        }

        public static async global::System.Threading.Tasks.Task<_RedirectReturnType?> Parse_Redirect(this global::System.Net.Http.HttpResponseMessage response)
        {
            switch ((int)response.StatusCode)
            { 
                case 302:
                    
                        return new _RedirectReturnType.Redirect
                        {
                            Response = response,
                        };
                    break;
                
            }
            return new _RedirectReturnType
            {
                Response = response,
            };
        }

        public class _RedirectReturnType : global::System.IDisposable
        {
            public global::System.Net.Http.HttpResponseMessage Response { get; set; }

            void global::System.IDisposable.Dispose()
            {
                Response?.Dispose();
            }

            
            /// <summary>
            /// Redirection Response
            /// </summary>
            public class Redirect : _RedirectReturnType
            {
                
            }
            
        }
    }
}
