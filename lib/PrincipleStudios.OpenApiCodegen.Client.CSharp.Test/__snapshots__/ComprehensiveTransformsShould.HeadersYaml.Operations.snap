/*
 * Headers Sample
 *
 * A sample API that demonstrates header parameters/responses
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    public static class Operations
    {
        
        /// <param name="xData">base-64 encoded data</param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendGetInfoAsync(
            this global::System.Net.Http.HttpClient client,
            byte[] xData,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(GetInfo(xData));

        public static global::System.Net.Http.HttpRequestMessage GetInfo(
            byte[] xData
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<GetInfoTypeSafeResult> ParseGetInfoTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct GetInfoTypeSafeResult
        {
            
            /// <summary>
            /// Sample Response
            /// </summary>
            public readonly struct Ok : GetInfoTypeSafeResult
            {
                public global::System.Collections.Generic.Dictionary<string, string> Body { get; set; }
                
                public string headerXData { get; set; }
            }
            
            /// <summary>
            /// Sample Response
            /// </summary>
            public readonly struct NoContent : GetInfoTypeSafeResult
            {
                
                public string headerXData { get; set; }
            }
            
            
            public readonly struct OtherStatusCode : GetInfoTypeSafeResult
            {
                
                public string headerXData { get; set; }
                public string headerXDiag { get; set; }
            }
            
        }

        public static Task<global::System.Net.Http.HttpResponseMessage> Send_RedirectAsync(
            this global::System.Net.Http.HttpClient client,
                        global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(_Redirect());

        public static global::System.Net.Http.HttpRequestMessage _Redirect(
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<_RedirectTypeSafeResult> Parse_RedirectTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct _RedirectTypeSafeResult
        {
            
            /// <summary>
            /// Redirection Response
            /// </summary>
            public readonly struct Redirect : _RedirectTypeSafeResult
            {
                
                public string headerLocation { get; set; }
            }
            
        }
    }
}
