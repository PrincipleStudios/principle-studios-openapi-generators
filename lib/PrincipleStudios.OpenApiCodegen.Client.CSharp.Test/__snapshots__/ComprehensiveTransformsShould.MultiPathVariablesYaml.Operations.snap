/*
 * Path with multiple variables Demo
 *
 * A sample API document that has multiple variables in the path
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    public static class Operations
    {
        
        /// <param name="id"></param>
        /// <param name="size"></param>
        public static async global::System.Threading.Tasks.Task<GetPhotoReturnType> GetPhoto(
            this global::System.Net.Http.HttpClient client,
            string id,
int size,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => await (await client.SendAsync(GetPhoto(id,size)).ConfigureAwait(false))
            .ParseGetPhoto().ConfigureAwait(false);

        public static global::System.Net.Http.HttpRequestMessage GetPhoto(
            string id,
            int size
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Get, "photo/{id}/{size}"
                        .Replace("{" + "id" + "}", global::System.Web.HttpUtility.UrlEncode(id.ToString()))
                        .Replace("{" + "size" + "}", global::System.Web.HttpUtility.UrlEncode(size.ToString())));


            return requestMessage;
        }

        public static async global::System.Threading.Tasks.Task<GetPhotoReturnType?> ParseGetPhoto(this global::System.Net.Http.HttpResponseMessage response)
        {
            switch ((int)response.StatusCode)
            { 
                case 200:
                     if (response.Content.Headers.ContentType.MediaType == "application/octet-stream") 
                        return new GetPhotoReturnType.Ok
                        {
                            Response = response,
                            Body = await global::System.Text.Json.JsonSerializer.DeserializeAsync<global::System.IO.Stream>(await response.Content.ReadAsStreamAsync()), 
                        };
                    break;
                
            }
            return new GetPhotoReturnType
            {
                Response = response,
            };
        }

        public class GetPhotoReturnType : global::System.IDisposable
        {
            public global::System.Net.Http.HttpResponseMessage Response { get; set; }

            void global::System.IDisposable.Dispose()
            {
                Response?.Dispose();
            }

            
            /// <summary>
            /// Photo was found and resized
            /// </summary>
            public class Ok : GetPhotoReturnType
            {
                public global::System.IO.Stream Body { get; set; }
                
            }
            
        }

        /// <param name="id"></param>
        /// <param name="size"></param>
        /// <param name="format">Mime type of expected format</param>
        public static async global::System.Threading.Tasks.Task<GetPhotoAsFormatReturnType> GetPhotoAsFormat(
            this global::System.Net.Http.HttpClient client,
            string id,
global::PrincipleStudios.OpenApiCodegen.Json.Extensions.Optional<int>? size,
global::PrincipleStudios.OpenApiCodegen.Json.Extensions.Optional<string>? format,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => await (await client.SendAsync(GetPhotoAsFormat(id,size,format)).ConfigureAwait(false))
            .ParseGetPhotoAsFormat().ConfigureAwait(false);

        public static global::System.Net.Http.HttpRequestMessage GetPhotoAsFormat(
            string id,
            global::PrincipleStudios.OpenApiCodegen.Json.Extensions.Optional<int>? size,
            global::PrincipleStudios.OpenApiCodegen.Json.Extensions.Optional<string>? format
            )
        {
            var query = global::System.Web.HttpUtility.ParseQueryString(string.Empty); 
            if (size != null)
                query.Add("size", global::System.Convert.ToString(global::PrincipleStudios.OpenApiCodegen.Json.Extensions.Optional.GetValueOrThrow(size)));
            if (format != null)
                query.Add("format", global::System.Convert.ToString(global::PrincipleStudios.OpenApiCodegen.Json.Extensions.Optional.GetValueOrThrow(format)));

            var requestMessage = new global::System.Net.Http.HttpRequestMessage(
                global::System.Net.Http.HttpMethod.Get,
                new global::System.Uri("photo/{id}"
                    .Replace("{" + "id" + "}", global::System.Web.HttpUtility.UrlEncode((id).ToString()))
                    + "?" + query.ToString(),
                    global::System.UriKind.Relative));


            return requestMessage;
        }

        public static async global::System.Threading.Tasks.Task<GetPhotoAsFormatReturnType?> ParseGetPhotoAsFormat(this global::System.Net.Http.HttpResponseMessage response)
        {
            switch ((int)response.StatusCode)
            { 
                case 200:
                     if (response.Content.Headers.ContentType.MediaType == "application/octet-stream") 
                        return new GetPhotoAsFormatReturnType.Ok
                        {
                            Response = response,
                            Body = await global::System.Text.Json.JsonSerializer.DeserializeAsync<global::System.IO.Stream>(await response.Content.ReadAsStreamAsync()), 
                        };
                    break;
                
            }
            return new GetPhotoAsFormatReturnType
            {
                Response = response,
            };
        }

        public class GetPhotoAsFormatReturnType : global::System.IDisposable
        {
            public global::System.Net.Http.HttpResponseMessage Response { get; set; }

            void global::System.IDisposable.Dispose()
            {
                Response?.Dispose();
            }

            
            /// <summary>
            /// Photo was found, resized, and reformatted
            /// </summary>
            public class Ok : GetPhotoAsFormatReturnType
            {
                public global::System.IO.Stream Body { get; set; }
                
            }
            
        }
    }
}
