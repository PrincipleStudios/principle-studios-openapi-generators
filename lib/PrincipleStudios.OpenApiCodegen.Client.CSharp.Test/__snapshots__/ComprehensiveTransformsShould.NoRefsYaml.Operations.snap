/*
 * No Refs Demo
 *
 * A sample API that uses no refs
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    public static class Operations
    {
        
        /// <param name="lookupRecordBody"></param>
        public static global::System.Threading.Tasks.Task<global::System.Net.Http.HttpResponseMessage> SendLookupRecordAsync(
            this global::System.Net.Http.HttpClient client,
            LookupRecordRequest lookupRecordBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(LookupRecord(lookupRecordBody));

        public static global::System.Net.Http.HttpRequestMessage LookupRecord(
            LookupRecordRequest lookupRecordBody
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Post, "/address");
            requestMessage.Content = new global::System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(lookupRecordBody), System.Text.Encoding.UTF8, "application/json");


            return requestMessage;
        }

        public static global::System.Threading.Tasks.Task<ILookupRecordTypeSafeResult> ParseLookupRecordTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public interface ILookupRecordTypeSafeResult
        {
            
            
            public readonly struct Ok : ILookupRecordTypeSafeResult
            {
                public LookupRecordResponse Body { get; }
                
            }
            
            
            public readonly struct Conflict : ILookupRecordTypeSafeResult
            {
                public LookupRecordConflictResponse Body { get; }
                
            }
            
            
            public readonly struct OtherStatusCode : ILookupRecordTypeSafeResult
            {
                public LookupRecordOtherResponse Body { get; }
                
            }
            
        }

        /// <param name="id"></param>
        public static global::System.Threading.Tasks.Task<global::System.Net.Http.HttpResponseMessage> SendGetPhotoAsync(
            this global::System.Net.Http.HttpClient client,
            string id,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(GetPhoto(id));

        public static global::System.Net.Http.HttpRequestMessage GetPhoto(
            string id
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Get, "/photo/{id}"
                        .Replace("{" + "id" + "}", global::System.Web.HttpUtility.UrlEncode(id.ToString())));


            return requestMessage;
        }

        public static global::System.Threading.Tasks.Task<IGetPhotoTypeSafeResult> ParseGetPhotoTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public interface IGetPhotoTypeSafeResult
        {
            
            
            public readonly struct Ok : IGetPhotoTypeSafeResult
            {
                public global::System.IO.Stream Body { get; }
                
            }
            
            
            public readonly struct OtherStatusCode : IGetPhotoTypeSafeResult
            {
                public GetPhotoOtherResponse Body { get; }
                
            }
            
        }
    }
}
