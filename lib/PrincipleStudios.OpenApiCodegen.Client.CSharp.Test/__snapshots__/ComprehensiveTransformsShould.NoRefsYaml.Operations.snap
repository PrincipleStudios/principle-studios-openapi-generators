/*
 * No Refs Demo
 *
 * A sample API that uses no refs
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    public static class Operations
    {
        
        /// <param name="lookupRecordBody"></param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendLookupRecordAsync(
            this global::System.Net.Http.HttpClient client,
            LookupRecordRequest lookupRecordBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(LookupRecord(lookupRecordBody));

        public static global::System.Net.Http.HttpRequestMessage LookupRecord(
            LookupRecordRequest lookupRecordBody
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<LookupRecordTypeSafeResult> ParseLookupRecordTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct LookupRecordTypeSafeResult
        {
            
            
            public readonly struct Ok : LookupRecordTypeSafeResult
            {
                public LookupRecordResponse Body { get; set; }
                
            }
            
            
            public readonly struct Conflict : LookupRecordTypeSafeResult
            {
                public LookupRecordConflictResponse Body { get; set; }
                
            }
            
            
            public readonly struct OtherStatusCode : LookupRecordTypeSafeResult
            {
                public LookupRecordOtherResponse Body { get; set; }
                
            }
            
        }

        /// <param name="id"></param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendGetPhotoAsync(
            this global::System.Net.Http.HttpClient client,
            string id,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(GetPhoto(id));

        public static global::System.Net.Http.HttpRequestMessage GetPhoto(
            string id
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<GetPhotoTypeSafeResult> ParseGetPhotoTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct GetPhotoTypeSafeResult
        {
            
            
            public readonly struct Ok : GetPhotoTypeSafeResult
            {
                public global::System.IO.Stream Body { get; set; }
                
            }
            
            
            public readonly struct OtherStatusCode : GetPhotoTypeSafeResult
            {
                public GetPhotoOtherResponse Body { get; set; }
                
            }
            
        }
    }
}
