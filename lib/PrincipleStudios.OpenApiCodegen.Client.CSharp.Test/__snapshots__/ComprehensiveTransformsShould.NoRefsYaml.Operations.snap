/*
 * No Refs Demo
 *
 * A sample API that uses no refs
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    public static class Operations
    {
        
        /// <param name="lookupRecordBody"></param>
        public static async global::System.Threading.Tasks.Task<LookupRecordReturnType> LookupRecord(
            this global::System.Net.Http.HttpClient client,
            LookupRecordRequest lookupRecordBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => await (await client.SendAsync(LookupRecord(lookupRecordBody)).ConfigureAwait(false))
            .ParseLookupRecord().ConfigureAwait(false);

        public static global::System.Net.Http.HttpRequestMessage LookupRecord(
            LookupRecordRequest lookupRecordBody
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Post, "address");
            requestMessage.Content = new global::System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(lookupRecordBody), System.Text.Encoding.UTF8, "application/json");


            return requestMessage;
        }

        public static async global::System.Threading.Tasks.Task<LookupRecordReturnType?> ParseLookupRecord(this global::System.Net.Http.HttpResponseMessage response)
        {
            switch ((int)response.StatusCode)
            { 
                case 200:
                     if (response.Content.Headers.ContentType.MediaType == "application/json") 
                        return new LookupRecordReturnType.Ok
                        {
                            Response = response,
                            Body = Newtonsoft.Json.JsonConvert.DeserializeObject<LookupRecordResponse>(await response.Content.ReadAsStringAsync()), 
                        };
                    break;
                
                case 409:
                     if (response.Content.Headers.ContentType.MediaType == "application/json") 
                        return new LookupRecordReturnType.Conflict
                        {
                            Response = response,
                            Body = Newtonsoft.Json.JsonConvert.DeserializeObject<LookupRecordConflictResponse>(await response.Content.ReadAsStringAsync()), 
                        };
                    break;
                
                default: 
                     if (response.Content.Headers.ContentType.MediaType == "application/json") 
                        return new LookupRecordReturnType.OtherStatusCode
                        {
                            Response = response,
                            Body = Newtonsoft.Json.JsonConvert.DeserializeObject<LookupRecordOtherResponse>(await response.Content.ReadAsStringAsync()), 
                        }; 
                    break;
            }
            return new LookupRecordReturnType
            {
                Response = response,
            };
        }

        public class LookupRecordReturnType : global::System.IDisposable
        {
            public global::System.Net.Http.HttpResponseMessage Response { get; set; }

            void global::System.IDisposable.Dispose()
            {
                Response?.Dispose();
            }

            
            /// <summary>
            /// OK
            /// </summary>
            public class Ok : LookupRecordReturnType
            {
                public LookupRecordResponse Body { get; set; }
                
            }
            
            /// <summary>
            /// Conflict
            /// </summary>
            public class Conflict : LookupRecordReturnType
            {
                public LookupRecordConflictResponse Body { get; set; }
                
            }
            
            
            public class OtherStatusCode : LookupRecordReturnType
            {
                public LookupRecordOtherResponse Body { get; set; }
                
            }
            
        }

        /// <param name="id"></param>
        public static async global::System.Threading.Tasks.Task<GetPhotoReturnType> GetPhoto(
            this global::System.Net.Http.HttpClient client,
            string id,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => await (await client.SendAsync(GetPhoto(id)).ConfigureAwait(false))
            .ParseGetPhoto().ConfigureAwait(false);

        public static global::System.Net.Http.HttpRequestMessage GetPhoto(
            string id
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Get, "photo/{id}"
                        .Replace("{" + "id" + "}", global::System.Web.HttpUtility.UrlEncode(id.ToString())));


            return requestMessage;
        }

        public static async global::System.Threading.Tasks.Task<GetPhotoReturnType?> ParseGetPhoto(this global::System.Net.Http.HttpResponseMessage response)
        {
            switch ((int)response.StatusCode)
            { 
                case 200:
                     if (response.Content.Headers.ContentType.MediaType == "application/octet-stream") 
                        return new GetPhotoReturnType.Ok
                        {
                            Response = response,
                            Body = Newtonsoft.Json.JsonConvert.DeserializeObject<global::System.IO.Stream>(await response.Content.ReadAsStringAsync()), 
                        };
                    break;
                
                default: 
                     if (response.Content.Headers.ContentType.MediaType == "application/json") 
                        return new GetPhotoReturnType.OtherStatusCode
                        {
                            Response = response,
                            Body = Newtonsoft.Json.JsonConvert.DeserializeObject<GetPhotoOtherResponse>(await response.Content.ReadAsStringAsync()), 
                        }; 
                    break;
            }
            return new GetPhotoReturnType
            {
                Response = response,
            };
        }

        public class GetPhotoReturnType : global::System.IDisposable
        {
            public global::System.Net.Http.HttpResponseMessage Response { get; set; }

            void global::System.IDisposable.Dispose()
            {
                Response?.Dispose();
            }

            
            /// <summary>
            /// Photo found
            /// </summary>
            public class Ok : GetPhotoReturnType
            {
                public global::System.IO.Stream Body { get; set; }
                
            }
            
            
            public class OtherStatusCode : GetPhotoReturnType
            {
                public GetPhotoOtherResponse Body { get; set; }
                
            }
            
        }
    }
}
