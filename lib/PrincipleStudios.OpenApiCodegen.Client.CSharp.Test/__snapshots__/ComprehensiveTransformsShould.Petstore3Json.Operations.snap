/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    public static class Operations
    {
        
        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <param name="addPetBody"></param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendAddPetAsync(
            this global::System.Net.Http.HttpClient client,
            Pet addPetBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(AddPet(addPetBody));

        public static global::System.Net.Http.HttpRequestMessage AddPet(
            Pet addPetBody
            )
        {
            throw new global::System.NotImplementedException();
        }


        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <param name="addPetBody"></param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendAddPetAsync(
            this global::System.Net.Http.HttpClient client,
            Pet addPetBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(AddPet(addPetBody));

        public static global::System.Net.Http.HttpRequestMessage AddPet(
            Pet addPetBody
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<AddPetTypeSafeResult> ParseAddPetTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct AddPetTypeSafeResult
        {
            
            /// <summary>
            /// Invalid input
            /// </summary>
            public readonly struct MethodNotAllowed : AddPetTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <param name="updatePetBody"></param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendUpdatePetAsync(
            this global::System.Net.Http.HttpClient client,
            Pet updatePetBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(UpdatePet(updatePetBody));

        public static global::System.Net.Http.HttpRequestMessage UpdatePet(
            Pet updatePetBody
            )
        {
            throw new global::System.NotImplementedException();
        }


        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <param name="updatePetBody"></param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendUpdatePetAsync(
            this global::System.Net.Http.HttpClient client,
            Pet updatePetBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(UpdatePet(updatePetBody));

        public static global::System.Net.Http.HttpRequestMessage UpdatePet(
            Pet updatePetBody
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<UpdatePetTypeSafeResult> ParseUpdatePetTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct UpdatePetTypeSafeResult
        {
            
            /// <summary>
            /// Invalid ID supplied
            /// </summary>
            public readonly struct BadRequest : UpdatePetTypeSafeResult
            {
                
            }
            
            /// <summary>
            /// Pet not found
            /// </summary>
            public readonly struct NotFound : UpdatePetTypeSafeResult
            {
                
            }
            
            /// <summary>
            /// Validation exception
            /// </summary>
            public readonly struct MethodNotAllowed : UpdatePetTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <remarks>
        /// Multiple status values can be provided with comma separated strings
        /// </remarks>
        /// <param name="status">Status values that need to be considered for filter</param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendFindPetsByStatusAsync(
            this global::System.Net.Http.HttpClient client,
            global::System.Collections.Generic.IEnumerable<FindPetsByStatusStatusItem> status,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(FindPetsByStatus(status));

        public static global::System.Net.Http.HttpRequestMessage FindPetsByStatus(
            global::System.Collections.Generic.IEnumerable<FindPetsByStatusStatusItem> status
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<FindPetsByStatusTypeSafeResult> ParseFindPetsByStatusTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct FindPetsByStatusTypeSafeResult
        {
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationXmlOk : FindPetsByStatusTypeSafeResult
            {
                public global::System.Collections.Generic.IEnumerable<Pet> Body { get; set; }
                
            }
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationJsonOk : FindPetsByStatusTypeSafeResult
            {
                public global::System.Collections.Generic.IEnumerable<Pet> Body { get; set; }
                
            }
            
            /// <summary>
            /// Invalid status value
            /// </summary>
            public readonly struct BadRequest : FindPetsByStatusTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <remarks>
        /// Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
        /// </remarks>
        /// <param name="tags">Tags to filter by</param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendFindPetsByTagsAsync(
            this global::System.Net.Http.HttpClient client,
            global::System.Collections.Generic.IEnumerable<string> tags,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(FindPetsByTags(tags));

        public static global::System.Net.Http.HttpRequestMessage FindPetsByTags(
            global::System.Collections.Generic.IEnumerable<string> tags
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<FindPetsByTagsTypeSafeResult> ParseFindPetsByTagsTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct FindPetsByTagsTypeSafeResult
        {
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationXmlOk : FindPetsByTagsTypeSafeResult
            {
                public global::System.Collections.Generic.IEnumerable<Pet> Body { get; set; }
                
            }
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationJsonOk : FindPetsByTagsTypeSafeResult
            {
                public global::System.Collections.Generic.IEnumerable<Pet> Body { get; set; }
                
            }
            
            /// <summary>
            /// Invalid tag value
            /// </summary>
            public readonly struct BadRequest : FindPetsByTagsTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <param name="petId">ID of pet to return</param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendGetPetByIdAsync(
            this global::System.Net.Http.HttpClient client,
            long petId,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(GetPetById(petId));

        public static global::System.Net.Http.HttpRequestMessage GetPetById(
            long petId
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<GetPetByIdTypeSafeResult> ParseGetPetByIdTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct GetPetByIdTypeSafeResult
        {
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationXmlOk : GetPetByIdTypeSafeResult
            {
                public Pet Body { get; set; }
                
            }
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationJsonOk : GetPetByIdTypeSafeResult
            {
                public Pet Body { get; set; }
                
            }
            
            /// <summary>
            /// Invalid ID supplied
            /// </summary>
            public readonly struct BadRequest : GetPetByIdTypeSafeResult
            {
                
            }
            
            /// <summary>
            /// Pet not found
            /// </summary>
            public readonly struct NotFound : GetPetByIdTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name"></param>
        /// <param name="status"></param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendUpdatePetWithFormAsync(
            this global::System.Net.Http.HttpClient client,
            long petId,
string? name,
string? status,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(UpdatePetWithForm(petId,name,status));

        public static global::System.Net.Http.HttpRequestMessage UpdatePetWithForm(
            long petId,
            string? name,
            string? status
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<UpdatePetWithFormTypeSafeResult> ParseUpdatePetWithFormTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct UpdatePetWithFormTypeSafeResult
        {
            
            /// <summary>
            /// Invalid input
            /// </summary>
            public readonly struct MethodNotAllowed : UpdatePetWithFormTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Deletes a pet
        /// </summary>
        /// <param name="apiKey"></param>
        /// <param name="petId">Pet id to delete</param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendDeletePetAsync(
            this global::System.Net.Http.HttpClient client,
            string? apiKey,
long petId,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(DeletePet(apiKey,petId));

        public static global::System.Net.Http.HttpRequestMessage DeletePet(
            string? apiKey,
            long petId
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<DeletePetTypeSafeResult> ParseDeletePetTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct DeletePetTypeSafeResult
        {
            
            /// <summary>
            /// Invalid ID supplied
            /// </summary>
            public readonly struct BadRequest : DeletePetTypeSafeResult
            {
                
            }
            
            /// <summary>
            /// Pet not found
            /// </summary>
            public readonly struct NotFound : DeletePetTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// uploads an image
        /// </summary>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="uploadFileBody"></param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendUploadFileAsync(
            this global::System.Net.Http.HttpClient client,
            long petId,
global::System.IO.Stream uploadFileBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(UploadFile(petId,uploadFileBody));

        public static global::System.Net.Http.HttpRequestMessage UploadFile(
            long petId,
            global::System.IO.Stream uploadFileBody
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<UploadFileTypeSafeResult> ParseUploadFileTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct UploadFileTypeSafeResult
        {
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct Ok : UploadFileTypeSafeResult
            {
                public ApiResponse Body { get; set; }
                
            }
            
        }

        /// <summary>
        /// Returns pet inventories by status
        /// </summary>
        /// <remarks>
        /// Returns a map of status codes to quantities
        /// </remarks>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendGetInventoryAsync(
            this global::System.Net.Http.HttpClient client,
                        global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(GetInventory());

        public static global::System.Net.Http.HttpRequestMessage GetInventory(
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<GetInventoryTypeSafeResult> ParseGetInventoryTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct GetInventoryTypeSafeResult
        {
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct Ok : GetInventoryTypeSafeResult
            {
                public global::System.Collections.Generic.Dictionary<string, int> Body { get; set; }
                
            }
            
        }

        /// <summary>
        /// Place an order for a pet
        /// </summary>
        /// <param name="placeOrderBody"></param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendPlaceOrderAsync(
            this global::System.Net.Http.HttpClient client,
            Order placeOrderBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(PlaceOrder(placeOrderBody));

        public static global::System.Net.Http.HttpRequestMessage PlaceOrder(
            Order placeOrderBody
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<PlaceOrderTypeSafeResult> ParsePlaceOrderTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct PlaceOrderTypeSafeResult
        {
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationXmlOk : PlaceOrderTypeSafeResult
            {
                public Order Body { get; set; }
                
            }
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationJsonOk : PlaceOrderTypeSafeResult
            {
                public Order Body { get; set; }
                
            }
            
            /// <summary>
            /// Invalid Order
            /// </summary>
            public readonly struct BadRequest : PlaceOrderTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <remarks>
        /// For valid response try integer IDs with value &gt;= 1 and &lt;= 10. Other values will generated exceptions
        /// </remarks>
        /// <param name="orderId">ID of pet that needs to be fetched</param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendGetOrderByIdAsync(
            this global::System.Net.Http.HttpClient client,
            long orderId,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(GetOrderById(orderId));

        public static global::System.Net.Http.HttpRequestMessage GetOrderById(
            long orderId
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<GetOrderByIdTypeSafeResult> ParseGetOrderByIdTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct GetOrderByIdTypeSafeResult
        {
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationXmlOk : GetOrderByIdTypeSafeResult
            {
                public Order Body { get; set; }
                
            }
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationJsonOk : GetOrderByIdTypeSafeResult
            {
                public Order Body { get; set; }
                
            }
            
            /// <summary>
            /// Invalid ID supplied
            /// </summary>
            public readonly struct BadRequest : GetOrderByIdTypeSafeResult
            {
                
            }
            
            /// <summary>
            /// Order not found
            /// </summary>
            public readonly struct NotFound : GetOrderByIdTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Delete purchase order by ID
        /// </summary>
        /// <remarks>
        /// For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
        /// </remarks>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendDeleteOrderAsync(
            this global::System.Net.Http.HttpClient client,
            long orderId,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(DeleteOrder(orderId));

        public static global::System.Net.Http.HttpRequestMessage DeleteOrder(
            long orderId
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<DeleteOrderTypeSafeResult> ParseDeleteOrderTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct DeleteOrderTypeSafeResult
        {
            
            /// <summary>
            /// Invalid ID supplied
            /// </summary>
            public readonly struct BadRequest : DeleteOrderTypeSafeResult
            {
                
            }
            
            /// <summary>
            /// Order not found
            /// </summary>
            public readonly struct NotFound : DeleteOrderTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// This can only be done by the logged in user.
        /// </remarks>
        /// <param name="createUserBody"></param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendCreateUserAsync(
            this global::System.Net.Http.HttpClient client,
            User createUserBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(CreateUser(createUserBody));

        public static global::System.Net.Http.HttpRequestMessage CreateUser(
            User createUserBody
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<CreateUserTypeSafeResult> ParseCreateUserTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct CreateUserTypeSafeResult
        {
            
            
            public readonly struct OtherStatusCode : CreateUserTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <param name="createUsersWithArrayInputBody"></param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendCreateUsersWithArrayInputAsync(
            this global::System.Net.Http.HttpClient client,
            global::System.Collections.Generic.IEnumerable<User> createUsersWithArrayInputBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(CreateUsersWithArrayInput(createUsersWithArrayInputBody));

        public static global::System.Net.Http.HttpRequestMessage CreateUsersWithArrayInput(
            global::System.Collections.Generic.IEnumerable<User> createUsersWithArrayInputBody
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<CreateUsersWithArrayInputTypeSafeResult> ParseCreateUsersWithArrayInputTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct CreateUsersWithArrayInputTypeSafeResult
        {
            
            
            public readonly struct OtherStatusCode : CreateUsersWithArrayInputTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <param name="createUsersWithListInputBody"></param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendCreateUsersWithListInputAsync(
            this global::System.Net.Http.HttpClient client,
            global::System.Collections.Generic.IEnumerable<User> createUsersWithListInputBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(CreateUsersWithListInput(createUsersWithListInputBody));

        public static global::System.Net.Http.HttpRequestMessage CreateUsersWithListInput(
            global::System.Collections.Generic.IEnumerable<User> createUsersWithListInputBody
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<CreateUsersWithListInputTypeSafeResult> ParseCreateUsersWithListInputTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct CreateUsersWithListInputTypeSafeResult
        {
            
            
            public readonly struct OtherStatusCode : CreateUsersWithListInputTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Logs user into the system
        /// </summary>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendLoginUserAsync(
            this global::System.Net.Http.HttpClient client,
            string username,
string password,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(LoginUser(username,password));

        public static global::System.Net.Http.HttpRequestMessage LoginUser(
            string username,
            string password
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<LoginUserTypeSafeResult> ParseLoginUserTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct LoginUserTypeSafeResult
        {
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationXmlOk : LoginUserTypeSafeResult
            {
                public string Body { get; set; }
                
                public string headerXRateLimit { get; set; }
                public string headerXExpiresAfter { get; set; }
            }
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationJsonOk : LoginUserTypeSafeResult
            {
                public string Body { get; set; }
                
                public string headerXRateLimit { get; set; }
                public string headerXExpiresAfter { get; set; }
            }
            
            /// <summary>
            /// Invalid username/password supplied
            /// </summary>
            public readonly struct BadRequest : LoginUserTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Logs out current logged in user session
        /// </summary>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendLogoutUserAsync(
            this global::System.Net.Http.HttpClient client,
                        global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(LogoutUser());

        public static global::System.Net.Http.HttpRequestMessage LogoutUser(
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<LogoutUserTypeSafeResult> ParseLogoutUserTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct LogoutUserTypeSafeResult
        {
            
            
            public readonly struct OtherStatusCode : LogoutUserTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Get user by user name
        /// </summary>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing. </param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendGetUserByNameAsync(
            this global::System.Net.Http.HttpClient client,
            string username,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(GetUserByName(username));

        public static global::System.Net.Http.HttpRequestMessage GetUserByName(
            string username
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<GetUserByNameTypeSafeResult> ParseGetUserByNameTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct GetUserByNameTypeSafeResult
        {
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationXmlOk : GetUserByNameTypeSafeResult
            {
                public User Body { get; set; }
                
            }
            
            /// <summary>
            /// successful operation
            /// </summary>
            public readonly struct ApplicationJsonOk : GetUserByNameTypeSafeResult
            {
                public User Body { get; set; }
                
            }
            
            /// <summary>
            /// Invalid username supplied
            /// </summary>
            public readonly struct BadRequest : GetUserByNameTypeSafeResult
            {
                
            }
            
            /// <summary>
            /// User not found
            /// </summary>
            public readonly struct NotFound : GetUserByNameTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Updated user
        /// </summary>
        /// <remarks>
        /// This can only be done by the logged in user.
        /// </remarks>
        /// <param name="username">name that need to be updated</param>
        /// <param name="updateUserBody"></param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendUpdateUserAsync(
            this global::System.Net.Http.HttpClient client,
            string username,
User updateUserBody,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(UpdateUser(username,updateUserBody));

        public static global::System.Net.Http.HttpRequestMessage UpdateUser(
            string username,
            User updateUserBody
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<UpdateUserTypeSafeResult> ParseUpdateUserTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct UpdateUserTypeSafeResult
        {
            
            /// <summary>
            /// Invalid user supplied
            /// </summary>
            public readonly struct BadRequest : UpdateUserTypeSafeResult
            {
                
            }
            
            /// <summary>
            /// User not found
            /// </summary>
            public readonly struct NotFound : UpdateUserTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// This can only be done by the logged in user.
        /// </remarks>
        /// <param name="username">The name that needs to be deleted</param>
        public static Task<global::System.Net.Http.HttpResponseMessage> SendDeleteUserAsync(
            this global::System.Net.Http.HttpClient client,
            string username,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(DeleteUser(username));

        public static global::System.Net.Http.HttpRequestMessage DeleteUser(
            string username
            )
        {
            throw new global::System.NotImplementedException();
        }

        public static global::System.Threading.Tasks.Task<DeleteUserTypeSafeResult> ParseDeleteUserTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public readonly struct DeleteUserTypeSafeResult
        {
            
            /// <summary>
            /// Invalid username supplied
            /// </summary>
            public readonly struct BadRequest : DeleteUserTypeSafeResult
            {
                
            }
            
            /// <summary>
            /// User not found
            /// </summary>
            public readonly struct NotFound : DeleteUserTypeSafeResult
            {
                
            }
            
        }
    }
}
