/*
 * Principle Tech Demo
 *
 * Tech demo for Principle Studios' engineering team
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matt.dekrey@principlestudios.com
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    public static class Operations
    {
        
        /// <summary>
        /// Get information on where electricity is flowing within a virtual home
        /// </summary>
        /// <param name="houseId"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        public static async global::System.Threading.Tasks.Task<GetPowerFlowsReturnType> GetPowerFlows(
            this global::System.Net.Http.HttpClient client,
            global::System.Guid houseId,
global::PrincipleStudios.OpenApiCodegen.Json.Extensions.Optional<string>? start,
global::PrincipleStudios.OpenApiCodegen.Json.Extensions.Optional<string>? end,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => await (await client.SendAsync(GetPowerFlows(houseId,start,end)).ConfigureAwait(false))
            .ParseGetPowerFlows().ConfigureAwait(false);

        public static global::System.Net.Http.HttpRequestMessage GetPowerFlows(
            global::System.Guid houseId,
            global::PrincipleStudios.OpenApiCodegen.Json.Extensions.Optional<string>? start,
            global::PrincipleStudios.OpenApiCodegen.Json.Extensions.Optional<string>? end
            )
        {
            var query = global::System.Web.HttpUtility.ParseQueryString(string.Empty); 
            if (houseId != null)
                query.Add("houseId", global::System.Convert.ToString(houseId));
            if (start != null)
                query.Add("start", global::System.Convert.ToString((string)start));
            if (end != null)
                query.Add("end", global::System.Convert.ToString((string)end));

            var requestMessage = new global::System.Net.Http.HttpRequestMessage(
                global::System.Net.Http.HttpMethod.Get,
                new global::System.Uri("power"
                    + "?" + query.ToString(),
                    global::System.UriKind.Relative));


            return requestMessage;
        }

        public static async global::System.Threading.Tasks.Task<GetPowerFlowsReturnType?> ParseGetPowerFlows(this global::System.Net.Http.HttpResponseMessage response)
        {
            switch ((int)response.StatusCode)
            { 
                case 200:
                     if (response.Content.Headers.ContentType.MediaType == "application/json") 
                        return new GetPowerFlowsReturnType.Ok
                        {
                            Response = response,
                            Body = await global::System.Text.Json.JsonSerializer.DeserializeAsync<GetPowerFlowsResponse>(await response.Content.ReadAsStreamAsync()), 
                        };
                    break;
                
                case 400:
                    
                        return new GetPowerFlowsReturnType.BadRequest
                        {
                            Response = response,
                        };
                    break;
                
            }
            return new GetPowerFlowsReturnType
            {
                Response = response,
            };
        }

        public class GetPowerFlowsReturnType : global::System.IDisposable
        {
            public global::System.Net.Http.HttpResponseMessage Response { get; set; }

            void global::System.IDisposable.Dispose()
            {
                Response?.Dispose();
            }

            
            
            public class Ok : GetPowerFlowsReturnType
            {
                public GetPowerFlowsResponse Body { get; set; }
                
            }
            
            /// <summary>
            /// Request range or house id not valid
            /// </summary>
            public class BadRequest : GetPowerFlowsReturnType
            {
                
            }
            
        }

        /// <summary>
        /// Get current battery state
        /// </summary>
        /// <param name="houseId"></param>
        public static async global::System.Threading.Tasks.Task<GetCurrentBatteryStateReturnType> GetCurrentBatteryState(
            this global::System.Net.Http.HttpClient client,
            global::System.Guid houseId,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => await (await client.SendAsync(GetCurrentBatteryState(houseId)).ConfigureAwait(false))
            .ParseGetCurrentBatteryState().ConfigureAwait(false);

        public static global::System.Net.Http.HttpRequestMessage GetCurrentBatteryState(
            global::System.Guid houseId
            )
        {
            var query = global::System.Web.HttpUtility.ParseQueryString(string.Empty); 
            if (houseId != null)
                query.Add("houseId", global::System.Convert.ToString(houseId));

            var requestMessage = new global::System.Net.Http.HttpRequestMessage(
                global::System.Net.Http.HttpMethod.Get,
                new global::System.Uri("battery/current"
                    + "?" + query.ToString(),
                    global::System.UriKind.Relative));


            return requestMessage;
        }

        public static async global::System.Threading.Tasks.Task<GetCurrentBatteryStateReturnType?> ParseGetCurrentBatteryState(this global::System.Net.Http.HttpResponseMessage response)
        {
            switch ((int)response.StatusCode)
            { 
                case 200:
                     if (response.Content.Headers.ContentType.MediaType == "application/json") 
                        return new GetCurrentBatteryStateReturnType.Ok
                        {
                            Response = response,
                            Body = await global::System.Text.Json.JsonSerializer.DeserializeAsync<CurrentBatteryState>(await response.Content.ReadAsStreamAsync()), 
                        };
                    break;
                
                case 400:
                    
                        return new GetCurrentBatteryStateReturnType.BadRequest
                        {
                            Response = response,
                        };
                    break;
                
            }
            return new GetCurrentBatteryStateReturnType
            {
                Response = response,
            };
        }

        public class GetCurrentBatteryStateReturnType : global::System.IDisposable
        {
            public global::System.Net.Http.HttpResponseMessage Response { get; set; }

            void global::System.IDisposable.Dispose()
            {
                Response?.Dispose();
            }

            
            
            public class Ok : GetCurrentBatteryStateReturnType
            {
                public CurrentBatteryState Body { get; set; }
                
            }
            
            /// <summary>
            /// Request range or house id not valid
            /// </summary>
            public class BadRequest : GetCurrentBatteryStateReturnType
            {
                
            }
            
        }
    }
}
