/*
 * Principle Tech Demo
 *
 * Tech demo for Principle Studios' engineering team
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matt.dekrey@principlestudios.com
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    public static class Operations
    {
        
        /// <summary>
        /// Get information on where electricity is flowing within a virtual home
        /// </summary>
        /// <param name="houseId"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        public static global::System.Threading.Tasks.Task<global::System.Net.Http.HttpResponseMessage> SendGetPowerFlowsAsync(
            this global::System.Net.Http.HttpClient client,
            global::System.Guid houseId,
string? start,
string? end,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(GetPowerFlows(houseId,start,end));

        public static global::System.Net.Http.HttpRequestMessage GetPowerFlows(
            global::System.Guid houseId,
            string? start,
            string? end
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Get, "/power");


            return requestMessage;
        }

        public static global::System.Threading.Tasks.Task<IGetPowerFlowsTypeSafeResult> ParseGetPowerFlowsTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public interface IGetPowerFlowsTypeSafeResult
        {
            
            
            public readonly struct Ok : IGetPowerFlowsTypeSafeResult
            {
                public GetPowerFlowsResponse Body { get; }
                
            }
            
            /// <summary>
            /// Request range or house id not valid
            /// </summary>
            public readonly struct BadRequest : IGetPowerFlowsTypeSafeResult
            {
                
            }
            
        }

        /// <summary>
        /// Get current battery state
        /// </summary>
        /// <param name="houseId"></param>
        public static global::System.Threading.Tasks.Task<global::System.Net.Http.HttpResponseMessage> SendGetCurrentBatteryStateAsync(
            this global::System.Net.Http.HttpClient client,
            global::System.Guid houseId,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => client.SendAsync(GetCurrentBatteryState(houseId));

        public static global::System.Net.Http.HttpRequestMessage GetCurrentBatteryState(
            global::System.Guid houseId
            )
        {
            var requestMessage = new global::System.Net.Http.HttpRequestMessage(global::System.Net.Http.HttpMethod.Get, "/battery/current");


            return requestMessage;
        }

        public static global::System.Threading.Tasks.Task<IGetCurrentBatteryStateTypeSafeResult> ParseGetCurrentBatteryStateTypeSafe(this global::System.Net.Http.HttpResponseMessage response)
        {
            throw new global::System.NotImplementedException();
        }

        public interface IGetCurrentBatteryStateTypeSafeResult
        {
            
            
            public readonly struct Ok : IGetCurrentBatteryStateTypeSafeResult
            {
                public CurrentBatteryState Body { get; }
                
            }
            
            /// <summary>
            /// Request range or house id not valid
            /// </summary>
            public readonly struct BadRequest : IGetCurrentBatteryStateTypeSafeResult
            {
                
            }
            
        }
    }
}
