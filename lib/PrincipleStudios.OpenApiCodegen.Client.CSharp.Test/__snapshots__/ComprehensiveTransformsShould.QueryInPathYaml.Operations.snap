/*
 * Query In Path
 *
 * Testing query strings in paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    public static class Operations
    {
        
        /// <param name="limit">maximum number of results to return</param>
        public static async global::System.Threading.Tasks.Task<TestPathReturnType> TestPath(
            this global::System.Net.Http.HttpClient client,
            int? limit,
            global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken)
        ) => await (await client.SendAsync(TestPath(limit)).ConfigureAwait(false))
            .ParseTestPath().ConfigureAwait(false);

        public static global::System.Net.Http.HttpRequestMessage TestPath(
            int? limit
            )
        {
            var query = global::System.Web.HttpUtility.ParseQueryString(string.Empty); 
            if (limit != null)
                query.Add("limit", global::System.Convert.ToString(limit));

            var requestMessage = new global::System.Net.Http.HttpRequestMessage(
                global::System.Net.Http.HttpMethod.Get,
                new global::System.Uri("path?param1=test&param2=test"
                    + "&" + query.ToString(),
                    global::System.UriKind.Relative));


            return requestMessage;
        }

        public static async global::System.Threading.Tasks.Task<TestPathReturnType?> ParseTestPath(this global::System.Net.Http.HttpResponseMessage response)
        {
            switch ((int)response.StatusCode)
            { 
                case 204:
                    
                        return new TestPathReturnType.NoContent
                        {
                            Response = response,
                        };
                    break;
                
            }
            return new TestPathReturnType
            {
                Response = response,
            };
        }

        public class TestPathReturnType : global::System.IDisposable
        {
            public global::System.Net.Http.HttpResponseMessage Response { get; set; }

            void global::System.IDisposable.Dispose()
            {
                Response?.Dispose();
            }

            
            /// <summary>
            /// No content
            /// </summary>
            public class NoContent : TestPathReturnType
            {
                
            }
            
        }
    }
}
