exports[`operations/getInfo.ts`] = `/*
 * Headers Sample
 *
 * A sample API that demonstrates header parameters/responses
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse, TransformRequest } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
    xData: string;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** Another Response */
    'other': {
        '': undefined;
    };
    /** Sample Response */
    200: {
        'application/json': Record<string, string>;
    };
    /** Sample Response */
    204: {
        '': undefined;
    };
};
export type Responses = 
    | StandardResponse<'other', '', undefined>
    | StandardResponse<200, 'application/json', Record<string, string>>
    | StandardResponse<204, '', undefined>;

export function getInfo(params: RequestParams): RequestOpts;
export function getInfo(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.xData, 'X-Data');

    const headers: HttpHeaders = {};
    if (params.xData) headers['X-Data'] = params.xData; 

    return {
        path: '/info',
        method: 'GET',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
            204,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, {}, Responses, 'no-body'> = {
    request: getInfo,
    response: responseConversion,
};

`;

exports[`operations/redirect.ts`] = `/*
 * Headers Sample
 *
 * A sample API that demonstrates header parameters/responses
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse, TransformRequest } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** Redirection Response */
    302: {
        '': undefined;
    };
};
export type Responses = 
    | StandardResponse<302, '', undefined>;

export function redirect(params: RequestParams): RequestOpts;
export function redirect(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');

    const headers: HttpHeaders = {};

    return {
        path: '/redirect',
        method: 'GET',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            302,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, {}, Responses, 'no-body'> = {
    request: redirect,
    response: responseConversion,
};

`;

exports[`operations/index.ts`] = `/*
 * Headers Sample
 *
 * A sample API that demonstrates header parameters/responses
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
import { conversion as getInfo } from './getInfo';
import { conversion as redirect } from './redirect';

export default {
    getInfo,
    redirect,
} as const;
`;

