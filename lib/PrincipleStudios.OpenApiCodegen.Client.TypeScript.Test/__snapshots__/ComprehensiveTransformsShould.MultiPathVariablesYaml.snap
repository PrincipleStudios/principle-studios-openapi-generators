exports[`operations/getPhoto.ts`] = `/*
 * Path with multiple variables Demo
 *
 * A sample API document that has multiple variables in the path
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse, TransformRequest } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
    id: string;
    size: number;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** Photo was found and resized */
    200: {
        'application/octet-stream': Blob;
    };
};
export type Responses = 
    | StandardResponse<200, 'application/octet-stream', Blob>;

export function getPhoto(params: RequestParams): RequestOpts;
export function getPhoto(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.id, 'id');
    throwIfNullOrUndefined(params.size, 'size');

    const headers: HttpHeaders = {};

    return {
        path: '/photo/{id}/{size}'.replace('{id}', encodeURI(params.id)).replace('{size}', encodeURI(params.size)),
        method: 'GET',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, {}, Responses, 'no-body'> = {
    request: getPhoto,
    response: responseConversion,
};

`;

exports[`operations/getPhotoAsFormat.ts`] = `/*
 * Path with multiple variables Demo
 *
 * A sample API document that has multiple variables in the path
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse, TransformRequest } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
    id: string;
    size?: number;
    format?: string;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** Photo was found, resized, and reformatted */
    200: {
        'application/octet-stream': Blob;
    };
};
export type Responses = 
    | StandardResponse<200, 'application/octet-stream', Blob>;

export function getPhotoAsFormat(params: RequestParams): RequestOpts;
export function getPhotoAsFormat(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.id, 'id');

    const headers: HttpHeaders = {};

    const query: HttpQuery = { 
    };
    if (params.size !== undefined) { query['size'] = params.size; }
    if (params.format !== undefined) { query['format'] = params.format; }

    return {
        path: '/photo/{id}'.replace('{id}', encodeURI(params.id)),
        method: 'GET',
        headers,
        query,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, {}, Responses, 'no-body'> = {
    request: getPhotoAsFormat,
    response: responseConversion,
};

`;

exports[`operations/index.ts`] = `/*
 * Path with multiple variables Demo
 *
 * A sample API document that has multiple variables in the path
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
import { conversion as getPhoto } from './getPhoto';
import { conversion as getPhotoAsFormat } from './getPhotoAsFormat';

export default {
    getPhoto,
    getPhotoAsFormat,
} as const;
`;

