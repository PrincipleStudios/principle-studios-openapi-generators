exports[`operations/getInfo.ts`] = `/*
 * OAuth Scopes Sample
 *
 * A sample API that uses oauth scopes
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
    data?: string | null;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** Sample Response */
    200: {
        'application/json': string;
    };
};
export type Responses =
    | StandardResponse<'200', 'application/json', string>
    ;

export function getInfo(params: RequestParams): RequestOpts;
export function getInfo(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');

    const headers: HttpHeaders = {
    };

    const query: HttpQuery = { 
    };
    if (params.data != null) { query['data'] = params.data; }

    return {
        path: '/info',
        method: 'GET',
        headers,
        query,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams,  | undefined, Responses> = {
    request: getInfo,
    response: responseConversion,
};

`;

exports[`operations/getAddress.ts`] = `/*
 * OAuth Scopes Sample
 *
 * A sample API that uses oauth scopes
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** Sample Response */
    200: {
        'application/json': string;
    };
};
export type Responses =
    | StandardResponse<'200', 'application/json', string>
    ;

export function getAddress(params: RequestParams): RequestOpts;
export function getAddress(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');

    const headers: HttpHeaders = {
    };

    return {
        path: '/address',
        method: 'GET',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams,  | undefined, Responses> = {
    request: getAddress,
    response: responseConversion,
};

`;

exports[`operations/index.ts`] = `/*
 * OAuth Scopes Sample
 *
 * A sample API that uses oauth scopes
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
import { conversion as getInfo } from './getInfo';
import { conversion as getAddress } from './getAddress';

export default {
    getInfo,
    getAddress,
} as const;
`;

