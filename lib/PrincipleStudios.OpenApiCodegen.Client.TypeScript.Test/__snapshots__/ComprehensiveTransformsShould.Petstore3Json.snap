exports[`operations/addPet.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    Pet,
} from './../models/Pet';

export type RequestParams = {
};
export type RequestBodies = {
    'application/json': {
        body: Pet;
    };
    'application/xml': {
        body: Pet;
    };
};

export type StructuredResponses = {
    /** Invalid input */
    405: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'405', '', undefined>
    ;

export function addPet<K extends keyof RequestBodies>(params: RequestParams, body: RequestBodies[K], mimeType: K): RequestOpts;
export function addPet(params: RequestParams, body?: RequestBodies[keyof RequestBodies], mimeType?: keyof RequestBodies): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    if (mimeType) throwIfNullOrUndefined(body, 'body');
    if (body) throwIfNullOrUndefined(mimeType, 'mimeType');

    const headers: HttpHeaders = {
        'Content-Type': mimeType,
    };

    return {
        path: '/pet',
        method: 'POST',
        headers,
        body,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            405,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, | RequestBodies, Responses> = {
    request: addPet,
    response: responseConversion,
};

`;

exports[`operations/updatePet.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    Pet,
} from './../models/Pet';

export type RequestParams = {
};
export type RequestBodies = {
    'application/json': {
        body: Pet;
    };
    'application/xml': {
        body: Pet;
    };
};

export type StructuredResponses = {
    /** Invalid ID supplied */
    400: {
        '': undefined;
    };
    /** Pet not found */
    404: {
        '': undefined;
    };
    /** Validation exception */
    405: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'400', '', undefined>
        | StandardResponse<'404', '', undefined>
        | StandardResponse<'405', '', undefined>
    ;

export function updatePet<K extends keyof RequestBodies>(params: RequestParams, body: RequestBodies[K], mimeType: K): RequestOpts;
export function updatePet(params: RequestParams, body?: RequestBodies[keyof RequestBodies], mimeType?: keyof RequestBodies): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    if (mimeType) throwIfNullOrUndefined(body, 'body');
    if (body) throwIfNullOrUndefined(mimeType, 'mimeType');

    const headers: HttpHeaders = {
        'Content-Type': mimeType,
    };

    return {
        path: '/pet',
        method: 'PUT',
        headers,
        body,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            400,
            404,
            405,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, | RequestBodies, Responses> = {
    request: updatePet,
    response: responseConversion,
};

`;

exports[`operations/findPetsByStatus.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    Pet,
} from './../models/Pet';

export type RequestParams = {
    status: Array<string>;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** successful operation */
    200: {
        'application/xml': Array<Pet>;
        'application/json': Array<Pet>;
    };
    /** Invalid status value */
    400: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'200', 'application/xml', Array<Pet>>
    | StandardResponse<'200', 'application/json', Array<Pet>>
        | StandardResponse<'400', '', undefined>
    ;

export function findPetsByStatus(params: RequestParams): RequestOpts;
export function findPetsByStatus(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.status, 'status');

    const headers: HttpHeaders = {
    };

    const query: HttpQuery = { 
        'status': params.status,
    };

    return {
        path: '/pet/findByStatus',
        method: 'GET',
        headers,
        query,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
            400,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams,  | undefined, Responses> = {
    request: findPetsByStatus,
    response: responseConversion,
};

`;

exports[`operations/findPetsByTags.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    Pet,
} from './../models/Pet';

export type RequestParams = {
    tags: Array<string>;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** successful operation */
    200: {
        'application/xml': Array<Pet>;
        'application/json': Array<Pet>;
    };
    /** Invalid tag value */
    400: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'200', 'application/xml', Array<Pet>>
    | StandardResponse<'200', 'application/json', Array<Pet>>
        | StandardResponse<'400', '', undefined>
    ;

export function findPetsByTags(params: RequestParams): RequestOpts;
export function findPetsByTags(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.tags, 'tags');

    const headers: HttpHeaders = {
    };

    const query: HttpQuery = { 
        'tags': params.tags,
    };

    return {
        path: '/pet/findByTags',
        method: 'GET',
        headers,
        query,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
            400,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams,  | undefined, Responses> = {
    request: findPetsByTags,
    response: responseConversion,
};

`;

exports[`operations/getPetById.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    Pet,
} from './../models/Pet';

export type RequestParams = {
    petId: BigInt;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** successful operation */
    200: {
        'application/xml': Pet;
        'application/json': Pet;
    };
    /** Invalid ID supplied */
    400: {
        '': undefined;
    };
    /** Pet not found */
    404: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'200', 'application/xml', Pet>
    | StandardResponse<'200', 'application/json', Pet>
        | StandardResponse<'400', '', undefined>
        | StandardResponse<'404', '', undefined>
    ;

export function getPetById(params: RequestParams): RequestOpts;
export function getPetById(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.petId, 'petId');

    const headers: HttpHeaders = {
    };

    return {
        path: '/pet/{petId}'.replace('{petId}', encodeURI(params.petId)),
        method: 'GET',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
            400,
            404,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams,  | undefined, Responses> = {
    request: getPetById,
    response: responseConversion,
};

`;

exports[`operations/updatePetWithForm.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
    petId: BigInt;
};
export type RequestBodies = {
    'application/x-www-form-urlencoded': {
        name?: string | null;
        status?: string | null;
    };
};

export type StructuredResponses = {
    /** Invalid input */
    405: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'405', '', undefined>
    ;

export function updatePetWithForm(params: RequestParams): RequestOpts;
export function updatePetWithForm<K extends keyof RequestBodies>(params: RequestParams, body: RequestBodies[K], mimeType: K): RequestOpts;
export function updatePetWithForm(params: RequestParams, body?: RequestBodies[keyof RequestBodies], mimeType?: keyof RequestBodies): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    if (mimeType) throwIfNullOrUndefined(body, 'body');
    if (body) throwIfNullOrUndefined(mimeType, 'mimeType');
    throwIfNullOrUndefined(params.petId, 'petId');

    const headers: HttpHeaders = {
        'Content-Type': mimeType,
    };

    let actualBody: RequestBodies[keyof RequestBodies] | FormData = body;
    if (mimeType === 'application/x-www-form-urlencoded')
    {
        let formData = new FormData();
        if (body!.name !== undefined) { formData.append('name', body!.name as any); }
        if (body!.status !== undefined) { formData.append('status', body!.status as any); }
        actualBody = formData;
    }

    return {
        path: '/pet/{petId}'.replace('{petId}', encodeURI(params.petId)),
        method: 'POST',
        headers,
        body: actualBody,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            405,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, | RequestBodies | undefined, Responses> = {
    request: updatePetWithForm,
    response: responseConversion,
};

`;

exports[`operations/deletePet.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
    apiKey?: string | null;
    petId: BigInt;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** Invalid ID supplied */
    400: {
        '': undefined;
    };
    /** Pet not found */
    404: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'400', '', undefined>
        | StandardResponse<'404', '', undefined>
    ;

export function deletePet(params: RequestParams): RequestOpts;
export function deletePet(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.petId, 'petId');

    const headers: HttpHeaders = {
        'api_key': params.apiKey, 
    };

    return {
        path: '/pet/{petId}'.replace('{petId}', encodeURI(params.petId)),
        method: 'DELETE',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            400,
            404,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams,  | undefined, Responses> = {
    request: deletePet,
    response: responseConversion,
};

`;

exports[`operations/uploadFile.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    ApiResponse,
} from './../models/ApiResponse';

export type RequestParams = {
    petId: BigInt;
};
export type RequestBodies = {
    'application/octet-stream': {
        body: string;
    };
};

export type StructuredResponses = {
    /** successful operation */
    200: {
        'application/json': ApiResponse;
    };
};
export type Responses =
    | StandardResponse<'200', 'application/json', ApiResponse>
    ;

export function uploadFile(params: RequestParams): RequestOpts;
export function uploadFile<K extends keyof RequestBodies>(params: RequestParams, body: RequestBodies[K], mimeType: K): RequestOpts;
export function uploadFile(params: RequestParams, body?: RequestBodies[keyof RequestBodies], mimeType?: keyof RequestBodies): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    if (mimeType) throwIfNullOrUndefined(body, 'body');
    if (body) throwIfNullOrUndefined(mimeType, 'mimeType');
    throwIfNullOrUndefined(params.petId, 'petId');

    const headers: HttpHeaders = {
        'Content-Type': mimeType,
    };

    return {
        path: '/pet/{petId}/uploadImage'.replace('{petId}', encodeURI(params.petId)),
        method: 'POST',
        headers,
        body,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, | RequestBodies | undefined, Responses> = {
    request: uploadFile,
    response: responseConversion,
};

`;

exports[`operations/getInventory.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** successful operation */
    200: {
        'application/json': Record<string, number>;
    };
};
export type Responses =
    | StandardResponse<'200', 'application/json', Record<string, number>>
    ;

export function getInventory(params: RequestParams): RequestOpts;
export function getInventory(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');

    const headers: HttpHeaders = {
    };

    return {
        path: '/store/inventory',
        method: 'GET',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams,  | undefined, Responses> = {
    request: getInventory,
    response: responseConversion,
};

`;

exports[`operations/placeOrder.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    Order,
} from './../models/Order';

export type RequestParams = {
};
export type RequestBodies = {
    'application/json': {
        body: Order;
    };
};

export type StructuredResponses = {
    /** successful operation */
    200: {
        'application/xml': Order;
        'application/json': Order;
    };
    /** Invalid Order */
    400: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'200', 'application/xml', Order>
    | StandardResponse<'200', 'application/json', Order>
        | StandardResponse<'400', '', undefined>
    ;

export function placeOrder<K extends keyof RequestBodies>(params: RequestParams, body: RequestBodies[K], mimeType: K): RequestOpts;
export function placeOrder(params: RequestParams, body?: RequestBodies[keyof RequestBodies], mimeType?: keyof RequestBodies): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    if (mimeType) throwIfNullOrUndefined(body, 'body');
    if (body) throwIfNullOrUndefined(mimeType, 'mimeType');

    const headers: HttpHeaders = {
        'Content-Type': mimeType,
    };

    return {
        path: '/store/order',
        method: 'POST',
        headers,
        body,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
            400,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, | RequestBodies, Responses> = {
    request: placeOrder,
    response: responseConversion,
};

`;

exports[`operations/getOrderById.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    Order,
} from './../models/Order';

export type RequestParams = {
    orderId: BigInt;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** successful operation */
    200: {
        'application/xml': Order;
        'application/json': Order;
    };
    /** Invalid ID supplied */
    400: {
        '': undefined;
    };
    /** Order not found */
    404: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'200', 'application/xml', Order>
    | StandardResponse<'200', 'application/json', Order>
        | StandardResponse<'400', '', undefined>
        | StandardResponse<'404', '', undefined>
    ;

export function getOrderById(params: RequestParams): RequestOpts;
export function getOrderById(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.orderId, 'orderId');

    const headers: HttpHeaders = {
    };

    return {
        path: '/store/order/{orderId}'.replace('{orderId}', encodeURI(params.orderId)),
        method: 'GET',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
            400,
            404,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams,  | undefined, Responses> = {
    request: getOrderById,
    response: responseConversion,
};

`;

exports[`operations/deleteOrder.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
    orderId: BigInt;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** Invalid ID supplied */
    400: {
        '': undefined;
    };
    /** Order not found */
    404: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'400', '', undefined>
        | StandardResponse<'404', '', undefined>
    ;

export function deleteOrder(params: RequestParams): RequestOpts;
export function deleteOrder(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.orderId, 'orderId');

    const headers: HttpHeaders = {
    };

    return {
        path: '/store/order/{orderId}'.replace('{orderId}', encodeURI(params.orderId)),
        method: 'DELETE',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            400,
            404,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams,  | undefined, Responses> = {
    request: deleteOrder,
    response: responseConversion,
};

`;

exports[`operations/createUser.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    User,
} from './../models/User';

export type RequestParams = {
};
export type RequestBodies = {
    'application/json': {
        body: User;
    };
};

export type StructuredResponses = {
    /** successful operation */
    'other': {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'other', '', undefined>
;

export function createUser<K extends keyof RequestBodies>(params: RequestParams, body: RequestBodies[K], mimeType: K): RequestOpts;
export function createUser(params: RequestParams, body?: RequestBodies[keyof RequestBodies], mimeType?: keyof RequestBodies): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    if (mimeType) throwIfNullOrUndefined(body, 'body');
    if (body) throwIfNullOrUndefined(mimeType, 'mimeType');

    const headers: HttpHeaders = {
        'Content-Type': mimeType,
    };

    return {
        path: '/user',
        method: 'POST',
        headers,
        body,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, | RequestBodies, Responses> = {
    request: createUser,
    response: responseConversion,
};

`;

exports[`operations/createUsersWithArrayInput.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    User,
} from './../models/User';

export type RequestParams = {
};
export type RequestBodies = {
    'application/json': {
        body: Array<User>;
    };
};

export type StructuredResponses = {
    /** successful operation */
    'other': {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'other', '', undefined>
;

export function createUsersWithArrayInput<K extends keyof RequestBodies>(params: RequestParams, body: RequestBodies[K], mimeType: K): RequestOpts;
export function createUsersWithArrayInput(params: RequestParams, body?: RequestBodies[keyof RequestBodies], mimeType?: keyof RequestBodies): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    if (mimeType) throwIfNullOrUndefined(body, 'body');
    if (body) throwIfNullOrUndefined(mimeType, 'mimeType');

    const headers: HttpHeaders = {
        'Content-Type': mimeType,
    };

    return {
        path: '/user/createWithArray',
        method: 'POST',
        headers,
        body,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, | RequestBodies, Responses> = {
    request: createUsersWithArrayInput,
    response: responseConversion,
};

`;

exports[`operations/createUsersWithListInput.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    User,
} from './../models/User';

export type RequestParams = {
};
export type RequestBodies = {
    'application/json': {
        body: Array<User>;
    };
};

export type StructuredResponses = {
    /** successful operation */
    'other': {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'other', '', undefined>
;

export function createUsersWithListInput<K extends keyof RequestBodies>(params: RequestParams, body: RequestBodies[K], mimeType: K): RequestOpts;
export function createUsersWithListInput(params: RequestParams, body?: RequestBodies[keyof RequestBodies], mimeType?: keyof RequestBodies): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    if (mimeType) throwIfNullOrUndefined(body, 'body');
    if (body) throwIfNullOrUndefined(mimeType, 'mimeType');

    const headers: HttpHeaders = {
        'Content-Type': mimeType,
    };

    return {
        path: '/user/createWithList',
        method: 'POST',
        headers,
        body,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, | RequestBodies, Responses> = {
    request: createUsersWithListInput,
    response: responseConversion,
};

`;

exports[`operations/loginUser.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
    username: string;
    password: string;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** successful operation */
    200: {
        'application/xml': string;
        'application/json': string;
    };
    /** Invalid username/password supplied */
    400: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'200', 'application/xml', string>
    | StandardResponse<'200', 'application/json', string>
        | StandardResponse<'400', '', undefined>
    ;

export function loginUser(params: RequestParams): RequestOpts;
export function loginUser(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.username, 'username');
    throwIfNullOrUndefined(params.password, 'password');

    const headers: HttpHeaders = {
    };

    const query: HttpQuery = { 
        'username': params.username,
        'password': params.password,
    };

    return {
        path: '/user/login',
        method: 'GET',
        headers,
        query,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
            400,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams,  | undefined, Responses> = {
    request: loginUser,
    response: responseConversion,
};

`;

exports[`operations/logoutUser.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** successful operation */
    'other': {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'other', '', undefined>
;

export function logoutUser(params: RequestParams): RequestOpts;
export function logoutUser(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');

    const headers: HttpHeaders = {
    };

    return {
        path: '/user/logout',
        method: 'GET',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams,  | undefined, Responses> = {
    request: logoutUser,
    response: responseConversion,
};

`;

exports[`operations/getUserByName.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    User,
} from './../models/User';

export type RequestParams = {
    username: string;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** successful operation */
    200: {
        'application/xml': User;
        'application/json': User;
    };
    /** Invalid username supplied */
    400: {
        '': undefined;
    };
    /** User not found */
    404: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'200', 'application/xml', User>
    | StandardResponse<'200', 'application/json', User>
        | StandardResponse<'400', '', undefined>
        | StandardResponse<'404', '', undefined>
    ;

export function getUserByName(params: RequestParams): RequestOpts;
export function getUserByName(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.username, 'username');

    const headers: HttpHeaders = {
    };

    return {
        path: '/user/{username}'.replace('{username}', encodeURI(params.username)),
        method: 'GET',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
            400,
            404,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams,  | undefined, Responses> = {
    request: getUserByName,
    response: responseConversion,
};

`;

exports[`operations/updateUser.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    User,
} from './../models/User';

export type RequestParams = {
    username: string;
};
export type RequestBodies = {
    'application/json': {
        body: User;
    };
};

export type StructuredResponses = {
    /** Invalid user supplied */
    400: {
        '': undefined;
    };
    /** User not found */
    404: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'400', '', undefined>
        | StandardResponse<'404', '', undefined>
    ;

export function updateUser<K extends keyof RequestBodies>(params: RequestParams, body: RequestBodies[K], mimeType: K): RequestOpts;
export function updateUser(params: RequestParams, body?: RequestBodies[keyof RequestBodies], mimeType?: keyof RequestBodies): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    if (mimeType) throwIfNullOrUndefined(body, 'body');
    if (body) throwIfNullOrUndefined(mimeType, 'mimeType');
    throwIfNullOrUndefined(params.username, 'username');

    const headers: HttpHeaders = {
        'Content-Type': mimeType,
    };

    return {
        path: '/user/{username}'.replace('{username}', encodeURI(params.username)),
        method: 'PUT',
        headers,
        body,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            400,
            404,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, | RequestBodies, Responses> = {
    request: updateUser,
    response: responseConversion,
};

`;

exports[`operations/deleteUser.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
    username: string;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** Invalid username supplied */
    400: {
        '': undefined;
    };
    /** User not found */
    404: {
        '': undefined;
    };
};
export type Responses =
    | StandardResponse<'400', '', undefined>
        | StandardResponse<'404', '', undefined>
    ;

export function deleteUser(params: RequestParams): RequestOpts;
export function deleteUser(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.username, 'username');

    const headers: HttpHeaders = {
    };

    return {
        path: '/user/{username}'.replace('{username}', encodeURI(params.username)),
        method: 'DELETE',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            400,
            404,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams,  | undefined, Responses> = {
    request: deleteUser,
    response: responseConversion,
};

`;

exports[`operations/index.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { conversion as addPet } from './addPet';
import { conversion as updatePet } from './updatePet';
import { conversion as findPetsByStatus } from './findPetsByStatus';
import { conversion as findPetsByTags } from './findPetsByTags';
import { conversion as getPetById } from './getPetById';
import { conversion as updatePetWithForm } from './updatePetWithForm';
import { conversion as deletePet } from './deletePet';
import { conversion as uploadFile } from './uploadFile';
import { conversion as getInventory } from './getInventory';
import { conversion as placeOrder } from './placeOrder';
import { conversion as getOrderById } from './getOrderById';
import { conversion as deleteOrder } from './deleteOrder';
import { conversion as createUser } from './createUser';
import { conversion as createUsersWithArrayInput } from './createUsersWithArrayInput';
import { conversion as createUsersWithListInput } from './createUsersWithListInput';
import { conversion as loginUser } from './loginUser';
import { conversion as logoutUser } from './logoutUser';
import { conversion as getUserByName } from './getUserByName';
import { conversion as updateUser } from './updateUser';
import { conversion as deleteUser } from './deleteUser';

export default {
    addPet,
    updatePet,
    findPetsByStatus,
    findPetsByTags,
    getPetById,
    updatePetWithForm,
    deletePet,
    uploadFile,
    getInventory,
    placeOrder,
    getOrderById,
    deleteOrder,
    createUser,
    createUsersWithArrayInput,
    createUsersWithListInput,
    loginUser,
    logoutUser,
    getUserByName,
    updateUser,
    deleteUser,
} as const;
`;

exports[`models/Pet.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import {
    Category,
} from './Category';
import {
    Tag,
} from './Tag';

/**
 * @export
 * @interface Pet
 */
export type Pet = {
    /**
     * @type BigInt | null
     */
    id?: BigInt | null;
    /**
     * @type Category | null
     */
    category?: Category | null;
    /**
     * @type string
     */
    name: string;
    /**
     * @type Array<string>
     */
    photoUrls: Array<string>;
    /**
     * @type Array<Tag> | null
     */
    tags?: Array<Tag> | null;
    /**
     * @type string | null
     */
    status?: string | null;
};
`;

exports[`models/Category.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */

/**
 * @export
 * @interface Category
 */
export type Category = {
    /**
     * @type BigInt | null
     */
    id?: BigInt | null;
    /**
     * @type string | null
     */
    name?: string | null;
};
`;

exports[`models/Tag.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */

/**
 * @export
 * @interface Tag
 */
export type Tag = {
    /**
     * @type BigInt | null
     */
    id?: BigInt | null;
    /**
     * @type string | null
     */
    name?: string | null;
};
`;

exports[`models/User.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */

/**
 * @export
 * @interface User
 */
export type User = {
    /**
     * @type BigInt | null
     */
    id?: BigInt | null;
    /**
     * @type string | null
     */
    username?: string | null;
    /**
     * @type string | null
     */
    firstName?: string | null;
    /**
     * @type string | null
     */
    lastName?: string | null;
    /**
     * @type string | null
     */
    email?: string | null;
    /**
     * @type string | null
     */
    password?: string | null;
    /**
     * @type string | null
     */
    phone?: string | null;
    /**
     * @type number | null
     */
    userStatus?: number | null;
};
`;

exports[`models/Order.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */

/**
 * @export
 * @interface Order
 */
export type Order = {
    /**
     * @type BigInt | null
     */
    id?: BigInt | null;
    /**
     * @type BigInt | null
     */
    petId?: BigInt | null;
    /**
     * @type number | null
     */
    quantity?: number | null;
    /**
     * @type string | null
     */
    shipDate?: string | null;
    /**
     * @type string | null
     */
    status?: string | null;
    /**
     * @type boolean | null
     */
    complete?: boolean | null;
};
`;

exports[`models/ApiResponse.ts`] = `/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */

/**
 * @export
 * @interface ApiResponse
 */
export type ApiResponse = {
    /**
     * @type number | null
     */
    code?: number | null;
    /**
     * @type string | null
     */
    type?: string | null;
    /**
     * @type string | null
     */
    message?: string | null;
};
`;

