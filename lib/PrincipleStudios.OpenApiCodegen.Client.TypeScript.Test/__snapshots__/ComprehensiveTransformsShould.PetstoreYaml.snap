exports[`operations/findPets.ts`] = `/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse, TransformRequest } from '@principlestudios/openapi-codegen-typescript';
import {
    _Error,
} from './../models/_Error';
import {
    Pet,
} from './../models/Pet';

export type RequestParams = {
    tags?: Array<string> | null;
    limit?: number | null;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** unexpected error */
    'other': {
        'application/json': _Error;
    };
    /** pet response */
    200: {
        'application/json': Array<Pet>;
    };
};
export type Responses = 
    | StandardResponse<'other', 'application/json', _Error>
    | StandardResponse<200, 'application/json', Array<Pet>>;

export function findPets(params: RequestParams): RequestOpts;
export function findPets(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');

    const headers: HttpHeaders = {};

    const query: HttpQuery = { 
    };
    if (params.tags != null) { query['tags'] = params.tags; }
    if (params.limit != null) { query['limit'] = params.limit; }

    return {
        path: '/pets',
        method: 'GET',
        headers,
        query,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, {}, Responses, 'no-body'> = {
    request: findPets,
    response: responseConversion,
};

`;

exports[`operations/addPet.ts`] = `/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse, TransformRequest } from '@principlestudios/openapi-codegen-typescript';
import {
    _Error,
} from './../models/_Error';
import {
    NewPet,
} from './../models/NewPet';
import {
    Pet,
} from './../models/Pet';

export type RequestParams = {
};
export type RequestBodies = {
    'application/json': NewPet;
};

export type StructuredResponses = {
    /** unexpected error */
    'other': {
        'application/json': _Error;
    };
    /** pet response */
    200: {
        'application/json': Pet;
    };
};
export type Responses = 
    | StandardResponse<'other', 'application/json', _Error>
    | StandardResponse<200, 'application/json', Pet>;

export function addPet<K extends keyof RequestBodies>(params: RequestParams, body: RequestBodies[K], mimeType: K): RequestOpts;
export function addPet(params: RequestParams, body: RequestBodies[keyof RequestBodies] | null = null, mimeType: keyof RequestBodies | null = null): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(body, 'body');
    throwIfNullOrUndefined(mimeType, 'mimeType');

    const headers: HttpHeaders = {};
    if (mimeType) headers['Content-Type'] = mimeType;

    return {
        path: '/pets',
        method: 'POST',
        headers,
        body,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, RequestBodies, Responses, 'body'> = {
    request: addPet,
    response: responseConversion,
};

`;

exports[`operations/findPetById.ts`] = `/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse, TransformRequest } from '@principlestudios/openapi-codegen-typescript';
import {
    _Error,
} from './../models/_Error';
import {
    Pet,
} from './../models/Pet';

export type RequestParams = {
    id: BigInt;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** unexpected error */
    'other': {
        'application/json': _Error;
    };
    /** pet response */
    200: {
        'application/json': Pet;
    };
};
export type Responses = 
    | StandardResponse<'other', 'application/json', _Error>
    | StandardResponse<200, 'application/json', Pet>;

export function findPetById(params: RequestParams): RequestOpts;
export function findPetById(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.id, 'id');

    const headers: HttpHeaders = {};

    return {
        path: '/pets/{id}'.replace('{id}', encodeURI(params.id)),
        method: 'GET',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, {}, Responses, 'no-body'> = {
    request: findPetById,
    response: responseConversion,
};

`;

exports[`operations/deletePet.ts`] = `/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse, TransformRequest } from '@principlestudios/openapi-codegen-typescript';
import {
    _Error,
} from './../models/_Error';

export type RequestParams = {
    id: BigInt;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** unexpected error */
    'other': {
        'application/json': _Error;
    };
    /** pet deleted */
    204: {
        '': undefined;
    };
};
export type Responses = 
    | StandardResponse<'other', 'application/json', _Error>
    | StandardResponse<204, '', undefined>;

export function deletePet(params: RequestParams): RequestOpts;
export function deletePet(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.id, 'id');

    const headers: HttpHeaders = {};

    return {
        path: '/pets/{id}'.replace('{id}', encodeURI(params.id)),
        method: 'DELETE',
        headers,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            204,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, {}, Responses, 'no-body'> = {
    request: deletePet,
    response: responseConversion,
};

`;

exports[`operations/index.ts`] = `/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { conversion as findPets } from './findPets';
import { conversion as addPet } from './addPet';
import { conversion as findPetById } from './findPetById';
import { conversion as deletePet } from './deletePet';

export default {
    findPets,
    addPet,
    findPetById,
    deletePet,
} as const;
`;

exports[`models/Pet.ts`] = `/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */

/**
 * @export
 * @interface Pet
 */
export type Pet = {
    /**
     * @type string
     */
    name: string;
    /**
     * @type string | null
     */
    tag?: string | null;
    /**
     * @type BigInt
     */
    id: BigInt;
};
`;

exports[`models/NewPet.ts`] = `/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */

/**
 * @export
 * @interface NewPet
 */
export type NewPet = {
    /**
     * @type string
     */
    name: string;
    /**
     * @type string | null
     */
    tag?: string | null;
};
`;

exports[`models/_Error.ts`] = `/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */

/**
 * @export
 * @interface _Error
 */
export type _Error = {
    /**
     * @type number
     */
    code: number;
    /**
     * @type string
     */
    message: string;
};
`;

