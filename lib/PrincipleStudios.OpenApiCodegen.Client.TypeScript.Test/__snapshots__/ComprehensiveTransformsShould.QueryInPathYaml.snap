exports[`operations/testPath.ts`] = `/*
 * Query In Path
 *
 * Testing query strings in paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, RequestOpts, ResponseArgs, throwIfNullOrUndefined, encodeURI, RequestConversion, StandardResponse, TransformRequest } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
    limit?: number | null;
};
export type RequestBodies = {
};

export type StructuredResponses = {
    /** No content */
    204: {
        '': undefined;
    };
};
export type Responses = 
    | StandardResponse<204, '', undefined>;

export function testPath(params: RequestParams): RequestOpts;
export function testPath(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');

    const headers: HttpHeaders = {};

    const query: HttpQuery = { 
    };
    if (params.limit != null) { query['limit'] = params.limit; }

    return {
        path: '/path?param1=test&param2=test',
        method: 'GET',
        headers,
        query,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            204,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as Responses;

export const conversion: RequestConversion<RequestParams, {}, Responses, 'no-body'> = {
    request: testPath,
    response: responseConversion,
};

`;

exports[`operations/index.ts`] = `/*
 * Query In Path
 *
 * Testing query strings in paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
import { conversion as testPath } from './testPath';

export default {
    testPath,
} as const;
`;

