exports[`operations/getPowerFlows.ts`] = `/*
 * Principle Tech Demo
 *
 * Tech demo for Principle Studios' engineering team
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matt.dekrey@principlestudios.com
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, RequestConversions, RequestOpts, ResponseArgs, StandardResponse } from '@principlestudios/openapi-codegen-typescript';

export type RequestParams = {
    houseId: string;
    start?: string | null;
    end?: string | null;
};
export type RequestBodies = {
};

export type Responses = {
    200: {
        'application/json': {  };
    };
    /** Request range or house id not valid */
    400: {
        '': undefined;
    };
};

export function getPowerFlows(params: RequestParams): RequestOpts;
export function getPowerFlows(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.houseId, 'houseId');

    const headers: HttpHeaders = {
    };

    const query: HttpQuery = { 
        'houseId': params.houseId,
    };
    if (params.start != null) { query['start'] = params.start; }
    if (params.end != null) { query['end'] = params.end; }

    return {
        path: '/power',
        method: 'GET',
        headers,
        query,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
            400,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as StandardResponse<Responses>;

export const conversion: RequestConversions<RequestParams,  | undefined, Responses> = {
    request: getPowerFlows,
    response: responseConversion,
};

`;

exports[`operations/getCurrentBatteryState.ts`] = `/*
 * Principle Tech Demo
 *
 * Tech demo for Principle Studios' engineering team
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matt.dekrey@principlestudios.com
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, RequestConversions, RequestOpts, ResponseArgs, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    CurrentBatteryState,
} from './../models/CurrentBatteryState';

export type RequestParams = {
    houseId: string;
};
export type RequestBodies = {
};

export type Responses = {
    200: {
        'application/json': CurrentBatteryState;
    };
    /** Request range or house id not valid */
    400: {
        '': undefined;
    };
};

export function getCurrentBatteryState(params: RequestParams): RequestOpts;
export function getCurrentBatteryState(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');
    throwIfNullOrUndefined(params.houseId, 'houseId');

    const headers: HttpHeaders = {
    };

    const query: HttpQuery = { 
        'houseId': params.houseId,
    };

    return {
        path: '/battery/current',
        method: 'GET',
        headers,
        query,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
            400,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as StandardResponse<Responses>;

export const conversion: RequestConversions<RequestParams,  | undefined, Responses> = {
    request: getCurrentBatteryState,
    response: responseConversion,
};

`;

exports[`operations/index.ts`] = `/*
 * Principle Tech Demo
 *
 * Tech demo for Principle Studios' engineering team
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matt.dekrey@principlestudios.com
 * Generated by: https://principle.tools
 */
import { conversion as getPowerFlows } from './getPowerFlows';
import { conversion as getCurrentBatteryState } from './getCurrentBatteryState';

export default {
    getPowerFlows,
    getCurrentBatteryState,
} as const;
`;

exports[`models/CurrentBatteryState.ts`] = `/*
 * Principle Tech Demo
 *
 * Tech demo for Principle Studios' engineering team
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matt.dekrey@principlestudios.com
 * Generated by: https://principle.tools
 */

/**
 * @export
 * @interface CurrentBatteryState
 */
export type CurrentBatteryState = {
    /**
     * @type number | null
     */
    percent?: number | null;
    /**
     * @type number | null
     */
    currentCharge?: number | null;
    /**
     * @type number | null
     */
    maxCharge?: number | null;
};
`;

