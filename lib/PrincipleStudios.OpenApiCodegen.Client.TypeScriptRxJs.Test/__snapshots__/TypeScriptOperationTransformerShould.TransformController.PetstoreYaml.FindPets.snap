/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
import { HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, RequestConversions, RequestOpts, ResponseArgs, StandardResponse } from '@principlestudios/openapi-codegen-typescript';
import {
    Error,
} from './../models/Error';
import {
    Pet,
} from './../models/Pet';

export type RequestParams = {
    tags?: Array<string> | null;
    limit?: number | null;
};
export type RequestBodies = {
};

export type Responses = {
    /** unexpected error */
    'other': {
        'application/json': Error;
    };
    /** pet response */
    200: {
        'application/json': Array<Pet>;
    };
};

export function findPets(params: RequestParams): RequestOpts;
export function findPets(params: RequestParams): RequestOpts {
    throwIfNullOrUndefined(params, 'params');

    const headers: HttpHeaders = {
    };

    const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
    };
    if (params.tags != null) { query['tags'] = params.tags; }
    if (params.limit != null) { query['limit'] = params.limit; }

    return {
        path: '/pets',
        method: 'GET',
        headers,
        query,
    };
}

export const responseConversion = (res: ResponseArgs) => ({
        statusCode: [
            200,
        ].indexOf(res.status) === -1 ? 'other' : res.status,
        mimeType: res.xhr.getResponseHeader("Content-Type"),
        data: res.response,
        response: res,
    }) as StandardResponse<Responses>;

export const conversion: RequestConversions<RequestParams,  | undefined, Responses> = {
    request: findPets,
    response: responseConversion,
};

