/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PrincipleStudios.Test
{ 
    public abstract class UserLoginControllerBase : global::Microsoft.AspNetCore.Mvc.ControllerBase
    {
        
        /// <summary>
        /// Logs user into the system
        /// </summary>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        [global::Microsoft.AspNetCore.Mvc.HttpGet]
        [global::Microsoft.AspNetCore.Mvc.Route("/user/login")]
        // successful operation
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(200, Type = typeof(string))] // application/xml        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(200, Type = typeof(string))] // application/json
        // Invalid username/password supplied
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(400)] // 
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> LoginUserTypeSafeEntry(
            [global::Microsoft.AspNetCore.Mvc.FromQuery(Name = "username"), global::System.ComponentModel.DataAnnotations.Required] string username,
            [global::Microsoft.AspNetCore.Mvc.FromQuery(Name = "password"), global::System.ComponentModel.DataAnnotations.Required] string password
        ) => (await LoginUser(username,password)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<LoginUserActionResult> LoginUser(
            string username, 
            string password);

        public readonly struct LoginUserActionResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private class HeaderActionResult : global::Microsoft.AspNetCore.Mvc.IActionResult
            {
                private readonly global::Microsoft.AspNetCore.Mvc.IActionResult original;
                private readonly global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers;

                public HeaderActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult original, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers)
                {
                    this.original = original;
                    this.headers = headers;
                }

                public global::System.Threading.Tasks.Task ExecuteResultAsync(global::Microsoft.AspNetCore.Mvc.ActionContext context)
                {
                    foreach (var header in headers)
                        context.HttpContext.Response.Headers[header.Key] = global::Microsoft.Extensions.Primitives.StringValues.Concat(context.HttpContext.Response.Headers[header.Key], header.Value);
                    return original.ExecuteResultAsync(context);
                }
            }

            private LoginUserActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult, global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
            {
                this.ActionResult = new HeaderActionResult(ActionResult, headers);
            }

            private LoginUserActionResult(int statusCode, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode), headers)
            {
            }

            private LoginUserActionResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                }, headers)
            {
            }
            
            /// <summary>
            /// successful operation
            /// </summary>
            public static LoginUserActionResult ApplicationXmlOk(string result,
                string headerXRateLimit,
                string headerXExpiresAfter) =>
                new LoginUserActionResult(200, "application/xml", typeof(string), result,
                    new global::System.Collections.Generic.KeyValuePair<string, string>("X-Rate-Limit", headerXRateLimit),
                    new global::System.Collections.Generic.KeyValuePair<string, string>("X-Expires-After", headerXExpiresAfter));
            
            /// <summary>
            /// successful operation
            /// </summary>
            public static LoginUserActionResult ApplicationJsonOk(string result,
                string headerXRateLimit,
                string headerXExpiresAfter) =>
                new LoginUserActionResult(200, "application/json", typeof(string), result,
                    new global::System.Collections.Generic.KeyValuePair<string, string>("X-Rate-Limit", headerXRateLimit),
                    new global::System.Collections.Generic.KeyValuePair<string, string>("X-Expires-After", headerXExpiresAfter));
            
            /// <summary>
            /// Invalid username/password supplied
            /// </summary>
            public static LoginUserActionResult BadRequest() =>
                new LoginUserActionResult(400);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static LoginUserActionResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers) =>
                new LoginUserActionResult(actionResult, headers);
        }
    }
}
