/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Test
{ 
    /// <summary>
    public abstract class PetControllerBase : global::Microsoft.AspNetCore.Mvc.ControllerBase
    {
        
        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <param name="addPetBody"></param>
        [global::Microsoft.AspNetCore.Mvc.HttpPost]
        [global::Microsoft.AspNetCore.Mvc.Route("/pet")]
        [global::Microsoft.AspNetCore.Mvc.Consumes("application/json")]
        // Invalid input

        [global::Microsoft.AspNetCore.Authorization.Authorize(AuthenticationSchemes = "petstore_auth")]
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> AddPet(
            [global::Microsoft.AspNetCore.Mvc.FromBody, global::System.ComponentModel.DataAnnotations.Required] Pet addPetBody
        ) => (await AddPetapplicationJsonTypeSafe(addPetBody)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeAddPetResult> AddPetapplicationJsonTypeSafe(
            Pet addPetBody);

        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <param name="addPetBody"></param>
        [global::Microsoft.AspNetCore.Mvc.HttpPost]
        [global::Microsoft.AspNetCore.Mvc.Route("/pet")]
        [global::Microsoft.AspNetCore.Mvc.Consumes("application/xml")]
        // Invalid input

        [global::Microsoft.AspNetCore.Authorization.Authorize(AuthenticationSchemes = "petstore_auth")]
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> AddPet(
            [global::Microsoft.AspNetCore.Mvc.FromBody, global::System.ComponentModel.DataAnnotations.Required] Pet addPetBody
        ) => (await AddPetapplicationXmlTypeSafe(addPetBody)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeAddPetResult> AddPetapplicationXmlTypeSafe(
            Pet addPetBody);

        public readonly struct TypeSafeAddPetResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private TypeSafeAddPetResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeAddPetResult(int statusCode)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode))
            {
            }

            private TypeSafeAddPetResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeAddPetResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult) =>
                new TypeSafeAddPetResult(actionResult);
        }

        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <param name="updatePetBody"></param>
        [global::Microsoft.AspNetCore.Mvc.HttpPut]
        [global::Microsoft.AspNetCore.Mvc.Route("/pet")]
        [global::Microsoft.AspNetCore.Mvc.Consumes("application/json")]
        // Invalid ID supplied

        // Pet not found

        // Validation exception

        [global::Microsoft.AspNetCore.Authorization.Authorize(AuthenticationSchemes = "petstore_auth")]
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> UpdatePet(
            [global::Microsoft.AspNetCore.Mvc.FromBody, global::System.ComponentModel.DataAnnotations.Required] Pet updatePetBody
        ) => (await UpdatePetapplicationJsonTypeSafe(updatePetBody)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeUpdatePetResult> UpdatePetapplicationJsonTypeSafe(
            Pet updatePetBody);

        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <param name="updatePetBody"></param>
        [global::Microsoft.AspNetCore.Mvc.HttpPut]
        [global::Microsoft.AspNetCore.Mvc.Route("/pet")]
        [global::Microsoft.AspNetCore.Mvc.Consumes("application/xml")]
        // Invalid ID supplied

        // Pet not found

        // Validation exception

        [global::Microsoft.AspNetCore.Authorization.Authorize(AuthenticationSchemes = "petstore_auth")]
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> UpdatePet(
            [global::Microsoft.AspNetCore.Mvc.FromBody, global::System.ComponentModel.DataAnnotations.Required] Pet updatePetBody
        ) => (await UpdatePetapplicationXmlTypeSafe(updatePetBody)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeUpdatePetResult> UpdatePetapplicationXmlTypeSafe(
            Pet updatePetBody);

        public readonly struct TypeSafeUpdatePetResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private TypeSafeUpdatePetResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeUpdatePetResult(int statusCode)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode))
            {
            }

            private TypeSafeUpdatePetResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeUpdatePetResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult) =>
                new TypeSafeUpdatePetResult(actionResult);
        }
    }
}
