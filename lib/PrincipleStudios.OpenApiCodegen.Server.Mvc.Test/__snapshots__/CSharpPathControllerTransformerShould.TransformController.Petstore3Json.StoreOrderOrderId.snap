/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Test
{ 
    /// <summary>
    public abstract class StoreOrderOrderIdControllerBase : global::Microsoft.AspNetCore.Mvc.ControllerBase
    {
        
        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <remarks>
        /// For valid response try integer IDs with value &gt;= 1 and &lt;= 10. Other values will generated exceptions
        /// </remarks>
        /// <param name="orderId">ID of pet that needs to be fetched</param>
        [global::Microsoft.AspNetCore.Mvc.HttpGet]
        [global::Microsoft.AspNetCore.Mvc.Route("/store/order/{orderId}")]
        // successful operation
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(200, Type = typeof(Order))] // application/xml        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(200, Type = typeof(Order))] // application/json
        // Invalid ID supplied
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(400)] // 
        // Order not found
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(404)] // 
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> GetOrderById(
            [global::Microsoft.AspNetCore.Mvc.FromRoute(Name = "orderId"), global::System.ComponentModel.DataAnnotations.Required] long orderId
        ) => (await GetOrderByIdTypeSafe(orderId)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeGetOrderByIdResult> GetOrderByIdTypeSafe(
            long orderId);

        public readonly struct TypeSafeGetOrderByIdResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private TypeSafeGetOrderByIdResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeGetOrderByIdResult(int statusCode)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode))
            {
            }

            private TypeSafeGetOrderByIdResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            
            /// <summary>
            /// successful operation
            /// </summary>
            public static TypeSafeGetOrderByIdResult ApplicationXmlStatusCode200(Order result) =>
                new TypeSafeGetOrderByIdResult(200, "application/xml", typeof(Order), result);
            
            /// <summary>
            /// successful operation
            /// </summary>
            public static TypeSafeGetOrderByIdResult ApplicationJsonStatusCode200(Order result) =>
                new TypeSafeGetOrderByIdResult(200, "application/json", typeof(Order), result);
            
            /// <summary>
            /// Invalid ID supplied
            /// </summary>
            public static TypeSafeGetOrderByIdResult StatusCode400() =>
                new TypeSafeGetOrderByIdResult(400);
            
            /// <summary>
            /// Order not found
            /// </summary>
            public static TypeSafeGetOrderByIdResult StatusCode404() =>
                new TypeSafeGetOrderByIdResult(404);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeGetOrderByIdResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult) =>
                new TypeSafeGetOrderByIdResult(actionResult);
        }

        /// <summary>
        /// Delete purchase order by ID
        /// </summary>
        /// <remarks>
        /// For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
        /// </remarks>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        [global::Microsoft.AspNetCore.Mvc.HttpDelete]
        [global::Microsoft.AspNetCore.Mvc.Route("/store/order/{orderId}")]
        // Invalid ID supplied
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(400)] // 
        // Order not found
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(404)] // 
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> DeleteOrder(
            [global::Microsoft.AspNetCore.Mvc.FromRoute(Name = "orderId"), global::System.ComponentModel.DataAnnotations.Required] long orderId
        ) => (await DeleteOrderTypeSafe(orderId)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeDeleteOrderResult> DeleteOrderTypeSafe(
            long orderId);

        public readonly struct TypeSafeDeleteOrderResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private TypeSafeDeleteOrderResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeDeleteOrderResult(int statusCode)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode))
            {
            }

            private TypeSafeDeleteOrderResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            
            /// <summary>
            /// Invalid ID supplied
            /// </summary>
            public static TypeSafeDeleteOrderResult StatusCode400() =>
                new TypeSafeDeleteOrderResult(400);
            
            /// <summary>
            /// Order not found
            /// </summary>
            public static TypeSafeDeleteOrderResult StatusCode404() =>
                new TypeSafeDeleteOrderResult(404);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeDeleteOrderResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult) =>
                new TypeSafeDeleteOrderResult(actionResult);
        }
    }
}
