/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Test
{ 
    /// <summary>
    public abstract class UserUsernameControllerBase : global::Microsoft.AspNetCore.Mvc.ControllerBase
    {
        
        /// <summary>
        /// Get user by user name
        /// </summary>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing. </param>
        [global::Microsoft.AspNetCore.Mvc.HttpGet]
        [global::Microsoft.AspNetCore.Mvc.Route("/user/{username}")]
        // successful operation
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(200, Type = typeof(User))] // application/xml        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(200, Type = typeof(User))] // application/json
        // Invalid username supplied

        // User not found

        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> GetUserByName(
            [global::Microsoft.AspNetCore.Mvc.FromRoute(Name = "username"), global::System.ComponentModel.DataAnnotations.Required] string username
        ) => (await GetUserByNameTypeSafe(username)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeGetUserByNameResult> GetUserByNameTypeSafe(
            string username);

        public readonly struct TypeSafeGetUserByNameResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private TypeSafeGetUserByNameResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeGetUserByNameResult(int statusCode)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode))
            {
            }

            private TypeSafeGetUserByNameResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            
            /// <summary>
            /// successful operation
            /// </summary>
            public static TypeSafeGetUserByNameResult ApplicationXmlStatusCode200(User result) =>
                new TypeSafeGetUserByNameResult(200, "application/xml", typeof(User), result);
            
            /// <summary>
            /// successful operation
            /// </summary>
            public static TypeSafeGetUserByNameResult ApplicationJsonStatusCode200(User result) =>
                new TypeSafeGetUserByNameResult(200, "application/json", typeof(User), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeGetUserByNameResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult) =>
                new TypeSafeGetUserByNameResult(actionResult);
        }

        /// <summary>
        /// Updated user
        /// </summary>
        /// <remarks>
        /// This can only be done by the logged in user.
        /// </remarks>
        /// <param name="username">name that need to be updated</param>
        /// <param name="updateUserBody"></param>
        [global::Microsoft.AspNetCore.Mvc.HttpPut]
        [global::Microsoft.AspNetCore.Mvc.Route("/user/{username}")]
        [global::Microsoft.AspNetCore.Mvc.Consumes("application/json")]
        // Invalid user supplied

        // User not found

        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> UpdateUser(
            [global::Microsoft.AspNetCore.Mvc.FromRoute(Name = "username"), global::System.ComponentModel.DataAnnotations.Required] string username,
            [global::Microsoft.AspNetCore.Mvc.FromBody, global::System.ComponentModel.DataAnnotations.Required] User updateUserBody
        ) => (await UpdateUserTypeSafe(username,updateUserBody)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeUpdateUserResult> UpdateUserTypeSafe(
            string username, 
            User updateUserBody);

        public readonly struct TypeSafeUpdateUserResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private TypeSafeUpdateUserResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeUpdateUserResult(int statusCode)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode))
            {
            }

            private TypeSafeUpdateUserResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeUpdateUserResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult) =>
                new TypeSafeUpdateUserResult(actionResult);
        }

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// This can only be done by the logged in user.
        /// </remarks>
        /// <param name="username">The name that needs to be deleted</param>
        [global::Microsoft.AspNetCore.Mvc.HttpDelete]
        [global::Microsoft.AspNetCore.Mvc.Route("/user/{username}")]
        // Invalid username supplied

        // User not found

        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> DeleteUser(
            [global::Microsoft.AspNetCore.Mvc.FromRoute(Name = "username"), global::System.ComponentModel.DataAnnotations.Required] string username
        ) => (await DeleteUserTypeSafe(username)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeDeleteUserResult> DeleteUserTypeSafe(
            string username);

        public readonly struct TypeSafeDeleteUserResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private TypeSafeDeleteUserResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeDeleteUserResult(int statusCode)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode))
            {
            }

            private TypeSafeDeleteUserResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeDeleteUserResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult) =>
                new TypeSafeDeleteUserResult(actionResult);
        }
    }
}
