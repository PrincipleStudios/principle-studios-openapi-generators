/*
 * Rock Paper Scissors
 *
 * A sample API that uses enums to play rock-paper-scissors
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#pragma warning disable
#nullable enable
#nullable disable warnings

namespace PS.Controller
{ 
    public partial class PlayRockPaperScissorsRequest : global::System.IEquatable<PlayRockPaperScissorsRequest>
    {
        public PlayRockPaperScissorsRequest(
            [global::Newtonsoft.Json.JsonProperty(PropertyName="player1"), global::System.ComponentModel.DataAnnotations.Required] Option Player1, 
            [global::Newtonsoft.Json.JsonProperty(PropertyName="player2"), global::System.ComponentModel.DataAnnotations.Required] Option Player2
        ) { 
            this.Player1 = Player1;
            this.Player2 = Player2;
        }

        /// <summary>
        /// Gets Player1
        /// </summary>
        [global::System.ComponentModel.DataAnnotations.Required]
        [global::Newtonsoft.Json.JsonProperty(PropertyName="player1")]
        public Option Player1 { get; }

        /// <summary>
        /// Gets Player2
        /// </summary>
        [global::System.ComponentModel.DataAnnotations.Required]
        [global::Newtonsoft.Json.JsonProperty(PropertyName="player2")]
        public Option Player2 { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlayRockPaperScissorsRequest)obj);
        }

        public bool Equals(PlayRockPaperScissorsRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return (
                Player1 == other.Player1 ||
                Player1.Equals(other.Player1)
            ) && (
                Player2 == other.Player2 ||
                Player2.Equals(other.Player2)
            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Player1.GetHashCode();
                hashCode = hashCode * 59 + Player2.GetHashCode();
                return hashCode;
            }
        }
    }
}
