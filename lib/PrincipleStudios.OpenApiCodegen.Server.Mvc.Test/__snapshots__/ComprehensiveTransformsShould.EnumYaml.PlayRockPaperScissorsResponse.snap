/*
 * Rock Paper Scissors
 *
 * A sample API that uses enums to play rock-paper-scissors
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    [global::Newtonsoft.Json.JsonConverter(typeof(global::Newtonsoft.Json.Converters.StringEnumConverter))]
    [global::System.ComponentModel.TypeConverterAttribute(typeof(PlayRockPaperScissorsResponseEnumConverter))]
    public enum PlayRockPaperScissorsResponse
    {
        /// <summary>
        /// Enum Player1 for player1
        /// </summary>
        [global::System.Runtime.Serialization.EnumMember(Value = "player1")]
        Player1 = 0,

        /// <summary>
        /// Enum Player2 for player2
        /// </summary>
        [global::System.Runtime.Serialization.EnumMember(Value = "player2")]
        Player2 = 1,

    }

    public class PlayRockPaperScissorsResponseEnumConverter : global::System.ComponentModel.TypeConverter
    {
        public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Type? destinationType)
        {
            return destinationType == typeof(string) || base.CanConvertFrom(context, destinationType);
        }

        public override object? ConvertTo(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Globalization.CultureInfo? culture, object? value, global::System.Type destinationType)
        {
            if (destinationType != typeof(string))
                return base.ConvertTo(context, culture, value, destinationType);
            var result = global::Newtonsoft.Json.JsonConvert.SerializeObject(value);
            if (result.StartsWith('"') && result.EndsWith('"'))
                return result.Substring(1, result.Length - 2);
            return result;
        }

        public override object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, object value)
        {
            var s = value as string;
            if (string.IsNullOrEmpty(s))
            {
                return null;
            }

            return global::Newtonsoft.Json.JsonConvert.DeserializeObject<PlayRockPaperScissorsResponse>(@"""" + value.ToString() + @"""");
        }
    }
}
