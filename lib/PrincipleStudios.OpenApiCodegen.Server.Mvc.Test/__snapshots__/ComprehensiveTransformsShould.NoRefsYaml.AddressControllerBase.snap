/*
 * No Refs Demo
 *
 * A sample API that uses no refs
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings

namespace PS.Controller
{ 
    /// <summary>
    public abstract class AddressControllerBase : global::Microsoft.AspNetCore.Mvc.ControllerBase
    {
        
        /// <param name="lookupRecordBody"></param>
        [global::Microsoft.AspNetCore.Mvc.HttpPost]
        [global::Microsoft.AspNetCore.Mvc.Route("/address")]
        [global::Microsoft.AspNetCore.Mvc.Consumes("application/json")]
        // unexpected error
        [global::Microsoft.AspNetCore.Mvc.ProducesDefaultResponseType(typeof(LookupRecordOtherResponse))] // application/json
        // 
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(200, Type = typeof(LookupRecordResponse))] // application/json
        // 
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(409, Type = typeof(LookupRecord409Response))] // application/json
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> LookupRecord(
            [global::Microsoft.AspNetCore.Mvc.FromBody, global::System.ComponentModel.DataAnnotations.Required] LookupRecordRequest lookupRecordBody
        ) => (await LookupRecordTypeSafe(lookupRecordBody)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeLookupRecordResult> LookupRecordTypeSafe(
            LookupRecordRequest lookupRecordBody);

        public readonly struct TypeSafeLookupRecordResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private TypeSafeLookupRecordResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeLookupRecordResult(int statusCode)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode))
            {
            }

            private TypeSafeLookupRecordResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            
            
            public static TypeSafeLookupRecordResult StatusCode200(LookupRecordResponse result) =>
                new TypeSafeLookupRecordResult(200, "application/json", typeof(LookupRecordResponse), result);
            
            
            public static TypeSafeLookupRecordResult StatusCode409(LookupRecord409Response result) =>
                new TypeSafeLookupRecordResult(409, "application/json", typeof(LookupRecord409Response), result);
            
            
            public static TypeSafeLookupRecordResult OtherStatusCode(int statusCode, LookupRecordOtherResponse result) =>
                new TypeSafeLookupRecordResult(statusCode, "application/json", typeof(LookupRecordOtherResponse), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeLookupRecordResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult) =>
                new TypeSafeLookupRecordResult(actionResult);
        }
    }
}
