/*
 * No Refs Demo
 *
 * A sample API that uses no refs
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PS.Controller
{ 
    public partial class LookupRecord409ApplicationJson : IEquatable<LookupRecord409ApplicationJson>
    {
        public LookupRecord409ApplicationJson(
            [JsonProperty(PropertyName="multiple")] global::System.Collections.Generic.IEnumerable<LookupRecord409ApplicationJsonMultipleItems>? Multiple
        ) { 
            this.Multiple = Multiple;
        }

        /// <summary>
        /// Gets Multiple
        /// </summary>
        [JsonProperty(PropertyName="multiple")]
        public global::System.Collections.Generic.IEnumerable<LookupRecord409ApplicationJsonMultipleItems>? Multiple { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LookupRecord409ApplicationJson)obj);
        }

        public bool Equals(LookupRecord409ApplicationJson other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return (
                Multiple == other.Multiple ||
                Multiple != null &&
                Multiple.SequenceEqual(other.Multiple)
            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Multiple != null)
                    hashCode = hashCode * 59 + Multiple.GetHashCode();
                return hashCode;
            }
        }
    }
}
