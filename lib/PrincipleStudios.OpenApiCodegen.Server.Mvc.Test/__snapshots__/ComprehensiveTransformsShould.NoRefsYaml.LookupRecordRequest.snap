/*
 * No Refs Demo
 *
 * A sample API that uses no refs
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#pragma warning disable
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PS.Controller
{ 
    public partial class LookupRecordRequest : global::System.IEquatable<LookupRecordRequest>
    {
        public LookupRecordRequest(
            [global::Newtonsoft.Json.JsonProperty(PropertyName="formattedAddress"), global::System.ComponentModel.DataAnnotations.Required] string FormattedAddress, 
            [global::Newtonsoft.Json.JsonProperty(PropertyName="location"), global::System.ComponentModel.DataAnnotations.Required] LookupRecordRequestLocation Location
        ) { 
            this.FormattedAddress = FormattedAddress;
            this.Location = Location;
        }

        /// <summary>
        /// Gets FormattedAddress
        /// </summary>
        [global::System.ComponentModel.DataAnnotations.Required]
        [global::Newtonsoft.Json.JsonProperty(PropertyName="formattedAddress")]
        public string FormattedAddress { get; }

        /// <summary>
        /// Gets Location
        /// </summary>
        [global::System.ComponentModel.DataAnnotations.Required]
        [global::Newtonsoft.Json.JsonProperty(PropertyName="location")]
        public LookupRecordRequestLocation Location { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LookupRecordRequest)obj);
        }

        public bool Equals(LookupRecordRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return (
                FormattedAddress == other.FormattedAddress ||
                FormattedAddress.Equals(other.FormattedAddress)
            ) && (
                Location == other.Location ||
                Location.Equals(other.Location)
            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + FormattedAddress.GetHashCode();
                hashCode = hashCode * 59 + Location.GetHashCode();
                return hashCode;
            }
        }
    }
}
