/*
 * OAuth Scopes Sample
 *
 * A sample API that uses oauth scopes
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
#nullable enable
#nullable disable warnings

namespace PS.Controller
{ 
    /// <summary>
    public abstract class AddressControllerBase : ControllerBase
    {
        
        [HttpGet]
        [Route("/address")]
        // Sample Response
        [ProducesResponseType(200, Type = typeof(string))] // application/json
        [global::Microsoft.AspNetCore.Authorization.Authorize(AuthenticationSchemes = "ApiKeyAuth")]
        [global::Microsoft.AspNetCore.Authorization.Authorize(AuthenticationSchemes = "OAuth2")]
        public async Task<IActionResult> GetAddress(
            
        ) => (await GetAddressTypeSafe()).ActionResult;

        protected abstract Task<TypeSafeGetAddressResult> GetAddressTypeSafe();

        public readonly struct TypeSafeGetAddressResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeGetAddressResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeGetAddressResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeGetAddressResult(int statusCode, string mediaType, Type declaredType, object? resultObject)
                : this(new ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            
            /// <summary>
            /// Sample Response
            /// </summary>
            public static TypeSafeGetAddressResult ApplicationJsonStatusCode200(string result) =>
                new TypeSafeGetAddressResult(200, "application/json", typeof(string), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeGetAddressResult Unsafe(IActionResult actionResult) =>
                new TypeSafeGetAddressResult(actionResult);
        }
    }
}
