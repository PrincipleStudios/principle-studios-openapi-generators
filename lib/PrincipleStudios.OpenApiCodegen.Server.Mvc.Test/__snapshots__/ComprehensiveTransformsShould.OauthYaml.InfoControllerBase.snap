/*
 * OAuth Scopes Sample
 *
 * A sample API that uses oauth scopes
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings

namespace PS.Controller
{ 
    /// <summary>
    public abstract class InfoControllerBase : global::Microsoft.AspNetCore.Mvc.ControllerBase
    {
        
        /// <param name="data">base-64 encoded data</param>
        [global::Microsoft.AspNetCore.Mvc.HttpGet]
        [global::Microsoft.AspNetCore.Mvc.Route("/info")]
        // Sample Response
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(200, Type = typeof(string))] // application/json
        [global::Microsoft.AspNetCore.Authorization.AllowAnonymous]
        [global::Microsoft.AspNetCore.Authorization.Authorize(AuthenticationSchemes = "ApiKeyAuth")]
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> GetInfo(
            [global::Microsoft.AspNetCore.Mvc.FromQuery(Name = "data")] byte[]? data
        ) => (await GetInfoTypeSafe(data)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeGetInfoResult> GetInfoTypeSafe(
            byte[]? data);

        public readonly struct TypeSafeGetInfoResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private TypeSafeGetInfoResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeGetInfoResult(int statusCode)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode))
            {
            }

            private TypeSafeGetInfoResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            
            /// <summary>
            /// Sample Response
            /// </summary>
            public static TypeSafeGetInfoResult StatusCode200(string result) =>
                new TypeSafeGetInfoResult(200, "application/json", typeof(string), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeGetInfoResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult) =>
                new TypeSafeGetInfoResult(actionResult);
        }
    }
}
