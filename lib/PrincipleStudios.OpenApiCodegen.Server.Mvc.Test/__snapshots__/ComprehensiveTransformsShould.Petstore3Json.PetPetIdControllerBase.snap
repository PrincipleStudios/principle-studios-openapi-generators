/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings

namespace PS.Controller
{ 
    /// <summary>
    public abstract class PetPetIdControllerBase : global::Microsoft.AspNetCore.Mvc.ControllerBase
    {
        
        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <remarks>
        /// Returns a single pet
        /// </remarks>
        /// <param name="petId">ID of pet to return</param>
        [global::Microsoft.AspNetCore.Mvc.HttpGet]
        [global::Microsoft.AspNetCore.Mvc.Route("/pet/{petId}")]
        // successful operation
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(200, Type = typeof(Pet))] // application/xml        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(200, Type = typeof(Pet))] // application/json
        // Invalid ID supplied
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(400)] // 
        // Pet not found
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(404)] // 
        [global::Microsoft.AspNetCore.Authorization.Authorize(AuthenticationSchemes = "api_key")]
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> GetPetById(
            [global::Microsoft.AspNetCore.Mvc.FromRoute(Name = "petId"), global::System.ComponentModel.DataAnnotations.Required] long petId
        ) => (await GetPetByIdTypeSafe(petId)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeGetPetByIdResult> GetPetByIdTypeSafe(
            long petId);

        public readonly struct TypeSafeGetPetByIdResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private class HeaderActionResult : global::Microsoft.AspNetCore.Mvc.IActionResult
            {
                private readonly global::Microsoft.AspNetCore.Mvc.IActionResult original;
                private readonly global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers;

                public HeaderActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult original, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers)
                {
                    this.original = original;
                    this.headers = headers;
                }

                public global::System.Threading.Tasks.Task ExecuteResultAsync(global::Microsoft.AspNetCore.Mvc.ActionContext context)
                {
                    foreach (var header in headers)
                        context.HttpContext.Response.Headers[header.Key] = global::Microsoft.Extensions.Primitives.StringValues.Concat(context.HttpContext.Response.Headers[header.Key], header.Value);
                    return original.ExecuteResultAsync(context);
                }
            }

            private TypeSafeGetPetByIdResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult, global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
            {
                this.ActionResult = new HeaderActionResult(ActionResult, headers);
            }

            private TypeSafeGetPetByIdResult(int statusCode, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode), headers)
            {
            }

            private TypeSafeGetPetByIdResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                }, headers)
            {
            }
            
            /// <summary>
            /// successful operation
            /// </summary>
            public static TypeSafeGetPetByIdResult ApplicationXmlStatusCode200(Pet result) =>
                new TypeSafeGetPetByIdResult(200, "application/xml", typeof(Pet), result);
            
            /// <summary>
            /// successful operation
            /// </summary>
            public static TypeSafeGetPetByIdResult ApplicationJsonStatusCode200(Pet result) =>
                new TypeSafeGetPetByIdResult(200, "application/json", typeof(Pet), result);
            
            /// <summary>
            /// Invalid ID supplied
            /// </summary>
            public static TypeSafeGetPetByIdResult StatusCode400() =>
                new TypeSafeGetPetByIdResult(400);
            
            /// <summary>
            /// Pet not found
            /// </summary>
            public static TypeSafeGetPetByIdResult StatusCode404() =>
                new TypeSafeGetPetByIdResult(404);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeGetPetByIdResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers) =>
                new TypeSafeGetPetByIdResult(actionResult, headers);
        }

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name"></param>
        /// <param name="status"></param>
        [global::Microsoft.AspNetCore.Mvc.HttpPost]
        [global::Microsoft.AspNetCore.Mvc.Route("/pet/{petId}")]
        [global::Microsoft.AspNetCore.Mvc.Consumes("application/x-www-form-urlencoded")]
        // Invalid input
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(405)] // 
        [global::Microsoft.AspNetCore.Authorization.Authorize(AuthenticationSchemes = "petstore_auth")]
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> UpdatePetWithForm(
            [global::Microsoft.AspNetCore.Mvc.FromRoute(Name = "petId"), global::System.ComponentModel.DataAnnotations.Required] long petId,
            [global::Microsoft.AspNetCore.Mvc.FromForm(Name = "name")] string? name,
            [global::Microsoft.AspNetCore.Mvc.FromForm(Name = "status")] string? status
        ) => (await UpdatePetWithFormTypeSafe(petId,name,status)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeUpdatePetWithFormResult> UpdatePetWithFormTypeSafe(
            long petId, 
            string? name, 
            string? status);

        public readonly struct TypeSafeUpdatePetWithFormResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private class HeaderActionResult : global::Microsoft.AspNetCore.Mvc.IActionResult
            {
                private readonly global::Microsoft.AspNetCore.Mvc.IActionResult original;
                private readonly global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers;

                public HeaderActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult original, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers)
                {
                    this.original = original;
                    this.headers = headers;
                }

                public global::System.Threading.Tasks.Task ExecuteResultAsync(global::Microsoft.AspNetCore.Mvc.ActionContext context)
                {
                    foreach (var header in headers)
                        context.HttpContext.Response.Headers[header.Key] = global::Microsoft.Extensions.Primitives.StringValues.Concat(context.HttpContext.Response.Headers[header.Key], header.Value);
                    return original.ExecuteResultAsync(context);
                }
            }

            private TypeSafeUpdatePetWithFormResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult, global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
            {
                this.ActionResult = new HeaderActionResult(ActionResult, headers);
            }

            private TypeSafeUpdatePetWithFormResult(int statusCode, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode), headers)
            {
            }

            private TypeSafeUpdatePetWithFormResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                }, headers)
            {
            }
            
            /// <summary>
            /// Invalid input
            /// </summary>
            public static TypeSafeUpdatePetWithFormResult StatusCode405() =>
                new TypeSafeUpdatePetWithFormResult(405);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeUpdatePetWithFormResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers) =>
                new TypeSafeUpdatePetWithFormResult(actionResult, headers);
        }

        /// <summary>
        /// Deletes a pet
        /// </summary>
        /// <param name="apiKey"></param>
        /// <param name="petId">Pet id to delete</param>
        [global::Microsoft.AspNetCore.Mvc.HttpDelete]
        [global::Microsoft.AspNetCore.Mvc.Route("/pet/{petId}")]
        // Invalid ID supplied
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(400)] // 
        // Pet not found
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(404)] // 
        [global::Microsoft.AspNetCore.Authorization.Authorize(AuthenticationSchemes = "petstore_auth")]
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> DeletePet(
            [global::Microsoft.AspNetCore.Mvc.FromHeader(Name = "api_key")] string? apiKey,
            [global::Microsoft.AspNetCore.Mvc.FromRoute(Name = "petId"), global::System.ComponentModel.DataAnnotations.Required] long petId
        ) => (await DeletePetTypeSafe(apiKey,petId)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<TypeSafeDeletePetResult> DeletePetTypeSafe(
            string? apiKey, 
            long petId);

        public readonly struct TypeSafeDeletePetResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private class HeaderActionResult : global::Microsoft.AspNetCore.Mvc.IActionResult
            {
                private readonly global::Microsoft.AspNetCore.Mvc.IActionResult original;
                private readonly global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers;

                public HeaderActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult original, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers)
                {
                    this.original = original;
                    this.headers = headers;
                }

                public global::System.Threading.Tasks.Task ExecuteResultAsync(global::Microsoft.AspNetCore.Mvc.ActionContext context)
                {
                    foreach (var header in headers)
                        context.HttpContext.Response.Headers[header.Key] = global::Microsoft.Extensions.Primitives.StringValues.Concat(context.HttpContext.Response.Headers[header.Key], header.Value);
                    return original.ExecuteResultAsync(context);
                }
            }

            private TypeSafeDeletePetResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult, global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
            {
                this.ActionResult = new HeaderActionResult(ActionResult, headers);
            }

            private TypeSafeDeletePetResult(int statusCode, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode), headers)
            {
            }

            private TypeSafeDeletePetResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                }, headers)
            {
            }
            
            /// <summary>
            /// Invalid ID supplied
            /// </summary>
            public static TypeSafeDeletePetResult StatusCode400() =>
                new TypeSafeDeletePetResult(400);
            
            /// <summary>
            /// Pet not found
            /// </summary>
            public static TypeSafeDeletePetResult StatusCode404() =>
                new TypeSafeDeletePetResult(404);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeDeletePetResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers) =>
                new TypeSafeDeletePetResult(actionResult, headers);
        }
    }
}
