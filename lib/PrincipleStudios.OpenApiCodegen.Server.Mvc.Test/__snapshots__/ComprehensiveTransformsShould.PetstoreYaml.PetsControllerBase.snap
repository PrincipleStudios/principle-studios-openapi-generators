/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
#nullable enable
#nullable disable warnings
#pragma warning disable

namespace PS.Controller
{ 
    public abstract class PetsControllerBase : global::Microsoft.AspNetCore.Mvc.ControllerBase
    {
        
        /// <remarks>
        /// Returns all pets from the system that the user has access to
        /// Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
        /// 
        /// Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
        /// 
        /// </remarks>
        /// <param name="tags">tags to filter by</param>
        /// <param name="limit">maximum number of results to return</param>
        [global::Microsoft.AspNetCore.Mvc.HttpGet]
        [global::Microsoft.AspNetCore.Mvc.Route("/pets")]
        // unexpected error
        [global::Microsoft.AspNetCore.Mvc.ProducesDefaultResponseType(typeof(Error))] // application/json
        // pet response
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(200, Type = typeof(global::System.Collections.Generic.IEnumerable<Pet>))] // application/json
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> FindPetsTypeSafeEntry(
            [global::Microsoft.AspNetCore.Mvc.FromQuery(Name = "tags")] global::System.Collections.Generic.IEnumerable<string>? tags,
            [global::Microsoft.AspNetCore.Mvc.FromQuery(Name = "limit")] int? limit
        ) => (await FindPets(tags,limit)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<FindPetsActionResult> FindPets(
            global::System.Collections.Generic.IEnumerable<string>? tags, 
            int? limit);

        public readonly struct FindPetsActionResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private class HeaderActionResult : global::Microsoft.AspNetCore.Mvc.IActionResult
            {
                private readonly global::Microsoft.AspNetCore.Mvc.IActionResult original;
                private readonly global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers;

                public HeaderActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult original, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers)
                {
                    this.original = original;
                    this.headers = headers;
                }

                public global::System.Threading.Tasks.Task ExecuteResultAsync(global::Microsoft.AspNetCore.Mvc.ActionContext context)
                {
                    foreach (var header in headers)
                        context.HttpContext.Response.Headers[header.Key] = global::Microsoft.Extensions.Primitives.StringValues.Concat(context.HttpContext.Response.Headers[header.Key], header.Value);
                    return original.ExecuteResultAsync(context);
                }
            }

            private FindPetsActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult, global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
            {
                this.ActionResult = new HeaderActionResult(ActionResult, headers);
            }

            private FindPetsActionResult(int statusCode, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode), headers)
            {
            }

            private FindPetsActionResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                }, headers)
            {
            }
            
            /// <summary>
            /// pet response
            /// </summary>
            public static FindPetsActionResult Ok(global::System.Collections.Generic.IEnumerable<Pet> result) =>
                new FindPetsActionResult(200, "application/json", typeof(global::System.Collections.Generic.IEnumerable<Pet>), result);
            
            
            public static FindPetsActionResult OtherStatusCode(int statusCode, Error result) =>
                new FindPetsActionResult(statusCode, "application/json", typeof(Error), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static FindPetsActionResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers) =>
                new FindPetsActionResult(actionResult, headers);
        }

        /// <remarks>
        /// Creates a new pet in the store. Duplicates are allowed
        /// </remarks>
        /// <param name="addPetBody"></param>
        [global::Microsoft.AspNetCore.Mvc.HttpPost]
        [global::Microsoft.AspNetCore.Mvc.Route("/pets")]
        [global::Microsoft.AspNetCore.Mvc.Consumes("application/json")]
        // unexpected error
        [global::Microsoft.AspNetCore.Mvc.ProducesDefaultResponseType(typeof(Error))] // application/json
        // pet response
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(200, Type = typeof(Pet))] // application/json
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> AddPetTypeSafeEntry(
            [global::Microsoft.AspNetCore.Mvc.FromBody, global::System.ComponentModel.DataAnnotations.Required] NewPet addPetBody
        ) => (await AddPet(addPetBody)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<AddPetActionResult> AddPet(
            NewPet addPetBody);

        public readonly struct AddPetActionResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private class HeaderActionResult : global::Microsoft.AspNetCore.Mvc.IActionResult
            {
                private readonly global::Microsoft.AspNetCore.Mvc.IActionResult original;
                private readonly global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers;

                public HeaderActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult original, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers)
                {
                    this.original = original;
                    this.headers = headers;
                }

                public global::System.Threading.Tasks.Task ExecuteResultAsync(global::Microsoft.AspNetCore.Mvc.ActionContext context)
                {
                    foreach (var header in headers)
                        context.HttpContext.Response.Headers[header.Key] = global::Microsoft.Extensions.Primitives.StringValues.Concat(context.HttpContext.Response.Headers[header.Key], header.Value);
                    return original.ExecuteResultAsync(context);
                }
            }

            private AddPetActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult, global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
            {
                this.ActionResult = new HeaderActionResult(ActionResult, headers);
            }

            private AddPetActionResult(int statusCode, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode), headers)
            {
            }

            private AddPetActionResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                }, headers)
            {
            }
            
            /// <summary>
            /// pet response
            /// </summary>
            public static AddPetActionResult Ok(Pet result) =>
                new AddPetActionResult(200, "application/json", typeof(Pet), result);
            
            
            public static AddPetActionResult OtherStatusCode(int statusCode, Error result) =>
                new AddPetActionResult(statusCode, "application/json", typeof(Error), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static AddPetActionResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers) =>
                new AddPetActionResult(actionResult, headers);
        }

        /// <remarks>
        /// Returns a user based on a single ID, if the user does not have access to the pet
        /// </remarks>
        /// <param name="id">ID of pet to fetch</param>
        [global::Microsoft.AspNetCore.Mvc.HttpGet]
        [global::Microsoft.AspNetCore.Mvc.Route("/pets/{id}")]
        // unexpected error
        [global::Microsoft.AspNetCore.Mvc.ProducesDefaultResponseType(typeof(Error))] // application/json
        // pet response
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(200, Type = typeof(Pet))] // application/json
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> FindPetByIdTypeSafeEntry(
            [global::Microsoft.AspNetCore.Mvc.FromRoute(Name = "id"), global::System.ComponentModel.DataAnnotations.Required] long id
        ) => (await FindPetById(id)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<FindPetByIdActionResult> FindPetById(
            long id);

        public readonly struct FindPetByIdActionResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private class HeaderActionResult : global::Microsoft.AspNetCore.Mvc.IActionResult
            {
                private readonly global::Microsoft.AspNetCore.Mvc.IActionResult original;
                private readonly global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers;

                public HeaderActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult original, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers)
                {
                    this.original = original;
                    this.headers = headers;
                }

                public global::System.Threading.Tasks.Task ExecuteResultAsync(global::Microsoft.AspNetCore.Mvc.ActionContext context)
                {
                    foreach (var header in headers)
                        context.HttpContext.Response.Headers[header.Key] = global::Microsoft.Extensions.Primitives.StringValues.Concat(context.HttpContext.Response.Headers[header.Key], header.Value);
                    return original.ExecuteResultAsync(context);
                }
            }

            private FindPetByIdActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult, global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
            {
                this.ActionResult = new HeaderActionResult(ActionResult, headers);
            }

            private FindPetByIdActionResult(int statusCode, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode), headers)
            {
            }

            private FindPetByIdActionResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                }, headers)
            {
            }
            
            /// <summary>
            /// pet response
            /// </summary>
            public static FindPetByIdActionResult Ok(Pet result) =>
                new FindPetByIdActionResult(200, "application/json", typeof(Pet), result);
            
            
            public static FindPetByIdActionResult OtherStatusCode(int statusCode, Error result) =>
                new FindPetByIdActionResult(statusCode, "application/json", typeof(Error), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static FindPetByIdActionResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers) =>
                new FindPetByIdActionResult(actionResult, headers);
        }

        /// <remarks>
        /// deletes a single pet based on the ID supplied
        /// </remarks>
        /// <param name="id">ID of pet to delete</param>
        [global::Microsoft.AspNetCore.Mvc.HttpDelete]
        [global::Microsoft.AspNetCore.Mvc.Route("/pets/{id}")]
        // unexpected error
        [global::Microsoft.AspNetCore.Mvc.ProducesDefaultResponseType(typeof(Error))] // application/json
        // pet deleted
        [global::Microsoft.AspNetCore.Mvc.ProducesResponseType(204)] // 
        public async global::System.Threading.Tasks.Task<global::Microsoft.AspNetCore.Mvc.IActionResult> DeletePetTypeSafeEntry(
            [global::Microsoft.AspNetCore.Mvc.FromRoute(Name = "id"), global::System.ComponentModel.DataAnnotations.Required] long id
        ) => (await DeletePet(id)).ActionResult;

        protected abstract global::System.Threading.Tasks.Task<DeletePetActionResult> DeletePet(
            long id);

        public readonly struct DeletePetActionResult
        {
            public readonly global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult;

            private class HeaderActionResult : global::Microsoft.AspNetCore.Mvc.IActionResult
            {
                private readonly global::Microsoft.AspNetCore.Mvc.IActionResult original;
                private readonly global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers;

                public HeaderActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult original, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> headers)
                {
                    this.original = original;
                    this.headers = headers;
                }

                public global::System.Threading.Tasks.Task ExecuteResultAsync(global::Microsoft.AspNetCore.Mvc.ActionContext context)
                {
                    foreach (var header in headers)
                        context.HttpContext.Response.Headers[header.Key] = global::Microsoft.Extensions.Primitives.StringValues.Concat(context.HttpContext.Response.Headers[header.Key], header.Value);
                    return original.ExecuteResultAsync(context);
                }
            }

            private DeletePetActionResult(global::Microsoft.AspNetCore.Mvc.IActionResult ActionResult, global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
            {
                this.ActionResult = new HeaderActionResult(ActionResult, headers);
            }

            private DeletePetActionResult(int statusCode, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.StatusCodeResult(statusCode), headers)
            {
            }

            private DeletePetActionResult(int statusCode, string mediaType, global::System.Type declaredType, object? resultObject, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers)
                : this(new global::Microsoft.AspNetCore.Mvc.ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                }, headers)
            {
            }
            
            /// <summary>
            /// pet deleted
            /// </summary>
            public static DeletePetActionResult NoContent() =>
                new DeletePetActionResult(204);
            
            
            public static DeletePetActionResult OtherStatusCode(int statusCode, Error result) =>
                new DeletePetActionResult(statusCode, "application/json", typeof(Error), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static DeletePetActionResult Unsafe(global::Microsoft.AspNetCore.Mvc.IActionResult actionResult, params global::System.Collections.Generic.KeyValuePair<string, string>[] headers) =>
                new DeletePetActionResult(actionResult, headers);
        }
    }
}
