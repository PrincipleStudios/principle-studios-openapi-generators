/*
 * Principle Tech Demo
 *
 * Tech demo for Principle Studios' engineering team
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matt.dekrey@principlestudios.com
 * Generated by: https://principle.tools
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
#nullable enable
#nullable disable warnings

namespace PS.Controller
{ 
    public partial class CurrentBatteryState : global::System.IEquatable<CurrentBatteryState>
    {
        public CurrentBatteryState(
            [global::Newtonsoft.Json.JsonProperty(PropertyName="percent")] double? Percent, 
            [global::Newtonsoft.Json.JsonProperty(PropertyName="currentCharge")] double? CurrentCharge, 
            [global::Newtonsoft.Json.JsonProperty(PropertyName="maxCharge")] double? MaxCharge
        ) { 
            this.Percent = Percent;
            this.CurrentCharge = CurrentCharge;
            this.MaxCharge = MaxCharge;
        }

        /// <summary>
        /// Gets Percent
        /// </summary>
        [global::Newtonsoft.Json.JsonProperty(PropertyName="percent")]
        public double? Percent { get; }

        /// <summary>
        /// Gets CurrentCharge
        /// </summary>
        [global::Newtonsoft.Json.JsonProperty(PropertyName="currentCharge")]
        public double? CurrentCharge { get; }

        /// <summary>
        /// Gets MaxCharge
        /// </summary>
        [global::Newtonsoft.Json.JsonProperty(PropertyName="maxCharge")]
        public double? MaxCharge { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CurrentBatteryState)obj);
        }

        public bool Equals(CurrentBatteryState other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return (
                Percent == other.Percent ||
                Percent != null &&
                Percent.Equals(other.Percent)
            ) && (
                CurrentCharge == other.CurrentCharge ||
                CurrentCharge != null &&
                CurrentCharge.Equals(other.CurrentCharge)
            ) && (
                MaxCharge == other.MaxCharge ||
                MaxCharge != null &&
                MaxCharge.Equals(other.MaxCharge)
            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Percent != null)
                    hashCode = hashCode * 59 + Percent.GetHashCode();
                if (CurrentCharge != null)
                    hashCode = hashCode * 59 + CurrentCharge.GetHashCode();
                if (MaxCharge != null)
                    hashCode = hashCode * 59 + MaxCharge.GetHashCode();
                return hashCode;
            }
        }
    }
}
