/*
 * Principle Tech Demo
 *
 * Tech demo for Principle Studios' engineering team
 *
 * OpenAPI spec version: 1.0.0
 * Contact: matt.dekrey@principlestudios.com
 * Generated by: https://principle.tools
 */
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
#nullable enable
#nullable disable warnings

namespace PS.Controller
{ 
    /// <summary>
    /// Get power flows data
    /// </summary>
    public abstract class PowerControllerBase : ControllerBase
    {
        
        /// <summary>
        /// Get information on where electricity is flowing within a virtual home
        /// </summary>
        /// <param name="houseId"></param>
        /// <param name="start"></param>
        /// <param name="end"></param>
        [HttpGet]
        [Route("/power")]
        // 
        [ProducesResponseType(200, Type = typeof(GetPowerFlows200ApplicationJson))] // application/json
        // Request range or house id not valid

        public async Task<IActionResult> GetPowerFlows(
            [FromQuery(Name = "houseId"), Required] global::System.Guid houseId,
            [FromQuery(Name = "start")] string? start,
            [FromQuery(Name = "end")] string? end
        ) => (await GetPowerFlowsTypeSafe(houseId,start,end)).ActionResult;

        protected abstract Task<TypeSafeGetPowerFlowsResult> GetPowerFlowsTypeSafe(
            global::System.Guid houseId, 
            string? start, 
            string? end);

        public readonly struct TypeSafeGetPowerFlowsResult
        {
            public readonly IActionResult ActionResult;

            private TypeSafeGetPowerFlowsResult(IActionResult ActionResult)
            {
                this.ActionResult = ActionResult;
            }

            private TypeSafeGetPowerFlowsResult(int statusCode)
                : this(new StatusCodeResult(statusCode))
            {
            }

            private TypeSafeGetPowerFlowsResult(int statusCode, string mediaType, Type declaredType, object? resultObject)
                : this(new ObjectResult(resultObject)
                {
                    ContentTypes = new global::Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection { { new global::Microsoft.Net.Http.Headers.MediaTypeHeaderValue(mediaType) } },
                    DeclaredType = declaredType,
                    StatusCode = statusCode
                })
            {
            }
            
            
            public static TypeSafeGetPowerFlowsResult ApplicationJsonStatusCode200(GetPowerFlows200ApplicationJson result) =>
                new TypeSafeGetPowerFlowsResult(200, "application/json", typeof(GetPowerFlows200ApplicationJson), result);
            

            /// <summary>Allows for action results not specified in the API</summary>
            public static TypeSafeGetPowerFlowsResult Unsafe(IActionResult actionResult) =>
                new TypeSafeGetPowerFlowsResult(actionResult);
        }
    }
}
