/*
 * Tree
 *
 * A sample API that demonstrates a tree structure including self-referencing object
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://principle.tools
 */
#pragma warning disable
#nullable enable
#nullable disable warnings

namespace PS.Controller
{ 
    public partial class Node : global::System.IEquatable<Node>
    {
        public Node(
            [global::Newtonsoft.Json.JsonProperty(PropertyName="children"), global::System.ComponentModel.DataAnnotations.Required] global::System.Collections.Generic.IEnumerable<Node> Children
        ) { 
            this.Children = Children;
        }

        /// <summary>
        /// Gets Children
        /// </summary>
        [global::System.ComponentModel.DataAnnotations.Required]
        [global::Newtonsoft.Json.JsonProperty(PropertyName="children")]
        public global::System.Collections.Generic.IEnumerable<Node> Children { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Node)obj);
        }

        public bool Equals(Node other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return (
                Children == other.Children ||
                System.Linq.Enumerable.SequenceEqual(Children, other.Children)
            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Children.GetHashCode();
                return hashCode;
            }
        }
    }
}
