/*
 * Swagger Petstore
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://principle.tools
 */
#pragma warning disable
#nullable enable
#nullable disable warnings

namespace PrincipleStudios.Test
{ 
    public partial class NewPet : global::System.IEquatable<NewPet>
    {
        public NewPet(
            [global::Newtonsoft.Json.JsonProperty(PropertyName="name"), global::System.ComponentModel.DataAnnotations.Required] string Name, 
            [global::Newtonsoft.Json.JsonProperty(PropertyName="tag")] string? Tag
        ) { 
            this.Name = Name;
            this.Tag = Tag;
        }

        /// <summary>
        /// Gets Name
        /// </summary>
        [global::System.ComponentModel.DataAnnotations.Required]
        [global::Newtonsoft.Json.JsonProperty(PropertyName="name")]
        public string Name { get; }

        /// <summary>
        /// Gets Tag
        /// </summary>
        [global::Newtonsoft.Json.JsonProperty(PropertyName="tag")]
        public string? Tag { get; }

        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NewPet)obj);
        }

        public bool Equals(NewPet other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return (
                Name == other.Name ||
                Name.Equals(other.Name)
            ) && (
                Tag == other.Tag ||
                Tag != null &&
                Tag.Equals(other.Tag)
            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + Name.GetHashCode();
                if (Tag != null)
                    hashCode = hashCode * 59 + Tag.GetHashCode();
                return hashCode;
            }
        }
    }
}
